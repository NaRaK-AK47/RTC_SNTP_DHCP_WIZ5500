
WIZ5500_SNTP_RTC_STM32C6T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079fc  080079fc  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a04  08007a04  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a04  08007a04  00017a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08007a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  200000b8  08007ac4  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08007ac4  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e8e9  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af0  00000000  00000000  0002e9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  000314c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00032298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001922c  00000000  00000000  00032f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010138  00000000  00000000  0004c18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089735  00000000  00000000  0005c2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e59f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004260  00000000  00000000  000e5a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b8 	.word	0x200000b8
 8000128:	00000000 	.word	0x00000000
 800012c:	080075fc 	.word	0x080075fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000bc 	.word	0x200000bc
 8000148:	080075fc 	.word	0x080075fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_uldivmod>:
 800015c:	b953      	cbnz	r3, 8000174 <__aeabi_uldivmod+0x18>
 800015e:	b94a      	cbnz	r2, 8000174 <__aeabi_uldivmod+0x18>
 8000160:	2900      	cmp	r1, #0
 8000162:	bf08      	it	eq
 8000164:	2800      	cmpeq	r0, #0
 8000166:	bf1c      	itt	ne
 8000168:	f04f 31ff 	movne.w	r1, #4294967295
 800016c:	f04f 30ff 	movne.w	r0, #4294967295
 8000170:	f000 b976 	b.w	8000460 <__aeabi_idiv0>
 8000174:	f1ad 0c08 	sub.w	ip, sp, #8
 8000178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017c:	f000 f806 	bl	800018c <__udivmoddi4>
 8000180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000188:	b004      	add	sp, #16
 800018a:	4770      	bx	lr

0800018c <__udivmoddi4>:
 800018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000190:	9e08      	ldr	r6, [sp, #32]
 8000192:	460d      	mov	r5, r1
 8000194:	4604      	mov	r4, r0
 8000196:	4688      	mov	r8, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14d      	bne.n	8000238 <__udivmoddi4+0xac>
 800019c:	428a      	cmp	r2, r1
 800019e:	4694      	mov	ip, r2
 80001a0:	d968      	bls.n	8000274 <__udivmoddi4+0xe8>
 80001a2:	fab2 f282 	clz	r2, r2
 80001a6:	b152      	cbz	r2, 80001be <__udivmoddi4+0x32>
 80001a8:	fa01 f302 	lsl.w	r3, r1, r2
 80001ac:	f1c2 0120 	rsb	r1, r2, #32
 80001b0:	fa20 f101 	lsr.w	r1, r0, r1
 80001b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b8:	ea41 0803 	orr.w	r8, r1, r3
 80001bc:	4094      	lsls	r4, r2
 80001be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001c6:	fa1f fe8c 	uxth.w	lr, ip
 80001ca:	fb01 8817 	mls	r8, r1, r7, r8
 80001ce:	fb07 f00e 	mul.w	r0, r7, lr
 80001d2:	0c23      	lsrs	r3, r4, #16
 80001d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001d8:	4298      	cmp	r0, r3
 80001da:	d90a      	bls.n	80001f2 <__udivmoddi4+0x66>
 80001dc:	eb1c 0303 	adds.w	r3, ip, r3
 80001e0:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e4:	f080 811e 	bcs.w	8000424 <__udivmoddi4+0x298>
 80001e8:	4298      	cmp	r0, r3
 80001ea:	f240 811b 	bls.w	8000424 <__udivmoddi4+0x298>
 80001ee:	3f02      	subs	r7, #2
 80001f0:	4463      	add	r3, ip
 80001f2:	1a1b      	subs	r3, r3, r0
 80001f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80001f8:	fb01 3310 	mls	r3, r1, r0, r3
 80001fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000200:	b2a4      	uxth	r4, r4
 8000202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000206:	45a6      	cmp	lr, r4
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x94>
 800020a:	eb1c 0404 	adds.w	r4, ip, r4
 800020e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000212:	f080 8109 	bcs.w	8000428 <__udivmoddi4+0x29c>
 8000216:	45a6      	cmp	lr, r4
 8000218:	f240 8106 	bls.w	8000428 <__udivmoddi4+0x29c>
 800021c:	4464      	add	r4, ip
 800021e:	3802      	subs	r0, #2
 8000220:	2100      	movs	r1, #0
 8000222:	eba4 040e 	sub.w	r4, r4, lr
 8000226:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022a:	b11e      	cbz	r6, 8000234 <__udivmoddi4+0xa8>
 800022c:	2300      	movs	r3, #0
 800022e:	40d4      	lsrs	r4, r2
 8000230:	e9c6 4300 	strd	r4, r3, [r6]
 8000234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000238:	428b      	cmp	r3, r1
 800023a:	d908      	bls.n	800024e <__udivmoddi4+0xc2>
 800023c:	2e00      	cmp	r6, #0
 800023e:	f000 80ee 	beq.w	800041e <__udivmoddi4+0x292>
 8000242:	2100      	movs	r1, #0
 8000244:	e9c6 0500 	strd	r0, r5, [r6]
 8000248:	4608      	mov	r0, r1
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	fab3 f183 	clz	r1, r3
 8000252:	2900      	cmp	r1, #0
 8000254:	d14a      	bne.n	80002ec <__udivmoddi4+0x160>
 8000256:	42ab      	cmp	r3, r5
 8000258:	d302      	bcc.n	8000260 <__udivmoddi4+0xd4>
 800025a:	4282      	cmp	r2, r0
 800025c:	f200 80fc 	bhi.w	8000458 <__udivmoddi4+0x2cc>
 8000260:	1a84      	subs	r4, r0, r2
 8000262:	eb65 0303 	sbc.w	r3, r5, r3
 8000266:	2001      	movs	r0, #1
 8000268:	4698      	mov	r8, r3
 800026a:	2e00      	cmp	r6, #0
 800026c:	d0e2      	beq.n	8000234 <__udivmoddi4+0xa8>
 800026e:	e9c6 4800 	strd	r4, r8, [r6]
 8000272:	e7df      	b.n	8000234 <__udivmoddi4+0xa8>
 8000274:	b902      	cbnz	r2, 8000278 <__udivmoddi4+0xec>
 8000276:	deff      	udf	#255	; 0xff
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	2a00      	cmp	r2, #0
 800027e:	f040 8091 	bne.w	80003a4 <__udivmoddi4+0x218>
 8000282:	eba1 000c 	sub.w	r0, r1, ip
 8000286:	2101      	movs	r1, #1
 8000288:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028c:	fa1f fe8c 	uxth.w	lr, ip
 8000290:	fbb0 f3f7 	udiv	r3, r0, r7
 8000294:	fb07 0013 	mls	r0, r7, r3, r0
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800029e:	fb0e f003 	mul.w	r0, lr, r3
 80002a2:	42a8      	cmp	r0, r5
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0x12c>
 80002a6:	eb1c 0505 	adds.w	r5, ip, r5
 80002aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x12a>
 80002b0:	42a8      	cmp	r0, r5
 80002b2:	f200 80ce 	bhi.w	8000452 <__udivmoddi4+0x2c6>
 80002b6:	4643      	mov	r3, r8
 80002b8:	1a2d      	subs	r5, r5, r0
 80002ba:	fbb5 f0f7 	udiv	r0, r5, r7
 80002be:	fb07 5510 	mls	r5, r7, r0, r5
 80002c2:	fb0e fe00 	mul.w	lr, lr, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	45a6      	cmp	lr, r4
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x156>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x154>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f200 80b6 	bhi.w	800044c <__udivmoddi4+0x2c0>
 80002e0:	4628      	mov	r0, r5
 80002e2:	eba4 040e 	sub.w	r4, r4, lr
 80002e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ea:	e79e      	b.n	800022a <__udivmoddi4+0x9e>
 80002ec:	f1c1 0720 	rsb	r7, r1, #32
 80002f0:	408b      	lsls	r3, r1
 80002f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fa:	fa25 fa07 	lsr.w	sl, r5, r7
 80002fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000302:	fbba f8f9 	udiv	r8, sl, r9
 8000306:	fa20 f307 	lsr.w	r3, r0, r7
 800030a:	fb09 aa18 	mls	sl, r9, r8, sl
 800030e:	408d      	lsls	r5, r1
 8000310:	fa1f fe8c 	uxth.w	lr, ip
 8000314:	431d      	orrs	r5, r3
 8000316:	fa00 f301 	lsl.w	r3, r0, r1
 800031a:	fb08 f00e 	mul.w	r0, r8, lr
 800031e:	0c2c      	lsrs	r4, r5, #16
 8000320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000324:	42a0      	cmp	r0, r4
 8000326:	fa02 f201 	lsl.w	r2, r2, r1
 800032a:	d90b      	bls.n	8000344 <__udivmoddi4+0x1b8>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f108 3aff 	add.w	sl, r8, #4294967295
 8000334:	f080 8088 	bcs.w	8000448 <__udivmoddi4+0x2bc>
 8000338:	42a0      	cmp	r0, r4
 800033a:	f240 8085 	bls.w	8000448 <__udivmoddi4+0x2bc>
 800033e:	f1a8 0802 	sub.w	r8, r8, #2
 8000342:	4464      	add	r4, ip
 8000344:	1a24      	subs	r4, r4, r0
 8000346:	fbb4 f0f9 	udiv	r0, r4, r9
 800034a:	fb09 4410 	mls	r4, r9, r0, r4
 800034e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000352:	b2ad      	uxth	r5, r5
 8000354:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x1e2>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 35ff 	add.w	r5, r0, #4294967295
 8000364:	d26c      	bcs.n	8000440 <__udivmoddi4+0x2b4>
 8000366:	45a6      	cmp	lr, r4
 8000368:	d96a      	bls.n	8000440 <__udivmoddi4+0x2b4>
 800036a:	3802      	subs	r0, #2
 800036c:	4464      	add	r4, ip
 800036e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000372:	fba0 9502 	umull	r9, r5, r0, r2
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	42ac      	cmp	r4, r5
 800037c:	46c8      	mov	r8, r9
 800037e:	46ae      	mov	lr, r5
 8000380:	d356      	bcc.n	8000430 <__udivmoddi4+0x2a4>
 8000382:	d053      	beq.n	800042c <__udivmoddi4+0x2a0>
 8000384:	2e00      	cmp	r6, #0
 8000386:	d069      	beq.n	800045c <__udivmoddi4+0x2d0>
 8000388:	ebb3 0208 	subs.w	r2, r3, r8
 800038c:	eb64 040e 	sbc.w	r4, r4, lr
 8000390:	fa22 f301 	lsr.w	r3, r2, r1
 8000394:	fa04 f707 	lsl.w	r7, r4, r7
 8000398:	431f      	orrs	r7, r3
 800039a:	40cc      	lsrs	r4, r1
 800039c:	e9c6 7400 	strd	r7, r4, [r6]
 80003a0:	2100      	movs	r1, #0
 80003a2:	e747      	b.n	8000234 <__udivmoddi4+0xa8>
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	f1c2 0120 	rsb	r1, r2, #32
 80003ac:	fa25 f301 	lsr.w	r3, r5, r1
 80003b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b4:	fa20 f101 	lsr.w	r1, r0, r1
 80003b8:	4095      	lsls	r5, r2
 80003ba:	430d      	orrs	r5, r1
 80003bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c0:	fb07 3311 	mls	r3, r7, r1, r3
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	0c28      	lsrs	r0, r5, #16
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	fb01 f30e 	mul.w	r3, r1, lr
 80003d2:	4283      	cmp	r3, r0
 80003d4:	fa04 f402 	lsl.w	r4, r4, r2
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x260>
 80003da:	eb1c 0000 	adds.w	r0, ip, r0
 80003de:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e2:	d22f      	bcs.n	8000444 <__udivmoddi4+0x2b8>
 80003e4:	4283      	cmp	r3, r0
 80003e6:	d92d      	bls.n	8000444 <__udivmoddi4+0x2b8>
 80003e8:	3902      	subs	r1, #2
 80003ea:	4460      	add	r0, ip
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f2:	fb07 0013 	mls	r0, r7, r3, r0
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003fc:	fb03 f00e 	mul.w	r0, r3, lr
 8000400:	42a8      	cmp	r0, r5
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x28a>
 8000404:	eb1c 0505 	adds.w	r5, ip, r5
 8000408:	f103 38ff 	add.w	r8, r3, #4294967295
 800040c:	d216      	bcs.n	800043c <__udivmoddi4+0x2b0>
 800040e:	42a8      	cmp	r0, r5
 8000410:	d914      	bls.n	800043c <__udivmoddi4+0x2b0>
 8000412:	3b02      	subs	r3, #2
 8000414:	4465      	add	r5, ip
 8000416:	1a28      	subs	r0, r5, r0
 8000418:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041c:	e738      	b.n	8000290 <__udivmoddi4+0x104>
 800041e:	4631      	mov	r1, r6
 8000420:	4630      	mov	r0, r6
 8000422:	e707      	b.n	8000234 <__udivmoddi4+0xa8>
 8000424:	462f      	mov	r7, r5
 8000426:	e6e4      	b.n	80001f2 <__udivmoddi4+0x66>
 8000428:	4618      	mov	r0, r3
 800042a:	e6f9      	b.n	8000220 <__udivmoddi4+0x94>
 800042c:	454b      	cmp	r3, r9
 800042e:	d2a9      	bcs.n	8000384 <__udivmoddi4+0x1f8>
 8000430:	ebb9 0802 	subs.w	r8, r9, r2
 8000434:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000438:	3801      	subs	r0, #1
 800043a:	e7a3      	b.n	8000384 <__udivmoddi4+0x1f8>
 800043c:	4643      	mov	r3, r8
 800043e:	e7ea      	b.n	8000416 <__udivmoddi4+0x28a>
 8000440:	4628      	mov	r0, r5
 8000442:	e794      	b.n	800036e <__udivmoddi4+0x1e2>
 8000444:	4641      	mov	r1, r8
 8000446:	e7d1      	b.n	80003ec <__udivmoddi4+0x260>
 8000448:	46d0      	mov	r8, sl
 800044a:	e77b      	b.n	8000344 <__udivmoddi4+0x1b8>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	e747      	b.n	80002e2 <__udivmoddi4+0x156>
 8000452:	3b02      	subs	r3, #2
 8000454:	4465      	add	r5, ip
 8000456:	e72f      	b.n	80002b8 <__udivmoddi4+0x12c>
 8000458:	4608      	mov	r0, r1
 800045a:	e706      	b.n	800026a <__udivmoddi4+0xde>
 800045c:	4631      	mov	r1, r6
 800045e:	e6e9      	b.n	8000234 <__udivmoddi4+0xa8>

08000460 <__aeabi_idiv0>:
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop

08000464 <UWriteData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void UWriteData(const char data)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 800046e:	bf00      	nop
 8000470:	4b07      	ldr	r3, [pc, #28]	; (8000490 <UWriteData+0x2c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800047a:	2b80      	cmp	r3, #128	; 0x80
 800047c:	d1f8      	bne.n	8000470 <UWriteData+0xc>

	huart2.Instance->DR=data;
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <UWriteData+0x2c>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	605a      	str	r2, [r3, #4]

}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	20000140 	.word	0x20000140

08000494 <__io_putchar>:

int __io_putchar(int ch)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ffdf 	bl	8000464 <UWriteData>
	return ch;
 80004a6:	687b      	ldr	r3, [r7, #4]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3708      	adds	r7, #8
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <PHYStatusCheck>:


void PHYStatusCheck(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80004b6:	480e      	ldr	r0, [pc, #56]	; (80004f0 <PHYStatusCheck+0x40>)
 80004b8:	f005 fdbc 	bl	8006034 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	4619      	mov	r1, r3
 80004c0:	200f      	movs	r0, #15
 80004c2:	f003 f92d 	bl	8003720 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d106      	bne.n	80004da <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 80004cc:	4809      	ldr	r0, [pc, #36]	; (80004f4 <PHYStatusCheck+0x44>)
 80004ce:	f005 fdb1 	bl	8006034 <iprintf>
			HAL_Delay(1000);
 80004d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004d6:	f003 fe4d 	bl	8004174 <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d0ea      	beq.n	80004b6 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 80004e0:	4805      	ldr	r0, [pc, #20]	; (80004f8 <PHYStatusCheck+0x48>)
 80004e2:	f005 fda7 	bl	8006034 <iprintf>

}
 80004e6:	bf00      	nop
 80004e8:	3708      	adds	r7, #8
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	08007614 	.word	0x08007614
 80004f4:	0800763c 	.word	0x0800763c
 80004f8:	08007650 	.word	0x08007650

080004fc <PrintPHYConf>:

void PrintPHYConf(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 8000502:	1d3b      	adds	r3, r7, #4
 8000504:	4619      	mov	r1, r3
 8000506:	200b      	movs	r0, #11
 8000508:	f003 f90a 	bl	8003720 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 800050c:	793b      	ldrb	r3, [r7, #4]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d103      	bne.n	800051a <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 8000512:	4814      	ldr	r0, [pc, #80]	; (8000564 <PrintPHYConf+0x68>)
 8000514:	f005 fd8e 	bl	8006034 <iprintf>
 8000518:	e002      	b.n	8000520 <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 800051a:	4813      	ldr	r0, [pc, #76]	; (8000568 <PrintPHYConf+0x6c>)
 800051c:	f005 fd8a 	bl	8006034 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 8000520:	797b      	ldrb	r3, [r7, #5]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d103      	bne.n	800052e <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000526:	4811      	ldr	r0, [pc, #68]	; (800056c <PrintPHYConf+0x70>)
 8000528:	f005 fd84 	bl	8006034 <iprintf>
 800052c:	e002      	b.n	8000534 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <PrintPHYConf+0x74>)
 8000530:	f005 fd80 	bl	8006034 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d103      	bne.n	8000542 <PrintPHYConf+0x46>
	{
		printf("\n\rDuplex Mode: Full");
 800053a:	480e      	ldr	r0, [pc, #56]	; (8000574 <PrintPHYConf+0x78>)
 800053c:	f005 fd7a 	bl	8006034 <iprintf>
 8000540:	e002      	b.n	8000548 <PrintPHYConf+0x4c>
	}
	else
	{
		printf("\n\rDuplex Mode: Half");
 8000542:	480d      	ldr	r0, [pc, #52]	; (8000578 <PrintPHYConf+0x7c>)
 8000544:	f005 fd76 	bl	8006034 <iprintf>
	}

	if(phyconf.speed==PHY_SPEED_10)
 8000548:	79bb      	ldrb	r3, [r7, #6]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d103      	bne.n	8000556 <PrintPHYConf+0x5a>
	{
		printf("\n\rSpeed: 10Mbps");
 800054e:	480b      	ldr	r0, [pc, #44]	; (800057c <PrintPHYConf+0x80>)
 8000550:	f005 fd70 	bl	8006034 <iprintf>
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
	}
}
 8000554:	e002      	b.n	800055c <PrintPHYConf+0x60>
		printf("\n\rSpeed: 100Mbps");
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <PrintPHYConf+0x84>)
 8000558:	f005 fd6c 	bl	8006034 <iprintf>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	0800766c 	.word	0x0800766c
 8000568:	08007690 	.word	0x08007690
 800056c:	080076b0 	.word	0x080076b0
 8000570:	080076cc 	.word	0x080076cc
 8000574:	080076ec 	.word	0x080076ec
 8000578:	08007700 	.word	0x08007700
 800057c:	08007714 	.word	0x08007714
 8000580:	08007724 	.word	0x08007724

08000584 <set_time>:

void set_time (datetime time,RTC_TimeTypeDef sTime,RTC_DateTypeDef sDate)
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	f107 0408 	add.w	r4, r7, #8
 800058e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000592:	607a      	str	r2, [r7, #4]
 8000594:	603b      	str	r3, [r7, #0]

  sTime.Hours = time.hh; // set hours
 8000596:	7b3b      	ldrb	r3, [r7, #12]
 8000598:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = time.mm; // set minutes
 800059a:	7b7b      	ldrb	r3, [r7, #13]
 800059c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = time.ss; // set seconds
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	71bb      	strb	r3, [r7, #6]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <set_time+0x54>)
 80005aa:	f004 fe93 	bl	80052d4 <HAL_RTC_SetTime>
  {
  //  _Error_Handler(__FILE__, __LINE__);
  }
  sDate.WeekDay = RTC_WEEKDAY_SUNDAY; //
 80005ae:	2300      	movs	r3, #0
 80005b0:	703b      	strb	r3, [r7, #0]

  sDate.Month = time.mo ; //
 80005b2:	7abb      	ldrb	r3, [r7, #10]
 80005b4:	707b      	strb	r3, [r7, #1]

  sDate.Date = time.dd; // date
 80005b6:	7afb      	ldrb	r3, [r7, #11]
 80005b8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = time.yy-2000; // year
 80005ba:	893b      	ldrh	r3, [r7, #8]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	3330      	adds	r3, #48	; 0x30
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	70fb      	strb	r3, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	4619      	mov	r1, r3
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <set_time+0x54>)
 80005cc:	f004 fff2 	bl	80055b4 <HAL_RTC_SetDate>
  {
   // _Error_Handler(__FILE__, __LINE__);
  }
 // HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2); // backup register
}
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	200000d4 	.word	0x200000d4

080005dc <get_time>:


void get_time(RTC_TimeTypeDef gTime,RTC_DateTypeDef gDate)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
 char time[10];

 char date[10];

/* Get the RTC current Time */
 HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	4819      	ldr	r0, [pc, #100]	; (8000654 <get_time+0x78>)
 80005ee:	f004 ff09 	bl	8005404 <HAL_RTC_GetTime>
/* Get the RTC current Date */
 HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	4619      	mov	r1, r3
 80005f8:	4816      	ldr	r0, [pc, #88]	; (8000654 <get_time+0x78>)
 80005fa:	f005 f891 	bl	8005720 <HAL_RTC_GetDate>
/* Display time Format: hh:mm:ss */
 sprintf((char*)time,"%02d:%02d:%02d",gTime.Hours, gTime.Minutes, gTime.Seconds);
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	461a      	mov	r2, r3
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	4619      	mov	r1, r3
 8000606:	79bb      	ldrb	r3, [r7, #6]
 8000608:	f107 0014 	add.w	r0, r7, #20
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	460b      	mov	r3, r1
 8000610:	4911      	ldr	r1, [pc, #68]	; (8000658 <get_time+0x7c>)
 8000612:	f005 fe6b 	bl	80062ec <siprintf>
 printf("\r time = %s\n",time);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	480f      	ldr	r0, [pc, #60]	; (800065c <get_time+0x80>)
 800061e:	f005 fd09 	bl	8006034 <iprintf>
/* Display date Format: dd-mm-yy */
 sprintf((char*)date,"%02d-%02d-%2d",gDate.Date, gDate.Month, 2000 + gDate.Year);
 8000622:	78bb      	ldrb	r3, [r7, #2]
 8000624:	461a      	mov	r2, r3
 8000626:	787b      	ldrb	r3, [r7, #1]
 8000628:	4619      	mov	r1, r3
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8000630:	f107 0008 	add.w	r0, r7, #8
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	460b      	mov	r3, r1
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <get_time+0x84>)
 800063a:	f005 fe57 	bl	80062ec <siprintf>
 printf("\r Date = %s\n",date);
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4619      	mov	r1, r3
 8000644:	4807      	ldr	r0, [pc, #28]	; (8000664 <get_time+0x88>)
 8000646:	f005 fcf5 	bl	8006034 <iprintf>

}
 800064a:	bf00      	nop
 800064c:	3720      	adds	r7, #32
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000d4 	.word	0x200000d4
 8000658:	08007738 	.word	0x08007738
 800065c:	08007748 	.word	0x08007748
 8000660:	08007758 	.word	0x08007758
 8000664:	08007768 	.word	0x08007768

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b5b0      	push	{r4, r5, r7, lr}
 800066a:	f5ad 6d08 	sub.w	sp, sp, #2176	; 0x880
 800066e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f003 fd1e 	bl	80040b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  setbuf(stdout, NULL);
 8000674:	4b8a      	ldr	r3, [pc, #552]	; (80008a0 <main+0x238>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 fd67 	bl	8006150 <setbuf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000682:	f000 f929 	bl	80008d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000686:	f000 fa35 	bl	8000af4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800068a:	f000 f9cb 	bl	8000a24 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800068e:	f000 fa07 	bl	8000aa0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000692:	f000 f97d 	bl	8000990 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  printf("Configuring RTC with SNTP !\r\n");
 8000696:	4883      	ldr	r0, [pc, #524]	; (80008a4 <main+0x23c>)
 8000698:	f005 fd52 	bl	8006140 <puts>

   W5500Init();
 800069c:	f000 fffa 	bl	8001694 <W5500Init>

   ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80006a0:	4981      	ldr	r1, [pc, #516]	; (80008a8 <main+0x240>)
 80006a2:	2000      	movs	r0, #0
 80006a4:	f003 f91e 	bl	80038e4 <ctlnetwork>
   PHYStatusCheck();
 80006a8:	f7ff ff02 	bl	80004b0 <PHYStatusCheck>
   PrintPHYConf();
 80006ac:	f7ff ff26 	bl	80004fc <PrintPHYConf>
///****** DNS Vriabales ******//
#define SOCK_DNS	6
#define ETH_MAX_BUF_SIZE	2048
unsigned char gDATABUF_DNS[ETH_MAX_BUF_SIZE];

uint8_t Domain_name0[] = "1.pool.ntp.org";
 80006b0:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80006b4:	f6a3 031c 	subw	r3, r3, #2076	; 0x81c
 80006b8:	4a7c      	ldr	r2, [pc, #496]	; (80008ac <main+0x244>)
 80006ba:	461c      	mov	r4, r3
 80006bc:	4613      	mov	r3, r2
 80006be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006c0:	c407      	stmia	r4!, {r0, r1, r2}
 80006c2:	8023      	strh	r3, [r4, #0]
 80006c4:	3402      	adds	r4, #2
 80006c6:	0c1b      	lsrs	r3, r3, #16
 80006c8:	7023      	strb	r3, [r4, #0]
uint8_t Domain_name1[] = "0.pool.ntp.org";
 80006ca:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80006ce:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 80006d2:	4a77      	ldr	r2, [pc, #476]	; (80008b0 <main+0x248>)
 80006d4:	461c      	mov	r4, r3
 80006d6:	4613      	mov	r3, r2
 80006d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006da:	c407      	stmia	r4!, {r0, r1, r2}
 80006dc:	8023      	strh	r3, [r4, #0]
 80006de:	3402      	adds	r4, #2
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	7023      	strb	r3, [r4, #0]
int8_t DNSret;

///****** SNTP Variables ******//
#define SOCK_SNTP       7
unsigned char gDATABUF_SNTP[MAX_SNTP_BUF_SIZE];
const uint8_t SNTP_TIMEZONE = 34;  // (34) UTC+05:30 - India (look at sntp.c)
 80006e4:	2322      	movs	r3, #34	; 0x22
 80006e6:	f887 386e 	strb.w	r3, [r7, #2158]	; 0x86e
RTC_DateTypeDef rtcDate;
RTC_TimeTypeDef rtcTime;

///**************************///

DNS_init(SOCK_DNS, gDATABUF_DNS);   // DNS client Initialization
 80006ea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006ee:	4619      	mov	r1, r3
 80006f0:	2006      	movs	r0, #6
 80006f2:	f001 fba3 	bl	8001e3c <DNS_init>

if ((DNSret = DNS_run(gWIZNETINFO.dns, Domain_name0, Domain_IP))==1)  //Trying 1st DNS server
 80006f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80006fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006fe:	4619      	mov	r1, r3
 8000700:	486c      	ldr	r0, [pc, #432]	; (80008b4 <main+0x24c>)
 8000702:	f001 fbb7 	bl	8001e74 <DNS_run>
 8000706:	4603      	mov	r3, r0
 8000708:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
 800070c:	f997 386f 	ldrsb.w	r3, [r7, #2159]	; 0x86f
 8000710:	2b01      	cmp	r3, #1
 8000712:	d128      	bne.n	8000766 <main+0xfe>
	{
		printf("\n\r> DNS1 for %s return= %d", Domain_name0, DNSret);
 8000714:	f997 286f 	ldrsb.w	r2, [r7, #2159]	; 0x86f
 8000718:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800071c:	4619      	mov	r1, r3
 800071e:	4866      	ldr	r0, [pc, #408]	; (80008b8 <main+0x250>)
 8000720:	f005 fc88 	bl	8006034 <iprintf>
		printf("\n\r> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name0,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
 8000724:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000728:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000734:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8000738:	785b      	ldrb	r3, [r3, #1]
 800073a:	461c      	mov	r4, r3
 800073c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000740:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8000744:	789b      	ldrb	r3, [r3, #2]
 8000746:	461a      	mov	r2, r3
 8000748:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800074c:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000756:	9301      	str	r3, [sp, #4]
 8000758:	9200      	str	r2, [sp, #0]
 800075a:	4623      	mov	r3, r4
 800075c:	4602      	mov	r2, r0
 800075e:	4857      	ldr	r0, [pc, #348]	; (80008bc <main+0x254>)
 8000760:	f005 fc68 	bl	8006034 <iprintf>
 8000764:	e040      	b.n	80007e8 <main+0x180>
	}
	else if ((DNSret = DNS_run(gWIZNETINFO.dns, Domain_name1, Domain_IP))==1) //Trying 2st DNS server
 8000766:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800076a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800076e:	4619      	mov	r1, r3
 8000770:	4850      	ldr	r0, [pc, #320]	; (80008b4 <main+0x24c>)
 8000772:	f001 fb7f 	bl	8001e74 <DNS_run>
 8000776:	4603      	mov	r3, r0
 8000778:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
 800077c:	f997 386f 	ldrsb.w	r3, [r7, #2159]	; 0x86f
 8000780:	2b01      	cmp	r3, #1
 8000782:	d12b      	bne.n	80007dc <main+0x174>
	{
		printf("\n\r> 1st DNS Failed, trying DNS2");
 8000784:	484e      	ldr	r0, [pc, #312]	; (80008c0 <main+0x258>)
 8000786:	f005 fc55 	bl	8006034 <iprintf>
		printf("\n\r> DNS2 for %s return= %d", Domain_name1, DNSret);
 800078a:	f997 286f 	ldrsb.w	r2, [r7, #2159]	; 0x86f
 800078e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000792:	4619      	mov	r1, r3
 8000794:	484b      	ldr	r0, [pc, #300]	; (80008c4 <main+0x25c>)
 8000796:	f005 fc4d 	bl	8006034 <iprintf>
		printf("\n\r> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name1,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
 800079a:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800079e:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80007aa:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	461c      	mov	r4, r3
 80007b2:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80007b6:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80007ba:	789b      	ldrb	r3, [r3, #2]
 80007bc:	461a      	mov	r2, r3
 80007be:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80007c2:	f5a3 6303 	sub.w	r3, r3, #2096	; 0x830
 80007c6:	78db      	ldrb	r3, [r3, #3]
 80007c8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	9200      	str	r2, [sp, #0]
 80007d0:	4623      	mov	r3, r4
 80007d2:	4602      	mov	r2, r0
 80007d4:	4839      	ldr	r0, [pc, #228]	; (80008bc <main+0x254>)
 80007d6:	f005 fc2d 	bl	8006034 <iprintf>
 80007da:	e005      	b.n	80007e8 <main+0x180>
	}
	else {printf("\n\r> Error resolving %s - DNS Failed !!\n\r\n\r", Domain_name0);}  //Query to both servers failed
 80007dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007e0:	4619      	mov	r1, r3
 80007e2:	4839      	ldr	r0, [pc, #228]	; (80008c8 <main+0x260>)
 80007e4:	f005 fc26 	bl	8006034 <iprintf>


	if(DNSret > 0)  // sntp server ip resolved, so init SNTP client
 80007e8:	f997 386f 	ldrsb.w	r3, [r7, #2159]	; 0x86f
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd0f      	ble.n	8000810 <main+0x1a8>
		{
		printf("\n\r> Initializing SNTP from %s", Domain_name0);
 80007f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f4:	4619      	mov	r1, r3
 80007f6:	4835      	ldr	r0, [pc, #212]	; (80008cc <main+0x264>)
 80007f8:	f005 fc1c 	bl	8006034 <iprintf>
		SNTP_init(SOCK_SNTP, Domain_IP, SNTP_TIMEZONE, gDATABUF_SNTP);
 80007fc:	f107 0308 	add.w	r3, r7, #8
 8000800:	f897 286e 	ldrb.w	r2, [r7, #2158]	; 0x86e
 8000804:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000808:	2007      	movs	r0, #7
 800080a:	f001 feaf 	bl	800256c <SNTP_init>
 800080e:	e005      	b.n	800081c <main+0x1b4>
		}
	else {printf("\n\r> SNTP Error!! could not resolve %s", Domain_name0);}
 8000810:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000814:	4619      	mov	r1, r3
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <main+0x268>)
 8000818:	f005 fc0c 	bl	8006034 <iprintf>

	while( SNTP_run(&time) !=1){}
 800081c:	bf00      	nop
 800081e:	f607 0364 	addw	r3, r7, #2148	; 0x864
 8000822:	4618      	mov	r0, r3
 8000824:	f001 ff1c 	bl	8002660 <SNTP_run>
 8000828:	4603      	mov	r3, r0
 800082a:	2b01      	cmp	r3, #1
 800082c:	d1f7      	bne.n	800081e <main+0x1b6>

    printf("\n\r> %02d/%02d/%d, %02d:%02d:%02d", time.dd,  time.mo, time.yy, time.hh, time.mm, time.ss);
 800082e:	f897 3867 	ldrb.w	r3, [r7, #2151]	; 0x867
 8000832:	4618      	mov	r0, r3
 8000834:	f897 3866 	ldrb.w	r3, [r7, #2150]	; 0x866
 8000838:	461c      	mov	r4, r3
 800083a:	f8b7 3864 	ldrh.w	r3, [r7, #2148]	; 0x864
 800083e:	461d      	mov	r5, r3
 8000840:	f897 3868 	ldrb.w	r3, [r7, #2152]	; 0x868
 8000844:	f897 2869 	ldrb.w	r2, [r7, #2153]	; 0x869
 8000848:	f897 186a 	ldrb.w	r1, [r7, #2154]	; 0x86a
 800084c:	9102      	str	r1, [sp, #8]
 800084e:	9201      	str	r2, [sp, #4]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	462b      	mov	r3, r5
 8000854:	4622      	mov	r2, r4
 8000856:	4601      	mov	r1, r0
 8000858:	481e      	ldr	r0, [pc, #120]	; (80008d4 <main+0x26c>)
 800085a:	f005 fbeb 	bl	8006034 <iprintf>

	//HAL_Delay(1000);

	set_time(time, rtcTime, rtcDate);
 800085e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000862:	f6a3 036c 	subw	r3, r3, #2156	; 0x86c
 8000866:	f507 6207 	add.w	r2, r7, #2160	; 0x870
 800086a:	f5a2 6207 	sub.w	r2, r2, #2160	; 0x870
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	f607 0164 	addw	r1, r7, #2148	; 0x864
 8000876:	c903      	ldmia	r1, {r0, r1}
 8000878:	f7ff fe84 	bl	8000584 <set_time>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  get_time(rtcTime, rtcDate);
 800087c:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000880:	f6a3 026c 	subw	r2, r3, #2156	; 0x86c
 8000884:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000888:	f5a3 6307 	sub.w	r3, r3, #2160	; 0x870
 800088c:	6811      	ldr	r1, [r2, #0]
 800088e:	6818      	ldr	r0, [r3, #0]
 8000890:	f7ff fea4 	bl	80005dc <get_time>
	  HAL_Delay(1000);
 8000894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000898:	f003 fc6c 	bl	8004174 <HAL_Delay>
	  get_time(rtcTime, rtcDate);
 800089c:	e7ee      	b.n	800087c <main+0x214>
 800089e:	bf00      	nop
 80008a0:	20000054 	.word	0x20000054
 80008a4:	08007778 	.word	0x08007778
 80008a8:	20000000 	.word	0x20000000
 80008ac:	080078b0 	.word	0x080078b0
 80008b0:	080078c0 	.word	0x080078c0
 80008b4:	20000012 	.word	0x20000012
 80008b8:	08007798 	.word	0x08007798
 80008bc:	080077b4 	.word	0x080077b4
 80008c0:	080077dc 	.word	0x080077dc
 80008c4:	080077fc 	.word	0x080077fc
 80008c8:	08007818 	.word	0x08007818
 80008cc:	08007844 	.word	0x08007844
 80008d0:	08007864 	.word	0x08007864
 80008d4:	0800788c 	.word	0x0800788c

080008d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b094      	sub	sp, #80	; 0x50
 80008dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008e2:	2228      	movs	r2, #40	; 0x28
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 fb9c 	bl	8006024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000916:	2301      	movs	r3, #1
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800091a:	2302      	movs	r3, #2
 800091c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000922:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000924:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fec8 	bl	80046c4 <HAL_RCC_OscConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800093a:	f000 f919 	bl	8000b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093e:	230f      	movs	r3, #15
 8000940:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2102      	movs	r1, #2
 800095a:	4618      	mov	r0, r3
 800095c:	f004 f934 	bl	8004bc8 <HAL_RCC_ClockConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000966:	f000 f903 	bl	8000b70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800096a:	2301      	movs	r3, #1
 800096c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800096e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000972:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	4618      	mov	r0, r3
 8000978:	f004 fab4 	bl	8004ee4 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000982:	f000 f8f5 	bl	8000b70 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	3750      	adds	r7, #80	; 0x50
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2100      	movs	r1, #0
 800099a:	460a      	mov	r2, r1
 800099c:	801a      	strh	r2, [r3, #0]
 800099e:	460a      	mov	r2, r1
 80009a0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_RTC_Init+0x8c>)
 80009a8:	4a1d      	ldr	r2, [pc, #116]	; (8000a20 <MX_RTC_Init+0x90>)
 80009aa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_RTC_Init+0x8c>)
 80009ae:	f04f 32ff 	mov.w	r2, #4294967295
 80009b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_RTC_Init+0x8c>)
 80009b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ba:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80009bc:	4817      	ldr	r0, [pc, #92]	; (8000a1c <MX_RTC_Init+0x8c>)
 80009be:	f004 fbfd 	bl	80051bc <HAL_RTC_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80009c8:	f000 f8d2 	bl	8000b70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x14;
 80009cc:	2314      	movs	r3, #20
 80009ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x45;
 80009d0:	2345      	movs	r3, #69	; 0x45
 80009d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2201      	movs	r2, #1
 80009dc:	4619      	mov	r1, r3
 80009de:	480f      	ldr	r0, [pc, #60]	; (8000a1c <MX_RTC_Init+0x8c>)
 80009e0:	f004 fc78 	bl	80052d4 <HAL_RTC_SetTime>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80009ea:	f000 f8c1 	bl	8000b70 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80009ee:	2306      	movs	r3, #6
 80009f0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_APRIL;
 80009f2:	2304      	movs	r3, #4
 80009f4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x27;
 80009f6:	2327      	movs	r3, #39	; 0x27
 80009f8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80009fe:	463b      	mov	r3, r7
 8000a00:	2201      	movs	r2, #1
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_RTC_Init+0x8c>)
 8000a06:	f004 fdd5 	bl	80055b4 <HAL_RTC_SetDate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000a10:	f000 f8ae 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000d4 	.word	0x200000d4
 8000a20:	40002800 	.word	0x40002800

08000a24 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_SPI1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a36:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a54:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a58:	2208      	movs	r2, #8
 8000a5a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a6e:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a70:	220a      	movs	r2, #10
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a76:	f005 f949 	bl	8005d0c <HAL_SPI_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a80:	f000 f876 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <MX_SPI1_Init+0x74>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a92:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000a94:	bf00      	nop
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000e8 	.word	0x200000e8
 8000a9c:	40013000 	.word	0x40013000

08000aa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f005 f99c 	bl	8005e14 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f845 	bl	8000b70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000140 	.word	0x20000140
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afa:	f107 0308 	add.w	r3, r7, #8
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a16      	ldr	r2, [pc, #88]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0320 	and.w	r3, r3, #32
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_GPIO_Init+0x74>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin, GPIO_PIN_RESET);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2103      	movs	r1, #3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <MX_GPIO_Init+0x78>)
 8000b3e:	f003 fd9d 	bl	800467c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_W5500_Pin CS_W5500_Pin */
  GPIO_InitStruct.Pin = RST_W5500_Pin|CS_W5500_Pin;
 8000b42:	2303      	movs	r3, #3
 8000b44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b52:	f107 0308 	add.w	r3, r7, #8
 8000b56:	4619      	mov	r1, r3
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_GPIO_Init+0x78>)
 8000b5a:	f003 fc13 	bl	8004384 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010800 	.word	0x40010800

08000b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b74:	b672      	cpsid	i
}
 8000b76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <Error_Handler+0x8>
	...

08000b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_MspInit+0x5c>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bb2:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <HAL_MspInit+0x60>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4a04      	ldr	r2, [pc, #16]	; (8000bdc <HAL_MspInit+0x60>)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000

08000be0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0b      	ldr	r2, [pc, #44]	; (8000c1c <HAL_RTC_MspInit+0x3c>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d110      	bne.n	8000c14 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000bf2:	f003 fd5b 	bl	80046ac <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_RTC_MspInit+0x40>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a09      	ldr	r2, [pc, #36]	; (8000c20 <HAL_RTC_MspInit+0x40>)
 8000bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <HAL_RTC_MspInit+0x40>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_RTC_MspInit+0x44>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c14:	bf00      	nop
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40002800 	.word	0x40002800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	4242043c 	.word	0x4242043c

08000c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <HAL_SPI_MspInit+0x88>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d12f      	bne.n	8000ca8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c48:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c4e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c52:	6193      	str	r3, [r2, #24]
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a13      	ldr	r2, [pc, #76]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c78:	23a0      	movs	r3, #160	; 0xa0
 8000c7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <HAL_SPI_MspInit+0x90>)
 8000c8c:	f003 fb7a 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c94:	2300      	movs	r3, #0
 8000c96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <HAL_SPI_MspInit+0x90>)
 8000ca4:	f003 fb6e 	bl	8004384 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ca8:	bf00      	nop
 8000caa:	3720      	adds	r7, #32
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010800 	.word	0x40010800

08000cbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <HAL_UART_MspInit+0x88>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d12f      	bne.n	8000d3c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000ce2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce6:	61d3      	str	r3, [r2, #28]
 8000ce8:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000cea:	69db      	ldr	r3, [r3, #28]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_UART_MspInit+0x8c>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d18:	f107 0310 	add.w	r3, r7, #16
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0x90>)
 8000d20:	f003 fb30 	bl	8004384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d24:	2308      	movs	r3, #8
 8000d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d30:	f107 0310 	add.w	r3, r7, #16
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_UART_MspInit+0x90>)
 8000d38:	f003 fb24 	bl	8004384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3720      	adds	r7, #32
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40010800 	.word	0x40010800

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr

08000d7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d96:	f003 f9d1 	bl	800413c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b086      	sub	sp, #24
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	e00a      	b.n	8000dc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000db0:	f3af 8000 	nop.w
 8000db4:	4601      	mov	r1, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1c5a      	adds	r2, r3, #1
 8000dba:	60ba      	str	r2, [r7, #8]
 8000dbc:	b2ca      	uxtb	r2, r1
 8000dbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	dbf0      	blt.n	8000db0 <_read+0x12>
  }

  return len;
 8000dce:	687b      	ldr	r3, [r7, #4]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	e009      	b.n	8000dfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	1c5a      	adds	r2, r3, #1
 8000dee:	60ba      	str	r2, [r7, #8]
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fb4e 	bl	8000494 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	dbf1      	blt.n	8000dea <_write+0x12>
  }
  return len;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_close>:

int _close(int file)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bc80      	pop	{r7}
 8000e24:	4770      	bx	lr

08000e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
 8000e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e36:	605a      	str	r2, [r3, #4]
  return 0;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <_isatty>:

int _isatty(int file)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e4c:	2301      	movs	r3, #1
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f005 f896 	bl	8005fd0 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20002800 	.word	0x20002800
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	20000188 	.word	0x20000188
 8000ed8:	20000250 	.word	0x20000250

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff fff8 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	; (8000f1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eee:	490c      	ldr	r1, [pc, #48]	; (8000f20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	; (8000f24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f04:	4c09      	ldr	r4, [pc, #36]	; (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f005 f863 	bl	8005fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff fba7 	bl	8000668 <main>
  bx lr
 8000f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000f24:	08007a0c 	.word	0x08007a0c
  ldr r2, =_sbss
 8000f28:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000f2c:	20000250 	.word	0x20000250

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f48:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <WIZCHIP_READ+0x24>
 8000f50:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d114      	bne.n	8000f82 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	0c12      	lsrs	r2, r2, #16
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	4610      	mov	r0, r2
 8000f64:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f68:	6a1b      	ldr	r3, [r3, #32]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	0a12      	lsrs	r2, r2, #8
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	4610      	mov	r0, r2
 8000f72:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4798      	blx	r3
 8000f80:	e011      	b.n	8000fa6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f9c:	f107 020c 	add.w	r2, r7, #12
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000fb6:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <WIZCHIP_READ+0x94>)
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	4798      	blx	r3
   return ret;
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000020 	.word	0x20000020

08000fcc <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000fd8:	4b22      	ldr	r3, [pc, #136]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8000fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d119      	bne.n	8001028 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	0c12      	lsrs	r2, r2, #16
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	4610      	mov	r0, r2
 8001000:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001002:	4b18      	ldr	r3, [pc, #96]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	0a12      	lsrs	r2, r2, #8
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	4610      	mov	r0, r2
 800100e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	4610      	mov	r0, r2
 800101a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <WIZCHIP_WRITE+0x98>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	78fa      	ldrb	r2, [r7, #3]
 8001022:	4610      	mov	r0, r2
 8001024:	4798      	blx	r3
 8001026:	e013      	b.n	8001050 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0a1b      	lsrs	r3, r3, #8
 8001034:	b2db      	uxtb	r3, r3
 8001036:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800103e:	78fb      	ldrb	r3, [r7, #3]
 8001040:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8001044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001046:	f107 020c 	add.w	r2, r7, #12
 800104a:	2104      	movs	r1, #4
 800104c:	4610      	mov	r0, r2
 800104e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001056:	4b03      	ldr	r3, [pc, #12]	; (8001064 <WIZCHIP_WRITE+0x98>)
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	4798      	blx	r3
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000020 	.word	0x20000020

08001068 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b087      	sub	sp, #28
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	4613      	mov	r3, r2
 8001074:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800107c:	4b29      	ldr	r3, [pc, #164]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 800107e:	695b      	ldr	r3, [r3, #20]
 8001080:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <WIZCHIP_READ_BUF+0x2a>
 800108a:	4b26      	ldr	r3, [pc, #152]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 800108c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108e:	2b00      	cmp	r3, #0
 8001090:	d126      	bne.n	80010e0 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001092:	4b24      	ldr	r3, [pc, #144]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	0c12      	lsrs	r2, r2, #16
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	4610      	mov	r0, r2
 800109e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80010a0:	4b20      	ldr	r3, [pc, #128]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	0a12      	lsrs	r2, r2, #8
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	4610      	mov	r0, r2
 80010ac:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	b2d2      	uxtb	r2, r2
 80010b6:	4610      	mov	r0, r2
 80010b8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80010ba:	2300      	movs	r3, #0
 80010bc:	82fb      	strh	r3, [r7, #22]
 80010be:	e00a      	b.n	80010d6 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80010c0:	4b18      	ldr	r3, [pc, #96]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	8afa      	ldrh	r2, [r7, #22]
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	188c      	adds	r4, r1, r2
 80010ca:	4798      	blx	r3
 80010cc:	4603      	mov	r3, r0
 80010ce:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	3301      	adds	r3, #1
 80010d4:	82fb      	strh	r3, [r7, #22]
 80010d6:	8afa      	ldrh	r2, [r7, #22]
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3f0      	bcc.n	80010c0 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80010de:	e017      	b.n	8001110 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	0c1b      	lsrs	r3, r3, #16
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	0a1b      	lsrs	r3, r3, #8
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f107 0210 	add.w	r2, r7, #16
 80010fe:	2103      	movs	r1, #3
 8001100:	4610      	mov	r0, r2
 8001102:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	88fa      	ldrh	r2, [r7, #6]
 800110a:	4611      	mov	r1, r2
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001110:	4b04      	ldr	r3, [pc, #16]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001112:	699b      	ldr	r3, [r3, #24]
 8001114:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <WIZCHIP_READ_BUF+0xbc>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	4798      	blx	r3
}
 800111c:	bf00      	nop
 800111e:	371c      	adds	r7, #28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	20000020 	.word	0x20000020

08001128 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8001136:	4b2b      	ldr	r3, [pc, #172]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800113c:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 800114c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114e:	2b00      	cmp	r3, #0
 8001150:	d126      	bne.n	80011a0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8001152:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	68fa      	ldr	r2, [r7, #12]
 8001158:	0c12      	lsrs	r2, r2, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	4610      	mov	r0, r2
 800115e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001160:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001162:	6a1b      	ldr	r3, [r3, #32]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	0a12      	lsrs	r2, r2, #8
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	4610      	mov	r0, r2
 800116c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800116e:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	4610      	mov	r0, r2
 8001178:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800117a:	2300      	movs	r3, #0
 800117c:	82fb      	strh	r3, [r7, #22]
 800117e:	e00a      	b.n	8001196 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	8afa      	ldrh	r2, [r7, #22]
 8001186:	68b9      	ldr	r1, [r7, #8]
 8001188:	440a      	add	r2, r1
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4610      	mov	r0, r2
 800118e:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001190:	8afb      	ldrh	r3, [r7, #22]
 8001192:	3301      	adds	r3, #1
 8001194:	82fb      	strh	r3, [r7, #22]
 8001196:	8afa      	ldrh	r2, [r7, #22]
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	429a      	cmp	r2, r3
 800119c:	d3f0      	bcc.n	8001180 <WIZCHIP_WRITE_BUF+0x58>
 800119e:	e017      	b.n	80011d0 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	0a1b      	lsrs	r3, r3, #8
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ba:	f107 0210 	add.w	r2, r7, #16
 80011be:	2103      	movs	r1, #3
 80011c0:	4610      	mov	r0, r2
 80011c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c8:	88fa      	ldrh	r2, [r7, #6]
 80011ca:	4611      	mov	r1, r2
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80011d6:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <WIZCHIP_WRITE_BUF+0xbc>)
 80011d8:	691b      	ldr	r3, [r3, #16]
 80011da:	4798      	blx	r3
}
 80011dc:	bf00      	nop
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000020 	.word	0x20000020

080011e8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80011e8:	b590      	push	{r4, r7, lr}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	81fb      	strh	r3, [r7, #14]
 80011f6:	2300      	movs	r3, #0
 80011f8:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	3301      	adds	r3, #1
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe94 	bl	8000f34 <WIZCHIP_READ>
 800120c:	4603      	mov	r3, r0
 800120e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b29c      	uxth	r4, r3
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	3301      	adds	r3, #1
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe86 	bl	8000f34 <WIZCHIP_READ>
 8001228:	4603      	mov	r3, r0
 800122a:	b29b      	uxth	r3, r3
 800122c:	4423      	add	r3, r4
 800122e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d01a      	beq.n	800126c <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	3301      	adds	r3, #1
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe76 	bl	8000f34 <WIZCHIP_READ>
 8001248:	4603      	mov	r3, r0
 800124a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800124c:	89fb      	ldrh	r3, [r7, #14]
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	b29c      	uxth	r4, r3
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	3301      	adds	r3, #1
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fe68 	bl	8000f34 <WIZCHIP_READ>
 8001264:	4603      	mov	r3, r0
 8001266:	b29b      	uxth	r3, r3
 8001268:	4423      	add	r3, r4
 800126a:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 800126c:	89fa      	ldrh	r2, [r7, #14]
 800126e:	89bb      	ldrh	r3, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d1c2      	bne.n	80011fa <getSn_TX_FSR+0x12>
   return val;
 8001274:	89fb      	ldrh	r3, [r7, #14]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}

0800127e <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800127e:	b590      	push	{r4, r7, lr}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8001288:	2300      	movs	r3, #0
 800128a:	81fb      	strh	r3, [r7, #14]
 800128c:	2300      	movs	r3, #0
 800128e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	3301      	adds	r3, #1
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff fe49 	bl	8000f34 <WIZCHIP_READ>
 80012a2:	4603      	mov	r3, r0
 80012a4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80012a6:	89bb      	ldrh	r3, [r7, #12]
 80012a8:	021b      	lsls	r3, r3, #8
 80012aa:	b29c      	uxth	r4, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	3301      	adds	r3, #1
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe3b 	bl	8000f34 <WIZCHIP_READ>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	4423      	add	r3, r4
 80012c4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d01a      	beq.n	8001302 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	3301      	adds	r3, #1
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff fe2b 	bl	8000f34 <WIZCHIP_READ>
 80012de:	4603      	mov	r3, r0
 80012e0:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80012e2:	89fb      	ldrh	r3, [r7, #14]
 80012e4:	021b      	lsls	r3, r3, #8
 80012e6:	b29c      	uxth	r4, r3
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	3301      	adds	r3, #1
 80012ee:	00db      	lsls	r3, r3, #3
 80012f0:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fe1d 	bl	8000f34 <WIZCHIP_READ>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4423      	add	r3, r4
 8001300:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001302:	89fa      	ldrh	r2, [r7, #14]
 8001304:	89bb      	ldrh	r3, [r7, #12]
 8001306:	429a      	cmp	r2, r3
 8001308:	d1c2      	bne.n	8001290 <getSn_RX_RSR+0x12>
   return val;
 800130a:	89fb      	ldrh	r3, [r7, #14]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}

08001314 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001314:	b590      	push	{r4, r7, lr}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	6039      	str	r1, [r7, #0]
 800131e:	71fb      	strb	r3, [r7, #7]
 8001320:	4613      	mov	r3, r2
 8001322:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d048      	beq.n	80013c4 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	3301      	adds	r3, #1
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff fdf8 	bl	8000f34 <WIZCHIP_READ>
 8001344:	4603      	mov	r3, r0
 8001346:	b29b      	uxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b29c      	uxth	r4, r3
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	3301      	adds	r3, #1
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fdeb 	bl	8000f34 <WIZCHIP_READ>
 800135e:	4603      	mov	r3, r0
 8001360:	b29b      	uxth	r3, r3
 8001362:	4423      	add	r3, r4
 8001364:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	79fa      	ldrb	r2, [r7, #7]
 800136c:	0092      	lsls	r2, r2, #2
 800136e:	3202      	adds	r2, #2
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	4413      	add	r3, r2
 8001374:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001376:	88bb      	ldrh	r3, [r7, #4]
 8001378:	461a      	mov	r2, r3
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f7ff fed3 	bl	8001128 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8001382:	89fa      	ldrh	r2, [r7, #14]
 8001384:	88bb      	ldrh	r3, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	3301      	adds	r3, #1
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001396:	461a      	mov	r2, r3
 8001398:	89fb      	ldrh	r3, [r7, #14]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4619      	mov	r1, r3
 80013a2:	4610      	mov	r0, r2
 80013a4:	f7ff fe12 	bl	8000fcc <WIZCHIP_WRITE>
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	3301      	adds	r3, #1
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80013b4:	461a      	mov	r2, r3
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fe05 	bl	8000fcc <WIZCHIP_WRITE>
 80013c2:	e000      	b.n	80013c6 <wiz_send_data+0xb2>
   if(len == 0)  return;
 80013c4:	bf00      	nop
}
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}

080013cc <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
 80013d8:	4613      	mov	r3, r2
 80013da:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d048      	beq.n	800147c <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	3301      	adds	r3, #1
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fd9c 	bl	8000f34 <WIZCHIP_READ>
 80013fc:	4603      	mov	r3, r0
 80013fe:	b29b      	uxth	r3, r3
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	b29c      	uxth	r4, r3
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	3301      	adds	r3, #1
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fd8f 	bl	8000f34 <WIZCHIP_READ>
 8001416:	4603      	mov	r3, r0
 8001418:	b29b      	uxth	r3, r3
 800141a:	4423      	add	r3, r4
 800141c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 800141e:	89fb      	ldrh	r3, [r7, #14]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	0092      	lsls	r2, r2, #2
 8001426:	3203      	adds	r2, #3
 8001428:	00d2      	lsls	r2, r2, #3
 800142a:	4413      	add	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800142e:	88bb      	ldrh	r3, [r7, #4]
 8001430:	461a      	mov	r2, r3
 8001432:	6839      	ldr	r1, [r7, #0]
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f7ff fe17 	bl	8001068 <WIZCHIP_READ_BUF>
   ptr += len;
 800143a:	89fa      	ldrh	r2, [r7, #14]
 800143c:	88bb      	ldrh	r3, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	3301      	adds	r3, #1
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800144e:	461a      	mov	r2, r3
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	0a1b      	lsrs	r3, r3, #8
 8001454:	b29b      	uxth	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f7ff fdb6 	bl	8000fcc <WIZCHIP_WRITE>
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	3301      	adds	r3, #1
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 800146c:	461a      	mov	r2, r3
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4619      	mov	r1, r3
 8001474:	4610      	mov	r0, r2
 8001476:	f7ff fda9 	bl	8000fcc <WIZCHIP_WRITE>
 800147a:	e000      	b.n	800147e <wiz_recv_data+0xb2>
   if(len == 0) return;
 800147c:	bf00      	nop
}
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}

08001484 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	71fb      	strb	r3, [r7, #7]
 8001490:	4613      	mov	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	3301      	adds	r3, #1
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fd45 	bl	8000f34 <WIZCHIP_READ>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b29c      	uxth	r4, r3
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	3301      	adds	r3, #1
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd38 	bl	8000f34 <WIZCHIP_READ>
 80014c4:	4603      	mov	r3, r0
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4423      	add	r3, r4
 80014ca:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 80014cc:	89fa      	ldrh	r2, [r7, #14]
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	3301      	adds	r3, #1
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 80014e0:	461a      	mov	r2, r3
 80014e2:	89fb      	ldrh	r3, [r7, #14]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fd6d 	bl	8000fcc <WIZCHIP_WRITE>
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3301      	adds	r3, #1
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 80014fe:	461a      	mov	r2, r3
 8001500:	89fb      	ldrh	r3, [r7, #14]
 8001502:	b2db      	uxtb	r3, r3
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f7ff fd60 	bl	8000fcc <WIZCHIP_WRITE>
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}

08001514 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 800151e:	bf00      	nop
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <SPIReadWrite+0x48>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b02      	cmp	r3, #2
 800152c:	d1f8      	bne.n	8001520 <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 800152e:	4b0b      	ldr	r3, [pc, #44]	; (800155c <SPIReadWrite+0x48>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	330c      	adds	r3, #12
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8001538:	bf00      	nop
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <SPIReadWrite+0x48>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b01      	cmp	r3, #1
 8001546:	d1f8      	bne.n	800153a <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <SPIReadWrite+0x48>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	330c      	adds	r3, #12
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b2db      	uxtb	r3, r3
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	200000e8 	.word	0x200000e8

08001560 <wizchip_select>:

void  wizchip_select(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2102      	movs	r1, #2
 8001568:	4802      	ldr	r0, [pc, #8]	; (8001574 <wizchip_select+0x14>)
 800156a:	f003 f887 	bl	800467c <HAL_GPIO_WritePin>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40010800 	.word	0x40010800

08001578 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2102      	movs	r1, #2
 8001580:	4802      	ldr	r0, [pc, #8]	; (800158c <wizchip_deselect+0x14>)
 8001582:	f003 f87b 	bl	800467c <HAL_GPIO_WritePin>
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40010800 	.word	0x40010800

08001590 <wizchip_read>:

uint8_t wizchip_read()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff ffbc 	bl	8001514 <SPIReadWrite>
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
	return rb;
 80015a0:	79fb      	ldrb	r3, [r7, #7]
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	4603      	mov	r3, r0
 80015b2:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffac 	bl	8001514 <SPIReadWrite>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 80015d0:	2300      	movs	r3, #0
 80015d2:	81fb      	strh	r3, [r7, #14]
 80015d4:	e00c      	b.n	80015f0 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff ff9c 	bl	8001514 <SPIReadWrite>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	701a      	strb	r2, [r3, #0]
		pBuf++;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3301      	adds	r3, #1
 80015e8:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	3301      	adds	r3, #1
 80015ee:	81fb      	strh	r3, [r7, #14]
 80015f0:	89fa      	ldrh	r2, [r7, #14]
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3ee      	bcc.n	80015d6 <wizchip_readburst+0x12>
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b084      	sub	sp, #16
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
 800160a:	460b      	mov	r3, r1
 800160c:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 800160e:	2300      	movs	r3, #0
 8001610:	81fb      	strh	r3, [r7, #14]
 8001612:	e00a      	b.n	800162a <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff7b 	bl	8001514 <SPIReadWrite>
		pBuf++;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	3301      	adds	r3, #1
 8001628:	81fb      	strh	r3, [r7, #14]
 800162a:	89fa      	ldrh	r2, [r7, #14]
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3f0      	bcc.n	8001614 <wizchip_writeburst+0x12>
	}
}
 8001632:	bf00      	nop
 8001634:	bf00      	nop
 8001636:	3710      	adds	r7, #16
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <W5500IOInit>:

void W5500IOInit()
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA0
	 * and
	 * CS->PA1
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	f107 0308 	add.w	r3, r7, #8
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <W5500IOInit+0x50>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a0d      	ldr	r2, [pc, #52]	; (800168c <W5500IOInit+0x50>)
 8001656:	f043 0304 	orr.w	r3, r3, #4
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b0b      	ldr	r3, [pc, #44]	; (800168c <W5500IOInit+0x50>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001668:	2303      	movs	r3, #3
 800166a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4619      	mov	r1, r3
 800167e:	4804      	ldr	r0, [pc, #16]	; (8001690 <W5500IOInit+0x54>)
 8001680:	f002 fe80 	bl	8004384 <HAL_GPIO_Init>
}
 8001684:	bf00      	nop
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800

08001694 <W5500Init>:

void W5500Init()
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <W5500Init+0x84>)
 800169c:	1d3c      	adds	r4, r7, #4
 800169e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 80016a4:	f7ff ffca 	bl	800163c <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 80016a8:	2201      	movs	r2, #1
 80016aa:	2102      	movs	r1, #2
 80016ac:	481b      	ldr	r0, [pc, #108]	; (800171c <W5500Init+0x88>)
 80016ae:	f002 ffe5 	bl	800467c <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2101      	movs	r1, #1
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <W5500Init+0x88>)
 80016b8:	f002 ffe0 	bl	800467c <HAL_GPIO_WritePin>
	tmp = 0xFF;
 80016bc:	23ff      	movs	r3, #255	; 0xff
 80016be:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 80016c0:	bf00      	nop
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	1e5a      	subs	r2, r3, #1
 80016c6:	75fa      	strb	r2, [r7, #23]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1fa      	bne.n	80016c2 <W5500Init+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80016cc:	2201      	movs	r2, #1
 80016ce:	2101      	movs	r1, #1
 80016d0:	4812      	ldr	r0, [pc, #72]	; (800171c <W5500Init+0x88>)
 80016d2:	f002 ffd3 	bl	800467c <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80016d6:	4912      	ldr	r1, [pc, #72]	; (8001720 <W5500Init+0x8c>)
 80016d8:	4812      	ldr	r0, [pc, #72]	; (8001724 <W5500Init+0x90>)
 80016da:	f001 ffa5 	bl	8003628 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 80016de:	4912      	ldr	r1, [pc, #72]	; (8001728 <W5500Init+0x94>)
 80016e0:	4812      	ldr	r0, [pc, #72]	; (800172c <W5500Init+0x98>)
 80016e2:	f001 ffc5 	bl	8003670 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 80016e6:	4912      	ldr	r1, [pc, #72]	; (8001730 <W5500Init+0x9c>)
 80016e8:	4812      	ldr	r0, [pc, #72]	; (8001734 <W5500Init+0xa0>)
 80016ea:	f001 ffed 	bl	80036c8 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 80016ee:	1d3b      	adds	r3, r7, #4
 80016f0:	4619      	mov	r1, r3
 80016f2:	2001      	movs	r0, #1
 80016f4:	f002 f814 	bl	8003720 <ctlwizchip>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fe:	d103      	bne.n	8001708 <W5500Init+0x74>
		printf("WIZCHIP Initialized Failed.\r\n");
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <W5500Init+0xa4>)
 8001702:	f004 fd1d 	bl	8006140 <puts>
		while (1);
 8001706:	e7fe      	b.n	8001706 <W5500Init+0x72>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <W5500Init+0xa8>)
 800170a:	f004 fd19 	bl	8006140 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 800170e:	bf00      	nop
 8001710:	371c      	adds	r7, #28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	08007914 	.word	0x08007914
 800171c:	40010800 	.word	0x40010800
 8001720:	08001579 	.word	0x08001579
 8001724:	08001561 	.word	0x08001561
 8001728:	080015ab 	.word	0x080015ab
 800172c:	08001591 	.word	0x08001591
 8001730:	08001603 	.word	0x08001603
 8001734:	080015c5 	.word	0x080015c5
 8001738:	080078d0 	.word	0x080078d0
 800173c:	080078f0 	.word	0x080078f0

08001740 <get16>:
uint32_t dns_1s_tick;   // for timout of DNS processing
static uint8_t retry_count;

/* converts uint16_t from network buffer to a host byte order integer. */
uint16_t get16(uint8_t * s)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	uint16_t i;
	i = *s++ << 8;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b29b      	uxth	r3, r3
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	81fb      	strh	r3, [r7, #14]
	i = i + *s;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b29a      	uxth	r2, r3
 800175c:	89fb      	ldrh	r3, [r7, #14]
 800175e:	4413      	add	r3, r2
 8001760:	81fb      	strh	r3, [r7, #14]
	return i;
 8001762:	89fb      	ldrh	r3, [r7, #14]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <put16>:

/* copies uint16_t to the network buffer with network byte order. */
uint8_t * put16(uint8_t * s, uint16_t i)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	460b      	mov	r3, r1
 8001778:	807b      	strh	r3, [r7, #2]
	*s++ = i >> 8;
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	0a1b      	lsrs	r3, r3, #8
 800177e:	b299      	uxth	r1, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	1c5a      	adds	r2, r3, #1
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	b2ca      	uxtb	r2, r1
 8001788:	701a      	strb	r2, [r3, #0]
	*s++ = i;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1c5a      	adds	r2, r3, #1
 800178e:	607a      	str	r2, [r7, #4]
 8001790:	887a      	ldrh	r2, [r7, #2]
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	701a      	strb	r2, [r3, #0]
	return s;
 8001796:	687b      	ldr	r3, [r7, #4]
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b08b      	sub	sp, #44	; 0x2c
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60f8      	str	r0, [r7, #12]
 80017aa:	60b9      	str	r1, [r7, #8]
 80017ac:	607a      	str	r2, [r7, #4]
 80017ae:	807b      	strh	r3, [r7, #2]
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
 80017b0:	2300      	movs	r3, #0
 80017b2:	61fb      	str	r3, [r7, #28]
	int indirect = 0;	/* Set if indirection encountered */
 80017b4:	2300      	movs	r3, #0
 80017b6:	61bb      	str	r3, [r7, #24]
	int nseg = 0;		/* Total number of segments in name */
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

	cp = compressed;
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	623b      	str	r3, [r7, #32]

	for (;;)
	{
		slen = *cp++;	/* Length of this segment */
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	623a      	str	r2, [r7, #32]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (!indirect) clen++;
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <parse_name+0x34>
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	3301      	adds	r3, #1
 80017d4:	61fb      	str	r3, [r7, #28]

		if ((slen & 0xc0) == 0xc0)
 80017d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017dc:	2bc0      	cmp	r3, #192	; 0xc0
 80017de:	d117      	bne.n	8001810 <parse_name+0x6e>
		{
			if (!indirect)
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <parse_name+0x4a>
				clen++;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3301      	adds	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
			indirect = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61bb      	str	r3, [r7, #24]
			/* Follow indirection */
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 80017f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80017f2:	021b      	lsls	r3, r3, #8
 80017f4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	4413      	add	r3, r2
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	623b      	str	r3, [r7, #32]
			slen = *cp++;
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	1c5a      	adds	r2, r3, #1
 800180a:	623a      	str	r2, [r7, #32]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	84fb      	strh	r3, [r7, #38]	; 0x26
		}

		if (slen == 0)	/* zero length == all done */
 8001810:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001812:	2b00      	cmp	r3, #0
 8001814:	d02b      	beq.n	800186e <parse_name+0xcc>
			break;

		len -= slen + 1;
 8001816:	887a      	ldrh	r2, [r7, #2]
 8001818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	807b      	strh	r3, [r7, #2]

		if (len < 0) return -1;
 8001824:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001828:	2b00      	cmp	r3, #0
 800182a:	da02      	bge.n	8001832 <parse_name+0x90>
 800182c:	f04f 33ff 	mov.w	r3, #4294967295
 8001830:	e038      	b.n	80018a4 <parse_name+0x102>

		if (!indirect) clen += slen;
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10c      	bne.n	8001852 <parse_name+0xb0>
 8001838:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800183a:	69fa      	ldr	r2, [r7, #28]
 800183c:	4413      	add	r3, r2
 800183e:	61fb      	str	r3, [r7, #28]

		while (slen-- != 0) *buf++ = (char)*cp++;
 8001840:	e007      	b.n	8001852 <parse_name+0xb0>
 8001842:	6a3a      	ldr	r2, [r7, #32]
 8001844:	1c53      	adds	r3, r2, #1
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	1c59      	adds	r1, r3, #1
 800184c:	6079      	str	r1, [r7, #4]
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001854:	1e5a      	subs	r2, r3, #1
 8001856:	84fa      	strh	r2, [r7, #38]	; 0x26
 8001858:	2b00      	cmp	r3, #0
 800185a:	d1f2      	bne.n	8001842 <parse_name+0xa0>
		*buf++ = '.';
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	1c5a      	adds	r2, r3, #1
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	222e      	movs	r2, #46	; 0x2e
 8001864:	701a      	strb	r2, [r3, #0]
		nseg++;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
		slen = *cp++;	/* Length of this segment */
 800186c:	e7a8      	b.n	80017c0 <parse_name+0x1e>
			break;
 800186e:	bf00      	nop
	}

	if (nseg == 0)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <parse_name+0xea>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	222e      	movs	r2, #46	; 0x2e
 800187e:	701a      	strb	r2, [r3, #0]
		len--;
 8001880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001884:	b29b      	uxth	r3, r3
 8001886:	3b01      	subs	r3, #1
 8001888:	b29b      	uxth	r3, r3
 800188a:	807b      	strh	r3, [r7, #2]
	}

	*buf++ = '\0';
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	607a      	str	r2, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	len--;
 8001896:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800189a:	b29b      	uxth	r3, r3
 800189c:	3b01      	subs	r3, #1
 800189e:	b29b      	uxth	r3, r3
 80018a0:	807b      	strh	r3, [r7, #2]

	return clen;	/* Length of compressed message */
 80018a2:	69fb      	ldr	r3, [r7, #28]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	372c      	adds	r7, #44	; 0x2c
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b0b4      	sub	sp, #208	; 0xd0
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	23c0      	movs	r3, #192	; 0xc0
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ff6e 	bl	80017a2 <parse_name>
 80018c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	if (len == -1) return 0;
 80018ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d2:	d101      	bne.n	80018d8 <dns_question+0x2a>
 80018d4:	2300      	movs	r3, #0
 80018d6:	e00b      	b.n	80018f0 <dns_question+0x42>

	cp += len;
 80018d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	603b      	str	r3, [r7, #0]
	cp += 2;		/* type */
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	3302      	adds	r3, #2
 80018e6:	603b      	str	r3, [r7, #0]
	cp += 2;		/* class */
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3302      	adds	r3, #2
 80018ec:	603b      	str	r3, [r7, #0]

	return cp;
 80018ee:	683b      	ldr	r3, [r7, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	37d0      	adds	r7, #208	; 0xd0
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0b6      	sub	sp, #216	; 0xd8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	607a      	str	r2, [r7, #4]
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8001904:	f107 0210 	add.w	r2, r7, #16
 8001908:	23c0      	movs	r3, #192	; 0xc0
 800190a:	68b9      	ldr	r1, [r7, #8]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f7ff ff48 	bl	80017a2 <parse_name>
 8001912:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	if (len == -1) return 0;
 8001916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800191e:	d101      	bne.n	8001924 <dns_answer+0x2c>
 8001920:	2300      	movs	r3, #0
 8001922:	e0dd      	b.n	8001ae0 <dns_answer+0x1e8>

	cp += len;
 8001924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	60bb      	str	r3, [r7, #8]
	type = get16(cp);
 800192e:	68b8      	ldr	r0, [r7, #8]
 8001930:	f7ff ff06 	bl	8001740 <get16>
 8001934:	4603      	mov	r3, r0
 8001936:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	cp += 2;		/* type */
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	3302      	adds	r3, #2
 800193e:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* class */
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	3302      	adds	r3, #2
 8001944:	60bb      	str	r3, [r7, #8]
	cp += 4;		/* ttl */
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3304      	adds	r3, #4
 800194a:	60bb      	str	r3, [r7, #8]
	cp += 2;		/* len */
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	3302      	adds	r3, #2
 8001950:	60bb      	str	r3, [r7, #8]


	switch (type)
 8001952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001956:	3b01      	subs	r3, #1
 8001958:	2b0f      	cmp	r3, #15
 800195a:	f200 80bf 	bhi.w	8001adc <dns_answer+0x1e4>
 800195e:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <dns_answer+0x6c>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	080019a5 	.word	0x080019a5
 8001968:	080019dd 	.word	0x080019dd
 800196c:	08001add 	.word	0x08001add
 8001970:	08001add 	.word	0x08001add
 8001974:	080019dd 	.word	0x080019dd
 8001978:	08001a69 	.word	0x08001a69
 800197c:	080019dd 	.word	0x080019dd
 8001980:	080019dd 	.word	0x080019dd
 8001984:	080019dd 	.word	0x080019dd
 8001988:	08001add 	.word	0x08001add
 800198c:	08001add 	.word	0x08001add
 8001990:	080019dd 	.word	0x080019dd
 8001994:	08001a09 	.word	0x08001a09
 8001998:	08001add 	.word	0x08001add
 800199c:	08001a37 	.word	0x08001a37
 80019a0:	08001add 	.word	0x08001add
	{
	case TYPE_A:
		/* Just read the address directly into the structure */
		ip_from_dns[0] = *cp++;
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	60ba      	str	r2, [r7, #8]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	701a      	strb	r2, [r3, #0]
		ip_from_dns[1] = *cp++;
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	3201      	adds	r2, #1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	7013      	strb	r3, [r2, #0]
		ip_from_dns[2] = *cp++;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	60ba      	str	r2, [r7, #8]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	3202      	adds	r2, #2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	7013      	strb	r3, [r2, #0]
		ip_from_dns[3] = *cp++;
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	3203      	adds	r2, #3
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	7013      	strb	r3, [r2, #0]
		break;
 80019da:	e080      	b.n	8001ade <dns_answer+0x1e6>
	case TYPE_MR:
	case TYPE_NS:
	case TYPE_PTR:
		/* These types all consist of a single domain name */
		/* convert it to ascii format */
		len = parse_name(msg, cp, name, MAXCNAME);
 80019dc:	f107 0210 	add.w	r2, r7, #16
 80019e0:	23c0      	movs	r3, #192	; 0xc0
 80019e2:	68b9      	ldr	r1, [r7, #8]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fedc 	bl	80017a2 <parse_name>
 80019ea:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 80019ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d101      	bne.n	80019fc <dns_answer+0x104>
 80019f8:	2300      	movs	r3, #0
 80019fa:	e071      	b.n	8001ae0 <dns_answer+0x1e8>

		cp += len;
 80019fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	4413      	add	r3, r2
 8001a04:	60bb      	str	r3, [r7, #8]
		break;
 8001a06:	e06a      	b.n	8001ade <dns_answer+0x1e6>
	case TYPE_HINFO:
		len = *cp++;
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8001a14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a18:	68ba      	ldr	r2, [r7, #8]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]

		len = *cp++;
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	1c5a      	adds	r2, r3, #1
 8001a22:	60ba      	str	r2, [r7, #8]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		cp += len;
 8001a2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	4413      	add	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
		break;
 8001a34:	e053      	b.n	8001ade <dns_answer+0x1e6>
	case TYPE_MX:
		cp += 2;
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3302      	adds	r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
		/* Get domain name of exchanger */
		len = parse_name(msg, cp, name, MAXCNAME);
 8001a3c:	f107 0210 	add.w	r2, r7, #16
 8001a40:	23c0      	movs	r3, #192	; 0xc0
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff feac 	bl	80017a2 <parse_name>
 8001a4a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8001a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d101      	bne.n	8001a5c <dns_answer+0x164>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e041      	b.n	8001ae0 <dns_answer+0x1e8>

		cp += len;
 8001a5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	60bb      	str	r3, [r7, #8]
		break;
 8001a66:	e03a      	b.n	8001ade <dns_answer+0x1e6>
	case TYPE_SOA:
		/* Get domain name of name server */
		len = parse_name(msg, cp, name, MAXCNAME);
 8001a68:	f107 0210 	add.w	r2, r7, #16
 8001a6c:	23c0      	movs	r3, #192	; 0xc0
 8001a6e:	68b9      	ldr	r1, [r7, #8]
 8001a70:	68f8      	ldr	r0, [r7, #12]
 8001a72:	f7ff fe96 	bl	80017a2 <parse_name>
 8001a76:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8001a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a82:	d101      	bne.n	8001a88 <dns_answer+0x190>
 8001a84:	2300      	movs	r3, #0
 8001a86:	e02b      	b.n	8001ae0 <dns_answer+0x1e8>

		cp += len;
 8001a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60bb      	str	r3, [r7, #8]

		/* Get domain name of responsible person */
		len = parse_name(msg, cp, name, MAXCNAME);
 8001a92:	f107 0210 	add.w	r2, r7, #16
 8001a96:	23c0      	movs	r3, #192	; 0xc0
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fe81 	bl	80017a2 <parse_name>
 8001aa0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
		if (len == -1) return 0;
 8001aa4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aac:	d101      	bne.n	8001ab2 <dns_answer+0x1ba>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	e016      	b.n	8001ae0 <dns_answer+0x1e8>

		cp += len;
 8001ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60bb      	str	r3, [r7, #8]

		cp += 4;
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	3304      	adds	r3, #4
 8001ac0:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	3304      	adds	r3, #4
 8001acc:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	60bb      	str	r3, [r7, #8]
		cp += 4;
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	60bb      	str	r3, [r7, #8]
		break;
 8001ada:	e000      	b.n	8001ade <dns_answer+0x1e6>
	case TYPE_TXT:
		/* Just stash */
		break;
	default:
		/* Ignore */
		break;
 8001adc:	bf00      	nop
	}

	return cp;
 8001ade:	68bb      	ldr	r3, [r7, #8]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	37d8      	adds	r7, #216	; 0xd8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	uint16_t tmp;
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	617b      	str	r3, [r7, #20]
	memset(pdhdr, 0, sizeof(*pdhdr));
 8001af8:	2212      	movs	r2, #18
 8001afa:	2100      	movs	r1, #0
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f004 fa91 	bl	8006024 <memset>

	pdhdr->id = get16(&msg[0]);
 8001b02:	6978      	ldr	r0, [r7, #20]
 8001b04:	f7ff fe1c 	bl	8001740 <get16>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	801a      	strh	r2, [r3, #0]
	tmp = get16(&msg[2]);
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	3302      	adds	r3, #2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff fe13 	bl	8001740 <get16>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	827b      	strh	r3, [r7, #18]
	if (tmp & 0x8000) pdhdr->qr = 1;
 8001b1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da02      	bge.n	8001b2c <parseDNSMSG+0x44>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	709a      	strb	r2, [r3, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8001b2c:	8a7b      	ldrh	r3, [r7, #18]
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	70da      	strb	r2, [r3, #3]

	if (tmp & 0x0400) pdhdr->aa = 1;
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d002      	beq.n	8001b4e <parseDNSMSG+0x66>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	711a      	strb	r2, [r3, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8001b4e:	8a7b      	ldrh	r3, [r7, #18]
 8001b50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <parseDNSMSG+0x76>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	715a      	strb	r2, [r3, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8001b5e:	8a7b      	ldrh	r3, [r7, #18]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d002      	beq.n	8001b6e <parseDNSMSG+0x86>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	719a      	strb	r2, [r3, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8001b6e:	8a7b      	ldrh	r3, [r7, #18]
 8001b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <parseDNSMSG+0x96>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	71da      	strb	r2, [r3, #7]

	pdhdr->rcode = tmp & 0xf;
 8001b7e:	8a7b      	ldrh	r3, [r7, #18]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	721a      	strb	r2, [r3, #8]
	pdhdr->qdcount = get16(&msg[4]);
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fdd5 	bl	8001740 <get16>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	815a      	strh	r2, [r3, #10]
	pdhdr->ancount = get16(&msg[6]);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fdcc 	bl	8001740 <get16>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	461a      	mov	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	819a      	strh	r2, [r3, #12]
	pdhdr->nscount = get16(&msg[8]);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3308      	adds	r3, #8
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdc3 	bl	8001740 <get16>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	81da      	strh	r2, [r3, #14]
	pdhdr->arcount = get16(&msg[10]);
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	330a      	adds	r3, #10
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fdba 	bl	8001740 <get16>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	821a      	strh	r2, [r3, #16]


	/* Now parse the variable length sections */
	cp = &msg[12];
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	330c      	adds	r3, #12
 8001bd8:	61bb      	str	r3, [r7, #24]

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	83fb      	strh	r3, [r7, #30]
 8001bde:	e00d      	b.n	8001bfc <parseDNSMSG+0x114>
	{
		cp = dns_question(msg, cp);
 8001be0:	69b9      	ldr	r1, [r7, #24]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff fe63 	bl	80018ae <dns_question>
 8001be8:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <parseDNSMSG+0x10e>
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf4:	e03b      	b.n	8001c6e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->qdcount; i++)
 8001bf6:	8bfb      	ldrh	r3, [r7, #30]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	83fb      	strh	r3, [r7, #30]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	895b      	ldrh	r3, [r3, #10]
 8001c00:	8bfa      	ldrh	r2, [r7, #30]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d3ec      	bcc.n	8001be0 <parseDNSMSG+0xf8>
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	83fb      	strh	r3, [r7, #30]
 8001c0a:	e00e      	b.n	8001c2a <parseDNSMSG+0x142>
	{
		cp = dns_answer(msg, cp, ip_from_dns);
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	69b9      	ldr	r1, [r7, #24]
 8001c10:	6978      	ldr	r0, [r7, #20]
 8001c12:	f7ff fe71 	bl	80018f8 <dns_answer>
 8001c16:	61b8      	str	r0, [r7, #24]
   #ifdef _DNS_DEUBG_
      printf("MAX_DOMAIN_NAME is too small, it should be redfine in dns.h");
   #endif
		if(!cp) return -1;
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <parseDNSMSG+0x13c>
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c22:	e024      	b.n	8001c6e <parseDNSMSG+0x186>
	for (i = 0; i < pdhdr->ancount; i++)
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	3301      	adds	r3, #1
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	899b      	ldrh	r3, [r3, #12]
 8001c2e:	8bfa      	ldrh	r2, [r7, #30]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d3eb      	bcc.n	8001c0c <parseDNSMSG+0x124>
	}

	/* Name server (authority) section */
	for (i = 0; i < pdhdr->nscount; i++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	83fb      	strh	r3, [r7, #30]
 8001c38:	e002      	b.n	8001c40 <parseDNSMSG+0x158>
 8001c3a:	8bfb      	ldrh	r3, [r7, #30]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	83fb      	strh	r3, [r7, #30]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	89db      	ldrh	r3, [r3, #14]
 8001c44:	8bfa      	ldrh	r2, [r7, #30]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3f7      	bcc.n	8001c3a <parseDNSMSG+0x152>
	{
		;
	}

	/* Additional section */
	for (i = 0; i < pdhdr->arcount; i++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	83fb      	strh	r3, [r7, #30]
 8001c4e:	e002      	b.n	8001c56 <parseDNSMSG+0x16e>
 8001c50:	8bfb      	ldrh	r3, [r7, #30]
 8001c52:	3301      	adds	r3, #1
 8001c54:	83fb      	strh	r3, [r7, #30]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8a1b      	ldrh	r3, [r3, #16]
 8001c5a:	8bfa      	ldrh	r2, [r7, #30]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d3f7      	bcc.n	8001c50 <parseDNSMSG+0x168>
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	7a1b      	ldrb	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <parseDNSMSG+0x184>
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e000      	b.n	8001c6e <parseDNSMSG+0x186>
	else return 0;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3720      	adds	r7, #32
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b0b8      	sub	sp, #224	; 0xe0
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	81fb      	strh	r3, [r7, #14]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	81bb      	strh	r3, [r7, #12]
	char sname[MAXCNAME];
	char *dname;
	uint16_t p;
	uint16_t dlen;

	cp = buf;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

	DNS_MSGID++;
 8001c92:	4b57      	ldr	r3, [pc, #348]	; (8001df0 <dns_makequery+0x178>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	3301      	adds	r3, #1
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b55      	ldr	r3, [pc, #340]	; (8001df0 <dns_makequery+0x178>)
 8001c9c:	801a      	strh	r2, [r3, #0]
	cp = put16(cp, DNS_MSGID);
 8001c9e:	4b54      	ldr	r3, [pc, #336]	; (8001df0 <dns_makequery+0x178>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001ca8:	f7ff fd61 	bl	800176e <put16>
 8001cac:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	p = (op << 11) | 0x0100;			/* Recursion desired */
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	02db      	lsls	r3, r3, #11
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cba:	b21b      	sxth	r3, r3
 8001cbc:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
	cp = put16(cp, p);
 8001cc0:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001cca:	f7ff fd50 	bl	800176e <put16>
 8001cce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 1);
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001cd8:	f7ff fd49 	bl	800176e <put16>
 8001cdc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001ce6:	f7ff fd42 	bl	800176e <put16>
 8001cea:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001cf4:	f7ff fd3b 	bl	800176e <put16>
 8001cf8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0);
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001d02:	f7ff fd34 	bl	800176e <put16>
 8001d06:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	strcpy(sname, name);
 8001d0a:	f107 0310 	add.w	r3, r7, #16
 8001d0e:	68b9      	ldr	r1, [r7, #8]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 fb18 	bl	8006346 <strcpy>
	dname = sname;
 8001d16:	f107 0310 	add.w	r3, r7, #16
 8001d1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	dlen = strlen(dname);
 8001d1e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001d22:	f7fe fa13 	bl	800014c <strlen>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8001d2c:	212e      	movs	r1, #46	; 0x2e
 8001d2e:	f8d7 00d8 	ldr.w	r0, [r7, #216]	; 0xd8
 8001d32:	f004 fafb 	bl	800632c <strchr>
 8001d36:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8001d3a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <dns_makequery+0xd8>
 8001d42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001d46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	81bb      	strh	r3, [r7, #12]
 8001d4e:	e002      	b.n	8001d56 <dns_makequery+0xde>
		else len = dlen;			/* Last component */
 8001d50:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8001d54:	81bb      	strh	r3, [r7, #12]

		*cp++ = len;				/* Write length of component */
 8001d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d60:	89ba      	ldrh	r2, [r7, #12]
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	701a      	strb	r2, [r3, #0]
		if (len == 0) break;
 8001d66:	89bb      	ldrh	r3, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d029      	beq.n	8001dc0 <dns_makequery+0x148>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 8001d6c:	89bb      	ldrh	r3, [r7, #12]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001d74:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001d78:	f004 faed 	bl	8006356 <strncpy>
		cp += len;
 8001d7c:	89bb      	ldrh	r3, [r7, #12]
 8001d7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001d82:	4413      	add	r3, r2
 8001d84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		if (cp1 == NULL)
 8001d88:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <dns_makequery+0x128>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8001d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
			break;
 8001d9e:	e010      	b.n	8001dc2 <dns_makequery+0x14a>
		}
		dname += len+1;
 8001da0:	89bb      	ldrh	r3, [r7, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8001da8:	4413      	add	r3, r2
 8001daa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		dlen -= len+1;
 8001dae:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8001db2:	89bb      	ldrh	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b01      	subs	r3, #1
 8001dba:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
		cp1 = strchr(dname, '.');
 8001dbe:	e7b5      	b.n	8001d2c <dns_makequery+0xb4>
		if (len == 0) break;
 8001dc0:	bf00      	nop
	}

	cp = put16(cp, 0x0001);				/* type */
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001dc8:	f7ff fcd1 	bl	800176e <put16>
 8001dcc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	cp = put16(cp, 0x0001);				/* class */
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8001dd6:	f7ff fcca 	bl	800176e <put16>
 8001dda:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 8001dde:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	b21b      	sxth	r3, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	37e0      	adds	r7, #224	; 0xe0
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000192 	.word	0x20000192

08001df4 <check_DNS_timeout>:
 * Returns     : -1 - timeout occurred, 0 - timer over, but no timeout, 1 - no timer over, no timeout occur
 * Note        : timeout : retry count and timer both over.
 */

int8_t check_DNS_timeout(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <check_DNS_timeout+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d914      	bls.n	8001e2a <check_DNS_timeout+0x36>
	{
		dns_1s_tick = 0;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <check_DNS_timeout+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 8001e06:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <check_DNS_timeout+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d905      	bls.n	8001e1a <check_DNS_timeout+0x26>
			retry_count = 0;
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <check_DNS_timeout+0x44>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			return -1; // timeout occurred
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
 8001e18:	e008      	b.n	8001e2c <check_DNS_timeout+0x38>
		}
		retry_count++;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <check_DNS_timeout+0x44>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <check_DNS_timeout+0x44>)
 8001e24:	701a      	strb	r2, [r3, #0]
		return 0; // timer over, but no timeout
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <check_DNS_timeout+0x38>
	}

	return 1; // no timer over, no timeout occur
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bc80      	pop	{r7}
 8001e32:	4770      	bx	lr
 8001e34:	20000194 	.word	0x20000194
 8001e38:	20000198 	.word	0x20000198

08001e3c <DNS_init>:



/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	6039      	str	r1, [r7, #0]
 8001e46:	71fb      	strb	r3, [r7, #7]
	DNS_SOCKET = s; // SOCK_DNS
 8001e48:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <DNS_init+0x2c>)
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	7013      	strb	r3, [r2, #0]
	pDNSMSG = buf; // User's shared buffer
 8001e4e:	4a07      	ldr	r2, [pc, #28]	; (8001e6c <DNS_init+0x30>)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	6013      	str	r3, [r2, #0]
	DNS_MSGID = DNS_MSG_ID;
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <DNS_init+0x34>)
 8001e56:	f241 1222 	movw	r2, #4386	; 0x1122
 8001e5a:	801a      	strh	r2, [r3, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000190 	.word	0x20000190
 8001e6c:	2000018c 	.word	0x2000018c
 8001e70:	20000192 	.word	0x20000192

08001e74 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b08f      	sub	sp, #60	; 0x3c
 8001e78:	af02      	add	r7, sp, #8
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 8001e80:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <DNS_run+0xfc>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	dns_1s_tick = 0;
 8001e86:	4b3b      	ldr	r3, [pc, #236]	; (8001f74 <DNS_run+0x100>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 8001e8c:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <DNS_run+0x104>)
 8001e8e:	7818      	ldrb	r0, [r3, #0]
 8001e90:	2300      	movs	r3, #0
 8001e92:	2200      	movs	r2, #0
 8001e94:	2102      	movs	r1, #2
 8001e96:	f000 fec5 	bl	8002c24 <socket>

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8001e9a:	4b38      	ldr	r3, [pc, #224]	; (8001f7c <DNS_run+0x108>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fee7 	bl	8001c78 <dns_makequery>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8001eae:	4b32      	ldr	r3, [pc, #200]	; (8001f78 <DNS_run+0x104>)
 8001eb0:	7818      	ldrb	r0, [r3, #0]
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <DNS_run+0x108>)
 8001eb4:	6819      	ldr	r1, [r3, #0]
 8001eb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001eb8:	2335      	movs	r3, #53	; 0x35
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f001 f835 	bl	8002f2c <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8001ec2:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <DNS_run+0x104>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff f9d9 	bl	800127e <getSn_RX_RSR>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ed0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d029      	beq.n	8001f2a <DNS_run+0xb6>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
 8001ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001edc:	d902      	bls.n	8001ee4 <DNS_run+0x70>
 8001ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee2:	85fb      	strh	r3, [r7, #46]	; 0x2e
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <DNS_run+0x104>)
 8001ee6:	7818      	ldrb	r0, [r3, #0]
 8001ee8:	4b24      	ldr	r3, [pc, #144]	; (8001f7c <DNS_run+0x108>)
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	f107 0414 	add.w	r4, r7, #20
 8001ef0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001ef2:	f107 0312 	add.w	r3, r7, #18
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	4623      	mov	r3, r4
 8001efa:	f001 f94d 	bl	8003198 <recvfrom>
 8001efe:	4603      	mov	r3, r0
 8001f00:	85fb      	strh	r3, [r7, #46]	; 0x2e
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 8001f02:	4b1e      	ldr	r3, [pc, #120]	; (8001f7c <DNS_run+0x108>)
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	f107 0318 	add.w	r3, r7, #24
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fdeb 	bl	8001ae8 <parseDNSMSG>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			break;
 8001f18:	bf00      	nop
			printf("> DNS Timeout\r\n");
#endif
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
		}
	}
	close(DNS_SOCKET);
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <DNS_run+0x104>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 ff96 	bl	8002e50 <close>
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
 8001f24:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001f28:	e01e      	b.n	8001f68 <DNS_run+0xf4>
		ret_check_timeout = check_DNS_timeout();
 8001f2a:	f7ff ff63 	bl	8001df4 <check_DNS_timeout>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret_check_timeout < 0) {
 8001f34:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	da06      	bge.n	8001f4a <DNS_run+0xd6>
			close(DNS_SOCKET);
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <DNS_run+0x104>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f000 ff85 	bl	8002e50 <close>
			return 0; // timeout occurred
 8001f46:	2300      	movs	r3, #0
 8001f48:	e00e      	b.n	8001f68 <DNS_run+0xf4>
		else if (ret_check_timeout == 0) {
 8001f4a:	f997 302d 	ldrsb.w	r3, [r7, #45]	; 0x2d
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1b7      	bne.n	8001ec2 <DNS_run+0x4e>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <DNS_run+0x104>)
 8001f54:	7818      	ldrb	r0, [r3, #0]
 8001f56:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <DNS_run+0x108>)
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001f5c:	2335      	movs	r3, #53	; 0x35
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f000 ffe3 	bl	8002f2c <sendto>
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8001f66:	e7ac      	b.n	8001ec2 <DNS_run+0x4e>
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3734      	adds	r7, #52	; 0x34
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	20000198 	.word	0x20000198
 8001f74:	20000194 	.word	0x20000194
 8001f78:	20000190 	.word	0x20000190
 8001f7c:	2000018c 	.word	0x2000018c

08001f80 <get_seconds_from_ntp_server>:
47) UTC+12:45 (Summer)New Zealand
48) UTC+13:00 Tonga
49) UTC+14:00 Kiribati (Line Islands)
*/
void get_seconds_from_ntp_server(uint8_t *buf, uint16_t idx)
{
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b0d0      	sub	sp, #320	; 0x140
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	tstamp seconds = 0;
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	uint8_t i=0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
	for (i = 0; i < 4; i++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001faa:	e028      	b.n	8001ffe <get_seconds_from_ntp_server+0x7e>
	{
		seconds = (seconds << 8) | buf[idx + i];
 8001fac:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8001fb0:	f04f 0000 	mov.w	r0, #0
 8001fb4:	f04f 0100 	mov.w	r1, #0
 8001fb8:	0219      	lsls	r1, r3, #8
 8001fba:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8001fbe:	0210      	lsls	r0, r2, #8
 8001fc0:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8001fc4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001fc8:	4413      	add	r3, r2
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	461c      	mov	r4, r3
 8001fda:	4615      	mov	r5, r2
 8001fdc:	ea40 0304 	orr.w	r3, r0, r4
 8001fe0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001fe4:	ea41 0305 	orr.w	r3, r1, r5
 8001fe8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001ff0:	e9c7 234e 	strd	r2, r3, [r7, #312]	; 0x138
	for (i = 0; i < 4; i++)
 8001ff4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001ffe:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002002:	2b03      	cmp	r3, #3
 8002004:	d9d2      	bls.n	8001fac <get_seconds_from_ntp_server+0x2c>
	}
	switch (time_zone)
 8002006:	4bb6      	ldr	r3, [pc, #728]	; (80022e0 <get_seconds_from_ntp_server+0x360>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b31      	cmp	r3, #49	; 0x31
 800200c:	f200 82a4 	bhi.w	8002558 <get_seconds_from_ntp_server+0x5d8>
 8002010:	a201      	add	r2, pc, #4	; (adr r2, 8002018 <get_seconds_from_ntp_server+0x98>)
 8002012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002016:	bf00      	nop
 8002018:	080020e1 	.word	0x080020e1
 800201c:	080020ff 	.word	0x080020ff
 8002020:	0800211d 	.word	0x0800211d
 8002024:	0800213b 	.word	0x0800213b
 8002028:	08002159 	.word	0x08002159
 800202c:	08002177 	.word	0x08002177
 8002030:	08002177 	.word	0x08002177
 8002034:	08002195 	.word	0x08002195
 8002038:	08002195 	.word	0x08002195
 800203c:	080021b3 	.word	0x080021b3
 8002040:	080021b3 	.word	0x080021b3
 8002044:	080021d1 	.word	0x080021d1
 8002048:	080021d1 	.word	0x080021d1
 800204c:	080021d1 	.word	0x080021d1
 8002050:	080021ef 	.word	0x080021ef
 8002054:	0800220d 	.word	0x0800220d
 8002058:	0800220d 	.word	0x0800220d
 800205c:	0800222b 	.word	0x0800222b
 8002060:	08002249 	.word	0x08002249
 8002064:	08002267 	.word	0x08002267
 8002068:	08002285 	.word	0x08002285
 800206c:	08002559 	.word	0x08002559
 8002070:	08002559 	.word	0x08002559
 8002074:	080022a3 	.word	0x080022a3
 8002078:	080022a3 	.word	0x080022a3
 800207c:	080022a3 	.word	0x080022a3
 8002080:	080022c1 	.word	0x080022c1
 8002084:	080022c1 	.word	0x080022c1
 8002088:	08002311 	.word	0x08002311
 800208c:	08002311 	.word	0x08002311
 8002090:	08002331 	.word	0x08002331
 8002094:	08002351 	.word	0x08002351
 8002098:	0800236f 	.word	0x0800236f
 800209c:	0800238b 	.word	0x0800238b
 80020a0:	080023a7 	.word	0x080023a7
 80020a4:	080023c3 	.word	0x080023c3
 80020a8:	080023df 	.word	0x080023df
 80020ac:	080023fb 	.word	0x080023fb
 80020b0:	08002417 	.word	0x08002417
 80020b4:	08002433 	.word	0x08002433
 80020b8:	0800244d 	.word	0x0800244d
 80020bc:	08002469 	.word	0x08002469
 80020c0:	08002485 	.word	0x08002485
 80020c4:	080024a1 	.word	0x080024a1
 80020c8:	080024bd 	.word	0x080024bd
 80020cc:	080024d9 	.word	0x080024d9
 80020d0:	080024f5 	.word	0x080024f5
 80020d4:	08002511 	.word	0x08002511
 80020d8:	0800252d 	.word	0x0800252d
 80020dc:	08002543 	.word	0x08002543
	{
	case 0:
		seconds -=  12*3600;
 80020e0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80020e4:	497f      	ldr	r1, [pc, #508]	; (80022e4 <get_seconds_from_ntp_server+0x364>)
 80020e6:	1851      	adds	r1, r2, r1
 80020e8:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 80020ec:	f143 33ff 	adc.w	r3, r3, #4294967295
 80020f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80020f4:	e9d7 3446 	ldrd	r3, r4, [r7, #280]	; 0x118
 80020f8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80020fc:	e22c      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 1:
		seconds -=  11*3600;
 80020fe:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002102:	4979      	ldr	r1, [pc, #484]	; (80022e8 <get_seconds_from_ntp_server+0x368>)
 8002104:	1851      	adds	r1, r2, r1
 8002106:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800210a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800210e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002112:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002116:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800211a:	e21d      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 2:
		seconds -=  10*3600;
 800211c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002120:	4972      	ldr	r1, [pc, #456]	; (80022ec <get_seconds_from_ntp_server+0x36c>)
 8002122:	1851      	adds	r1, r2, r1
 8002124:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8002128:	f143 33ff 	adc.w	r3, r3, #4294967295
 800212c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002130:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8002134:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002138:	e20e      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 3:
		seconds -=  (9*3600+30*60);
 800213a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800213e:	496c      	ldr	r1, [pc, #432]	; (80022f0 <get_seconds_from_ntp_server+0x370>)
 8002140:	1851      	adds	r1, r2, r1
 8002142:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 8002146:	f143 33ff 	adc.w	r3, r3, #4294967295
 800214a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800214e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002152:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002156:	e1ff      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 4:
		seconds -=  9*3600;
 8002158:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800215c:	4965      	ldr	r1, [pc, #404]	; (80022f4 <get_seconds_from_ntp_server+0x374>)
 800215e:	1851      	adds	r1, r2, r1
 8002160:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8002164:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800216c:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8002170:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002174:	e1f0      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 5:
	case 6:
		seconds -=  8*3600;
 8002176:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800217a:	f5b2 41e1 	subs.w	r1, r2, #28800	; 0x7080
 800217e:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8002182:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002186:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800218a:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800218e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002192:	e1e1      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 7:
	case 8:
		seconds -=  7*3600;
 8002194:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002198:	4957      	ldr	r1, [pc, #348]	; (80022f8 <get_seconds_from_ntp_server+0x378>)
 800219a:	1851      	adds	r1, r2, r1
 800219c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80021a0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80021a8:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 80021ac:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80021b0:	e1d2      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 9:
	case 10:
		seconds -=  6*3600;
 80021b2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021b6:	4951      	ldr	r1, [pc, #324]	; (80022fc <get_seconds_from_ntp_server+0x37c>)
 80021b8:	1851      	adds	r1, r2, r1
 80021ba:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80021be:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021c6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80021ca:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80021ce:	e1c3      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 11:
	case 12:
	case 13:
		seconds -= 5*3600;
 80021d0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021d4:	494a      	ldr	r1, [pc, #296]	; (8002300 <get_seconds_from_ntp_server+0x380>)
 80021d6:	1851      	adds	r1, r2, r1
 80021d8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80021dc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80021e4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80021e8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80021ec:	e1b4      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 14:
		seconds -=  (4*3600+30*60);
 80021ee:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80021f2:	4944      	ldr	r1, [pc, #272]	; (8002304 <get_seconds_from_ntp_server+0x384>)
 80021f4:	1851      	adds	r1, r2, r1
 80021f6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80021fa:	f143 33ff 	adc.w	r3, r3, #4294967295
 80021fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002202:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8002206:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800220a:	e1a5      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 15:
	case 16:
		seconds -=  4*3600;
 800220c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002210:	f5b2 5161 	subs.w	r1, r2, #14400	; 0x3840
 8002214:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8002218:	f143 33ff 	adc.w	r3, r3, #4294967295
 800221c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002220:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002224:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002228:	e196      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 17:
		seconds -=  (3*3600+30*60);
 800222a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800222e:	4936      	ldr	r1, [pc, #216]	; (8002308 <get_seconds_from_ntp_server+0x388>)
 8002230:	1851      	adds	r1, r2, r1
 8002232:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8002236:	f143 33ff 	adc.w	r3, r3, #4294967295
 800223a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800223e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8002242:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002246:	e187      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 18:
		seconds -=  3*3600;
 8002248:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800224c:	492f      	ldr	r1, [pc, #188]	; (800230c <get_seconds_from_ntp_server+0x38c>)
 800224e:	1851      	adds	r1, r2, r1
 8002250:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8002254:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800225c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002260:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002264:	e178      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 19:
		seconds -=  2*3600;
 8002266:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800226a:	f5b2 51e1 	subs.w	r1, r2, #7200	; 0x1c20
 800226e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8002272:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002276:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800227a:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 800227e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002282:	e169      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 20:
		seconds -=  1*3600;
 8002284:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002288:	f5b2 6161 	subs.w	r1, r2, #3600	; 0xe10
 800228c:	f8c7 10a8 	str.w	r1, [r7, #168]	; 0xa8
 8002290:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002294:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002298:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800229c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80022a0:	e15a      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 22:
		break;
	case 23:
	case 24:
	case 25:
		seconds +=  1*3600;
 80022a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80022a6:	f512 6161 	adds.w	r1, r2, #3600	; 0xe10
 80022aa:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80022ae:	f143 0300 	adc.w	r3, r3, #0
 80022b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80022b6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80022ba:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80022be:	e14b      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 26:
	case 27:
		seconds +=  2*3600;
 80022c0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80022c4:	f512 51e1 	adds.w	r1, r2, #7200	; 0x1c20
 80022c8:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80022cc:	f143 0300 	adc.w	r3, r3, #0
 80022d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80022d4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80022d8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80022dc:	e13c      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
 80022de:	bf00      	nop
 80022e0:	20000215 	.word	0x20000215
 80022e4:	ffff5740 	.word	0xffff5740
 80022e8:	ffff6550 	.word	0xffff6550
 80022ec:	ffff7360 	.word	0xffff7360
 80022f0:	ffff7a68 	.word	0xffff7a68
 80022f4:	ffff8170 	.word	0xffff8170
 80022f8:	ffff9d90 	.word	0xffff9d90
 80022fc:	ffffaba0 	.word	0xffffaba0
 8002300:	ffffb9b0 	.word	0xffffb9b0
 8002304:	ffffc0b8 	.word	0xffffc0b8
 8002308:	ffffcec8 	.word	0xffffcec8
 800230c:	ffffd5d0 	.word	0xffffd5d0
	case 28:
	case 29:
		seconds +=  3*3600;
 8002310:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002314:	f642 2130 	movw	r1, #10800	; 0x2a30
 8002318:	1851      	adds	r1, r2, r1
 800231a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 800231e:	f143 0300 	adc.w	r3, r3, #0
 8002322:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002326:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 800232a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800232e:	e113      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 30:
		seconds +=  (3*3600+30*60);
 8002330:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002334:	f243 1138 	movw	r1, #12600	; 0x3138
 8002338:	1851      	adds	r1, r2, r1
 800233a:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800233e:	f143 0300 	adc.w	r3, r3, #0
 8002342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002346:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 800234a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800234e:	e103      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 31:
		seconds +=  4*3600;
 8002350:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002354:	f512 5161 	adds.w	r1, r2, #14400	; 0x3840
 8002358:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800235c:	f143 0300 	adc.w	r3, r3, #0
 8002360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002364:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002368:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800236c:	e0f4      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 32:
		seconds +=  (4*3600+30*60);
 800236e:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002372:	f643 7148 	movw	r1, #16200	; 0x3f48
 8002376:	1851      	adds	r1, r2, r1
 8002378:	67b9      	str	r1, [r7, #120]	; 0x78
 800237a:	f143 0300 	adc.w	r3, r3, #0
 800237e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002380:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002384:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002388:	e0e6      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 33:
		seconds +=  5*3600;
 800238a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800238e:	f244 6150 	movw	r1, #18000	; 0x4650
 8002392:	1851      	adds	r1, r2, r1
 8002394:	6739      	str	r1, [r7, #112]	; 0x70
 8002396:	f143 0300 	adc.w	r3, r3, #0
 800239a:	677b      	str	r3, [r7, #116]	; 0x74
 800239c:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	; 0x70
 80023a0:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80023a4:	e0d8      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 34:
		seconds +=  (5*3600+30*60);
 80023a6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80023aa:	f644 5158 	movw	r1, #19800	; 0x4d58
 80023ae:	1851      	adds	r1, r2, r1
 80023b0:	66b9      	str	r1, [r7, #104]	; 0x68
 80023b2:	f143 0300 	adc.w	r3, r3, #0
 80023b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80023b8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80023bc:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80023c0:	e0ca      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 35:
		seconds +=  (5*3600+45*60);
 80023c2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80023c6:	f245 01dc 	movw	r1, #20700	; 0x50dc
 80023ca:	1851      	adds	r1, r2, r1
 80023cc:	6639      	str	r1, [r7, #96]	; 0x60
 80023ce:	f143 0300 	adc.w	r3, r3, #0
 80023d2:	667b      	str	r3, [r7, #100]	; 0x64
 80023d4:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 80023d8:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80023dc:	e0bc      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 36:
		seconds +=  6*3600;
 80023de:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80023e2:	f245 4160 	movw	r1, #21600	; 0x5460
 80023e6:	1851      	adds	r1, r2, r1
 80023e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80023ea:	f143 0300 	adc.w	r3, r3, #0
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023f0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80023f4:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80023f8:	e0ae      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 37:
		seconds +=  (6*3600+30*60);
 80023fa:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80023fe:	f645 3168 	movw	r1, #23400	; 0x5b68
 8002402:	1851      	adds	r1, r2, r1
 8002404:	6539      	str	r1, [r7, #80]	; 0x50
 8002406:	f143 0300 	adc.w	r3, r3, #0
 800240a:	657b      	str	r3, [r7, #84]	; 0x54
 800240c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002410:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002414:	e0a0      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 38:
		seconds +=  7*3600;
 8002416:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800241a:	f246 2170 	movw	r1, #25200	; 0x6270
 800241e:	1851      	adds	r1, r2, r1
 8002420:	64b9      	str	r1, [r7, #72]	; 0x48
 8002422:	f143 0300 	adc.w	r3, r3, #0
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002428:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 800242c:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002430:	e092      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 39:
		seconds +=  8*3600;
 8002432:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002436:	f512 41e1 	adds.w	r1, r2, #28800	; 0x7080
 800243a:	6439      	str	r1, [r7, #64]	; 0x40
 800243c:	f143 0300 	adc.w	r3, r3, #0
 8002440:	647b      	str	r3, [r7, #68]	; 0x44
 8002442:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002446:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800244a:	e085      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 40:
		seconds +=  9*3600;
 800244c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002450:	f647 6190 	movw	r1, #32400	; 0x7e90
 8002454:	1851      	adds	r1, r2, r1
 8002456:	63b9      	str	r1, [r7, #56]	; 0x38
 8002458:	f143 0300 	adc.w	r3, r3, #0
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800245e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002462:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002466:	e077      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 41:
		seconds +=  (9*3600+30*60);
 8002468:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800246c:	f248 5198 	movw	r1, #34200	; 0x8598
 8002470:	1851      	adds	r1, r2, r1
 8002472:	6339      	str	r1, [r7, #48]	; 0x30
 8002474:	f143 0300 	adc.w	r3, r3, #0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
 800247a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800247e:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 8002482:	e069      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 42:
		seconds +=  10*3600;
 8002484:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002488:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 800248c:	1851      	adds	r1, r2, r1
 800248e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002490:	f143 0300 	adc.w	r3, r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002496:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800249a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800249e:	e05b      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 43:
		seconds +=  (10*3600+30*60);
 80024a0:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80024a4:	f249 31a8 	movw	r1, #37800	; 0x93a8
 80024a8:	1851      	adds	r1, r2, r1
 80024aa:	6239      	str	r1, [r7, #32]
 80024ac:	f143 0300 	adc.w	r3, r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
 80024b2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80024b6:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80024ba:	e04d      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 44:
		seconds +=  11*3600;
 80024bc:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80024c0:	f649 21b0 	movw	r1, #39600	; 0x9ab0
 80024c4:	1851      	adds	r1, r2, r1
 80024c6:	61b9      	str	r1, [r7, #24]
 80024c8:	f143 0300 	adc.w	r3, r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80024d2:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80024d6:	e03f      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 45:
		seconds +=  (11*3600+30*60);
 80024d8:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80024dc:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
 80024e0:	1851      	adds	r1, r2, r1
 80024e2:	6139      	str	r1, [r7, #16]
 80024e4:	f143 0300 	adc.w	r3, r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
 80024ea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80024ee:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 80024f2:	e031      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 46:
		seconds +=  12*3600;
 80024f4:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 80024f8:	f64a 01c0 	movw	r1, #43200	; 0xa8c0
 80024fc:	1851      	adds	r1, r2, r1
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	f143 0300 	adc.w	r3, r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800250a:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800250e:	e023      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 47:
		seconds +=  (12*3600+45*60);
 8002510:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002514:	f24b 314c 	movw	r1, #45900	; 0xb34c
 8002518:	1851      	adds	r1, r2, r1
 800251a:	6039      	str	r1, [r7, #0]
 800251c:	f143 0300 	adc.w	r3, r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002526:	e9c7 344e 	strd	r3, r4, [r7, #312]	; 0x138
		break;
 800252a:	e015      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 48:
		seconds +=  13*3600;
 800252c:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002530:	f24b 61d0 	movw	r1, #46800	; 0xb6d0
 8002534:	eb12 0a01 	adds.w	sl, r2, r1
 8002538:	f143 0b00 	adc.w	fp, r3, #0
 800253c:	e9c7 ab4e 	strd	sl, fp, [r7, #312]	; 0x138
		break;
 8002540:	e00a      	b.n	8002558 <get_seconds_from_ntp_server+0x5d8>
	case 49:
		seconds +=  14*3600;
 8002542:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002546:	f24c 41e0 	movw	r1, #50400	; 0xc4e0
 800254a:	eb12 0801 	adds.w	r8, r2, r1
 800254e:	f143 0900 	adc.w	r9, r3, #0
 8002552:	e9c7 894e 	strd	r8, r9, [r7, #312]	; 0x138
		break;
 8002556:	bf00      	nop

	}

	//calculation for date
	calcdatetime(seconds);
 8002558:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800255c:	f000 f93e 	bl	80027dc <calcdatetime>
}
 8002560:	bf00      	nop
 8002562:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8002566:	46bd      	mov	sp, r7
 8002568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800256c <SNTP_init>:

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 800256c:	b480      	push	{r7}
 800256e:	b087      	sub	sp, #28
 8002570:	af00      	add	r7, sp, #0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4603      	mov	r3, r0
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	4613      	mov	r3, r2
 800257c:	73bb      	strb	r3, [r7, #14]
	NTP_SOCKET = s;
 800257e:	4a33      	ldr	r2, [pc, #204]	; (800264c <SNTP_init+0xe0>)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	7013      	strb	r3, [r2, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	781a      	ldrb	r2, [r3, #0]
 8002588:	4b31      	ldr	r3, [pc, #196]	; (8002650 <SNTP_init+0xe4>)
 800258a:	701a      	strb	r2, [r3, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785a      	ldrb	r2, [r3, #1]
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <SNTP_init+0xe4>)
 8002592:	705a      	strb	r2, [r3, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	789a      	ldrb	r2, [r3, #2]
 8002598:	4b2d      	ldr	r3, [pc, #180]	; (8002650 <SNTP_init+0xe4>)
 800259a:	709a      	strb	r2, [r3, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	78da      	ldrb	r2, [r3, #3]
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <SNTP_init+0xe4>)
 80025a2:	70da      	strb	r2, [r3, #3]

	time_zone = tz;
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <SNTP_init+0xe8>)
 80025a6:	7bbb      	ldrb	r3, [r7, #14]
 80025a8:	7013      	strb	r3, [r2, #0]

	data_buf = buf;
 80025aa:	4a2b      	ldr	r2, [pc, #172]	; (8002658 <SNTP_init+0xec>)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <SNTP_init+0xe4>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	715a      	strb	r2, [r3, #5]
	NTPformat.version = 4;        /* version number */
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <SNTP_init+0xe4>)
 80025b8:	2204      	movs	r2, #4
 80025ba:	711a      	strb	r2, [r3, #4]
	NTPformat.mode = 3;           /* mode */
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <SNTP_init+0xe4>)
 80025be:	2203      	movs	r2, #3
 80025c0:	719a      	strb	r2, [r3, #6]
	NTPformat.stratum = 0;        /* stratum */
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <SNTP_init+0xe4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	71da      	strb	r2, [r3, #7]
	NTPformat.poll = 0;           /* poll interval */
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <SNTP_init+0xe4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	721a      	strb	r2, [r3, #8]
	NTPformat.precision = 0;      /* precision */
 80025ce:	4b20      	ldr	r3, [pc, #128]	; (8002650 <SNTP_init+0xe4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	725a      	strb	r2, [r3, #9]
	NTPformat.rootdelay = 0;      /* root delay */
 80025d4:	4b1e      	ldr	r3, [pc, #120]	; (8002650 <SNTP_init+0xe4>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	60da      	str	r2, [r3, #12]
	NTPformat.rootdisp = 0;       /* root dispersion */
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <SNTP_init+0xe4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	611a      	str	r2, [r3, #16]
	NTPformat.refid = 0;          /* reference ID */
 80025e0:	4b1b      	ldr	r3, [pc, #108]	; (8002650 <SNTP_init+0xe4>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	751a      	strb	r2, [r3, #20]
	NTPformat.reftime = 0;        /* reference time */
 80025e6:	491a      	ldr	r1, [pc, #104]	; (8002650 <SNTP_init+0xe4>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	NTPformat.org = 0;            /* origin timestamp */
 80025f4:	4916      	ldr	r1, [pc, #88]	; (8002650 <SNTP_init+0xe4>)
 80025f6:	f04f 0200 	mov.w	r2, #0
 80025fa:	f04f 0300 	mov.w	r3, #0
 80025fe:	e9c1 2308 	strd	r2, r3, [r1, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 8002602:	4913      	ldr	r1, [pc, #76]	; (8002650 <SNTP_init+0xe4>)
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 8002610:	490f      	ldr	r1, [pc, #60]	; (8002650 <SNTP_init+0xe4>)
 8002612:	f04f 0201 	mov.w	r2, #1
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <SNTP_init+0xe4>)
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	019b      	lsls	r3, r3, #6
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b0a      	ldr	r3, [pc, #40]	; (8002650 <SNTP_init+0xe4>)
 8002628:	791b      	ldrb	r3, [r3, #4]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4413      	add	r3, r2
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <SNTP_init+0xe4>)
 8002634:	799b      	ldrb	r3, [r3, #6]
 8002636:	4413      	add	r3, r2
 8002638:	b2db      	uxtb	r3, r3
 800263a:	75fb      	strb	r3, [r7, #23]
 800263c:	7dfa      	ldrb	r2, [r7, #23]
	memcpy(ntpmessage,(void const*)(&Flag),1);
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <SNTP_init+0xf0>)
 8002640:	701a      	strb	r2, [r3, #0]
}
 8002642:	bf00      	nop
 8002644:	371c      	adds	r7, #28
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	20000214 	.word	0x20000214
 8002650:	200001a0 	.word	0x200001a0
 8002654:	20000215 	.word	0x20000215
 8002658:	20000210 	.word	0x20000210
 800265c:	200001e0 	.word	0x200001e0

08002660 <SNTP_run>:

int8_t SNTP_run(datetime *time)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af02      	add	r7, sp, #8
 8002666:	6078      	str	r0, [r7, #4]
	uint16_t RSR_len;
	uint32_t destip = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
	uint16_t destport;
	uint16_t startindex = 40; //last 8-byte of data_buf[size is 48 byte] is xmt, so the startindex should be 40
 800266c:	2328      	movs	r3, #40	; 0x28
 800266e:	82bb      	strh	r3, [r7, #20]

	switch(getSn_SR(NTP_SOCKET))
 8002670:	4b53      	ldr	r3, [pc, #332]	; (80027c0 <SNTP_run+0x160>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	3301      	adds	r3, #1
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800267e:	4618      	mov	r0, r3
 8002680:	f7fe fc58 	bl	8000f34 <WIZCHIP_READ>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 808b 	beq.w	80027a2 <SNTP_run+0x142>
 800268c:	2b22      	cmp	r3, #34	; 0x22
 800268e:	f040 8091 	bne.w	80027b4 <SNTP_run+0x154>
	{
	case SOCK_UDP:
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 8002692:	4b4b      	ldr	r3, [pc, #300]	; (80027c0 <SNTP_run+0x160>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fdf1 	bl	800127e <getSn_RX_RSR>
 800269c:	4603      	mov	r3, r0
 800269e:	82fb      	strh	r3, [r7, #22]
 80026a0:	8afb      	ldrh	r3, [r7, #22]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d03a      	beq.n	800271c <SNTP_run+0xbc>
		{
			if (RSR_len > MAX_SNTP_BUF_SIZE) RSR_len = MAX_SNTP_BUF_SIZE;	// if Rx data size is lager than TX_RX_MAX_BUF_SIZE
 80026a6:	8afb      	ldrh	r3, [r7, #22]
 80026a8:	2b38      	cmp	r3, #56	; 0x38
 80026aa:	d901      	bls.n	80026b0 <SNTP_run+0x50>
 80026ac:	2338      	movs	r3, #56	; 0x38
 80026ae:	82fb      	strh	r3, [r7, #22]
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 80026b0:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <SNTP_run+0x160>)
 80026b2:	7818      	ldrb	r0, [r3, #0]
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <SNTP_run+0x164>)
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	f107 0410 	add.w	r4, r7, #16
 80026bc:	8afa      	ldrh	r2, [r7, #22]
 80026be:	f107 030e 	add.w	r3, r7, #14
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	4623      	mov	r3, r4
 80026c6:	f000 fd67 	bl	8003198 <recvfrom>

			get_seconds_from_ntp_server(data_buf,startindex);
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <SNTP_run+0x164>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	8aba      	ldrh	r2, [r7, #20]
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fc54 	bl	8001f80 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 80026d8:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <SNTP_run+0x168>)
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	801a      	strh	r2, [r3, #0]
			time->mo = Nowdatetime.mo;
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <SNTP_run+0x168>)
 80026e2:	789a      	ldrb	r2, [r3, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	709a      	strb	r2, [r3, #2]
			time->dd = Nowdatetime.dd;
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <SNTP_run+0x168>)
 80026ea:	78da      	ldrb	r2, [r3, #3]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	70da      	strb	r2, [r3, #3]
			time->hh = Nowdatetime.hh;
 80026f0:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <SNTP_run+0x168>)
 80026f2:	791a      	ldrb	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	711a      	strb	r2, [r3, #4]
			time->mm = Nowdatetime.mm;
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <SNTP_run+0x168>)
 80026fa:	795a      	ldrb	r2, [r3, #5]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	715a      	strb	r2, [r3, #5]
			time->ss = Nowdatetime.ss;
 8002700:	4b31      	ldr	r3, [pc, #196]	; (80027c8 <SNTP_run+0x168>)
 8002702:	799a      	ldrb	r2, [r3, #6]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	719a      	strb	r2, [r3, #6]

			ntp_retry_cnt=0;
 8002708:	4b30      	ldr	r3, [pc, #192]	; (80027cc <SNTP_run+0x16c>)
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <SNTP_run+0x160>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f000 fb9c 	bl	8002e50 <close>

			return 1;
 8002718:	2301      	movs	r3, #1
 800271a:	e04c      	b.n	80027b6 <SNTP_run+0x156>
		}

		if(ntp_retry_cnt<0xFFFF)
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <SNTP_run+0x16c>)
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002724:	4293      	cmp	r3, r2
 8002726:	d033      	beq.n	8002790 <SNTP_run+0x130>
		{
			if(ntp_retry_cnt==0)//first send request, no need to wait
 8002728:	4b28      	ldr	r3, [pc, #160]	; (80027cc <SNTP_run+0x16c>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10f      	bne.n	8002750 <SNTP_run+0xf0>
			{
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <SNTP_run+0x160>)
 8002732:	7818      	ldrb	r0, [r3, #0]
 8002734:	237b      	movs	r3, #123	; 0x7b
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <SNTP_run+0x170>)
 800273a:	2230      	movs	r2, #48	; 0x30
 800273c:	4925      	ldr	r1, [pc, #148]	; (80027d4 <SNTP_run+0x174>)
 800273e:	f000 fbf5 	bl	8002f2c <sendto>
				ntp_retry_cnt++;
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <SNTP_run+0x16c>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <SNTP_run+0x16c>)
 800274c:	801a      	strh	r2, [r3, #0]
#ifdef _SNTP_DEBUG_
			printf("ntp retry failed!\r\n");
#endif
			close(NTP_SOCKET);
		}
		break;
 800274e:	e030      	b.n	80027b2 <SNTP_run+0x152>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <SNTP_run+0x16c>)
 8002752:	881a      	ldrh	r2, [r3, #0]
 8002754:	4b20      	ldr	r3, [pc, #128]	; (80027d8 <SNTP_run+0x178>)
 8002756:	fba3 1302 	umull	r1, r3, r3, r2
 800275a:	1ad1      	subs	r1, r2, r3
 800275c:	0849      	lsrs	r1, r1, #1
 800275e:	440b      	add	r3, r1
 8002760:	0ad9      	lsrs	r1, r3, #11
 8002762:	460b      	mov	r3, r1
 8002764:	031b      	lsls	r3, r3, #12
 8002766:	1a5b      	subs	r3, r3, r1
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d120      	bne.n	80027b2 <SNTP_run+0x152>
					sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 8002770:	4b13      	ldr	r3, [pc, #76]	; (80027c0 <SNTP_run+0x160>)
 8002772:	7818      	ldrb	r0, [r3, #0]
 8002774:	237b      	movs	r3, #123	; 0x7b
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <SNTP_run+0x170>)
 800277a:	2230      	movs	r2, #48	; 0x30
 800277c:	4915      	ldr	r1, [pc, #84]	; (80027d4 <SNTP_run+0x174>)
 800277e:	f000 fbd5 	bl	8002f2c <sendto>
					ntp_retry_cnt++;
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <SNTP_run+0x16c>)
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	3301      	adds	r3, #1
 8002788:	b29a      	uxth	r2, r3
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <SNTP_run+0x16c>)
 800278c:	801a      	strh	r2, [r3, #0]
		break;
 800278e:	e010      	b.n	80027b2 <SNTP_run+0x152>
			ntp_retry_cnt=0;
 8002790:	4b0e      	ldr	r3, [pc, #56]	; (80027cc <SNTP_run+0x16c>)
 8002792:	2200      	movs	r2, #0
 8002794:	801a      	strh	r2, [r3, #0]
			close(NTP_SOCKET);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <SNTP_run+0x160>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f000 fb58 	bl	8002e50 <close>
		break;
 80027a0:	e007      	b.n	80027b2 <SNTP_run+0x152>
	case SOCK_CLOSED:
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <SNTP_run+0x160>)
 80027a4:	7818      	ldrb	r0, [r3, #0]
 80027a6:	2300      	movs	r3, #0
 80027a8:	227b      	movs	r2, #123	; 0x7b
 80027aa:	2102      	movs	r1, #2
 80027ac:	f000 fa3a 	bl	8002c24 <socket>
		break;
 80027b0:	e000      	b.n	80027b4 <SNTP_run+0x154>
		break;
 80027b2:	bf00      	nop
	}
	// Return value
	// 0 - failed / 1 - success
	return 0;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd90      	pop	{r4, r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000214 	.word	0x20000214
 80027c4:	20000210 	.word	0x20000210
 80027c8:	200001d8 	.word	0x200001d8
 80027cc:	20000216 	.word	0x20000216
 80027d0:	200001a0 	.word	0x200001a0
 80027d4:	200001e0 	.word	0x200001e0
 80027d8:	00100101 	.word	0x00100101

080027dc <calcdatetime>:

void calcdatetime(tstamp seconds)
{
 80027dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027e0:	b0ae      	sub	sp, #184	; 0xb8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
	uint8_t yf=0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	tstamp n=0,d=0,total_d=0,rz=0;
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	f04f 0300 	mov.w	r3, #0
 800280e:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98
	uint16_t y=0,r=0,yr=0;
 800281e:	2300      	movs	r3, #0
 8002820:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8002824:	2300      	movs	r3, #0
 8002826:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800282a:	2300      	movs	r3, #0
 800282c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	signed long long yd=0;
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	f04f 0300 	mov.w	r3, #0
 8002838:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	n = seconds;
 800283c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002840:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
	total_d = seconds/(SECS_PERDAY);
 8002844:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002848:	4a93      	ldr	r2, [pc, #588]	; (8002a98 <calcdatetime+0x2bc>)
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	f7fd fc85 	bl	800015c <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	d=0;
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
	uint32_t p_year_total_sec=SECS_PERDAY*365;
 8002866:	4b8d      	ldr	r3, [pc, #564]	; (8002a9c <calcdatetime+0x2c0>)
 8002868:	67bb      	str	r3, [r7, #120]	; 0x78
	uint32_t r_year_total_sec=SECS_PERDAY*366;
 800286a:	4b8d      	ldr	r3, [pc, #564]	; (8002aa0 <calcdatetime+0x2c4>)
 800286c:	677b      	str	r3, [r7, #116]	; 0x74
	while(n>=p_year_total_sec)
 800286e:	e06c      	b.n	800294a <calcdatetime+0x16e>
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 8002870:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002874:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 8002878:	4b8a      	ldr	r3, [pc, #552]	; (8002aa4 <calcdatetime+0x2c8>)
 800287a:	fb83 2301 	smull	r2, r3, r3, r1
 800287e:	11da      	asrs	r2, r3, #7
 8002880:	17cb      	asrs	r3, r1, #31
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	1acb      	subs	r3, r1, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <calcdatetime+0xe6>
 8002892:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8002896:	f203 716c 	addw	r1, r3, #1900	; 0x76c
 800289a:	4b82      	ldr	r3, [pc, #520]	; (8002aa4 <calcdatetime+0x2c8>)
 800289c:	fb83 2301 	smull	r2, r3, r3, r1
 80028a0:	115a      	asrs	r2, r3, #5
 80028a2:	17cb      	asrs	r3, r1, #31
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2264      	movs	r2, #100	; 0x64
 80028a8:	fb02 f303 	mul.w	r3, r2, r3
 80028ac:	1acb      	subs	r3, r1, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d024      	beq.n	80028fc <calcdatetime+0x120>
 80028b2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80028b6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11c      	bne.n	80028fc <calcdatetime+0x120>
		{
			n = n -(r_year_total_sec);
 80028c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028c4:	2200      	movs	r2, #0
 80028c6:	4698      	mov	r8, r3
 80028c8:	4691      	mov	r9, r2
 80028ca:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80028ce:	ebb2 0108 	subs.w	r1, r2, r8
 80028d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80028d4:	eb63 0309 	sbc.w	r3, r3, r9
 80028d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80028de:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 366;
 80028e2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80028e6:	f512 71b7 	adds.w	r1, r2, #366	; 0x16e
 80028ea:	6539      	str	r1, [r7, #80]	; 0x50
 80028ec:	f143 0300 	adc.w	r3, r3, #0
 80028f0:	657b      	str	r3, [r7, #84]	; 0x54
 80028f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80028f6:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
 80028fa:	e01c      	b.n	8002936 <calcdatetime+0x15a>
		}
		else
		{
			n = n - (p_year_total_sec);
 80028fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028fe:	2200      	movs	r2, #0
 8002900:	469a      	mov	sl, r3
 8002902:	4693      	mov	fp, r2
 8002904:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002908:	ebb2 010a 	subs.w	r1, r2, sl
 800290c:	64b9      	str	r1, [r7, #72]	; 0x48
 800290e:	eb63 030b 	sbc.w	r3, r3, fp
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002914:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002918:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
			d = d + 365;
 800291c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002920:	f240 116d 	movw	r1, #365	; 0x16d
 8002924:	1851      	adds	r1, r2, r1
 8002926:	6439      	str	r1, [r7, #64]	; 0x40
 8002928:	f143 0300 	adc.w	r3, r3, #0
 800292c:	647b      	str	r3, [r7, #68]	; 0x44
 800292e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002932:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
		}
		r+=1;
 8002936:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800293a:	3301      	adds	r3, #1
 800293c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
		y+=1;
 8002940:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002944:	3301      	adds	r3, #1
 8002946:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	while(n>=p_year_total_sec)
 800294a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800294c:	2200      	movs	r2, #0
 800294e:	461c      	mov	r4, r3
 8002950:	4615      	mov	r5, r2
 8002952:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8002956:	42a2      	cmp	r2, r4
 8002958:	41ab      	sbcs	r3, r5
 800295a:	d289      	bcs.n	8002870 <calcdatetime+0x94>

	}

	y += EPOCH;
 800295c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002960:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8002964:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

	Nowdatetime.yy = y;
 8002968:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <calcdatetime+0x2cc>)
 800296a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800296e:	8013      	strh	r3, [r2, #0]

	yd=0;
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	yd = total_d - d;
 800297c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002980:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8002984:	1a84      	subs	r4, r0, r2
 8002986:	663c      	str	r4, [r7, #96]	; 0x60
 8002988:	eb61 0303 	sbc.w	r3, r1, r3
 800298c:	667b      	str	r3, [r7, #100]	; 0x64
 800298e:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002992:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88

	yf=1;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 800299c:	e0d3      	b.n	8002b46 <calcdatetime+0x36a>
	{

		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 800299e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d017      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029a6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d013      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029ae:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d00f      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029b6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029ba:	2b07      	cmp	r3, #7
 80029bc:	d00b      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029be:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d007      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029c6:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029ca:	2b0a      	cmp	r3, #10
 80029cc:	d003      	beq.n	80029d6 <calcdatetime+0x1fa>
 80029ce:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d11c      	bne.n	8002a10 <calcdatetime+0x234>
		{
			yd -= 31;
 80029d6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029da:	f1b2 011f 	subs.w	r1, r2, #31
 80029de:	63b9      	str	r1, [r7, #56]	; 0x38
 80029e0:	f143 33ff 	adc.w	r3, r3, #4294967295
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80029ea:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 80029ee:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f2c0 80af 	blt.w	8002b56 <calcdatetime+0x37a>
			rz += 31;
 80029f8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80029fc:	f112 011f 	adds.w	r1, r2, #31
 8002a00:	6339      	str	r1, [r7, #48]	; 0x30
 8002a02:	f143 0300 	adc.w	r3, r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
 8002a08:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002a0c:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}

		if (yf==2)
 8002a10:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d165      	bne.n	8002ae4 <calcdatetime+0x308>
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002a18:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <calcdatetime+0x2c8>)
 8002a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a22:	09da      	lsrs	r2, r3, #7
 8002a24:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002a28:	fb02 f303 	mul.w	r3, r2, r3
 8002a2c:	1acb      	subs	r3, r1, r3
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d013      	beq.n	8002a5c <calcdatetime+0x280>
 8002a34:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <calcdatetime+0x2c8>)
 8002a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a3e:	095a      	lsrs	r2, r3, #5
 8002a40:	2364      	movs	r3, #100	; 0x64
 8002a42:	fb02 f303 	mul.w	r3, r2, r3
 8002a46:	1acb      	subs	r3, r1, r3
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02e      	beq.n	8002aac <calcdatetime+0x2d0>
 8002a4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d127      	bne.n	8002aac <calcdatetime+0x2d0>
			{
				yd -= 29;
 8002a5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a60:	f1b2 011d 	subs.w	r1, r2, #29
 8002a64:	62b9      	str	r1, [r7, #40]	; 0x28
 8002a66:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8002a70:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 8002a74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	db6e      	blt.n	8002b5a <calcdatetime+0x37e>
				rz += 29;
 8002a7c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002a80:	f112 011d 	adds.w	r1, r2, #29
 8002a84:	6239      	str	r1, [r7, #32]
 8002a86:	f143 0300 	adc.w	r3, r3, #0
 8002a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a90:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
 8002a94:	e026      	b.n	8002ae4 <calcdatetime+0x308>
 8002a96:	bf00      	nop
 8002a98:	00015180 	.word	0x00015180
 8002a9c:	01e13380 	.word	0x01e13380
 8002aa0:	01e28500 	.word	0x01e28500
 8002aa4:	51eb851f 	.word	0x51eb851f
 8002aa8:	200001d8 	.word	0x200001d8
			}
			else
			{
				yd -= 28;
 8002aac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ab0:	f1b2 011c 	subs.w	r1, r2, #28
 8002ab4:	61b9      	str	r1, [r7, #24]
 8002ab6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002ac0:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
				if(yd<0)break;
 8002ac4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db48      	blt.n	8002b5e <calcdatetime+0x382>
				rz += 28;
 8002acc:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002ad0:	f112 011c 	adds.w	r1, r2, #28
 8002ad4:	6139      	str	r1, [r7, #16]
 8002ad6:	f143 0300 	adc.w	r3, r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002ae0:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
			}
		}
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 8002ae4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d00b      	beq.n	8002b04 <calcdatetime+0x328>
 8002aec:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002af0:	2b06      	cmp	r3, #6
 8002af2:	d007      	beq.n	8002b04 <calcdatetime+0x328>
 8002af4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002af8:	2b09      	cmp	r3, #9
 8002afa:	d003      	beq.n	8002b04 <calcdatetime+0x328>
 8002afc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002b00:	2b0b      	cmp	r3, #11
 8002b02:	d11b      	bne.n	8002b3c <calcdatetime+0x360>
		{
			yd -= 30;
 8002b04:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b08:	f1b2 011e 	subs.w	r1, r2, #30
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002b18:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
			if(yd<0)break;
 8002b1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db1e      	blt.n	8002b62 <calcdatetime+0x386>
			rz += 30;
 8002b24:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8002b28:	f112 011e 	adds.w	r1, r2, #30
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	f143 0300 	adc.w	r3, r3, #0
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b38:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
		}
		yf += 1;
 8002b3c:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002b40:	3301      	adds	r3, #1
 8002b42:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	while(yd>=28)
 8002b46:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002b4a:	2a1c      	cmp	r2, #28
 8002b4c:	f173 0300 	sbcs.w	r3, r3, #0
 8002b50:	f6bf af25 	bge.w	800299e <calcdatetime+0x1c2>
 8002b54:	e006      	b.n	8002b64 <calcdatetime+0x388>
			if(yd<0)break;
 8002b56:	bf00      	nop
 8002b58:	e004      	b.n	8002b64 <calcdatetime+0x388>
				if(yd<0)break;
 8002b5a:	bf00      	nop
 8002b5c:	e002      	b.n	8002b64 <calcdatetime+0x388>
				if(yd<0)break;
 8002b5e:	bf00      	nop
 8002b60:	e000      	b.n	8002b64 <calcdatetime+0x388>
			if(yd<0)break;
 8002b62:	bf00      	nop

	}
	Nowdatetime.mo=yf;
 8002b64:	4a2d      	ldr	r2, [pc, #180]	; (8002c1c <calcdatetime+0x440>)
 8002b66:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8002b6a:	7093      	strb	r3, [r2, #2]
	yr = total_d-d-rz;
 8002b6c:	f8b7 2080 	ldrh.w	r2, [r7, #128]	; 0x80
 8002b70:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	yr += 1;
 8002b82:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b86:	3301      	adds	r3, #1
 8002b88:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

	Nowdatetime.dd=yr;
 8002b8c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b22      	ldr	r3, [pc, #136]	; (8002c1c <calcdatetime+0x440>)
 8002b94:	70da      	strb	r2, [r3, #3]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 8002b96:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <calcdatetime+0x444>)
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f7fd fadc 	bl	800015c <__aeabi_uldivmod>
 8002ba4:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	Nowdatetime.hh = seconds/3600;
 8002ba8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bac:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	f7fd fad2 	bl	800015c <__aeabi_uldivmod>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <calcdatetime+0x440>)
 8002bc0:	711a      	strb	r2, [r3, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 8002bc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bc6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002bca:	f04f 0300 	mov.w	r3, #0
 8002bce:	f7fd fac5 	bl	800015c <__aeabi_uldivmod>
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f7fd fabd 	bl	800015c <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <calcdatetime+0x440>)
 8002bea:	715a      	strb	r2, [r3, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 8002bec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bf0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	f7fd fab0 	bl	800015c <__aeabi_uldivmod>
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f04f 023c 	mov.w	r2, #60	; 0x3c
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	f7fd faa8 	bl	800015c <__aeabi_uldivmod>
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	4b03      	ldr	r3, [pc, #12]	; (8002c1c <calcdatetime+0x440>)
 8002c10:	719a      	strb	r2, [r3, #6]

}
 8002c12:	bf00      	nop
 8002c14:	37b8      	adds	r7, #184	; 0xb8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c1c:	200001d8 	.word	0x200001d8
 8002c20:	00015180 	.word	0x00015180

08002c24 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4604      	mov	r4, r0
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	4603      	mov	r3, r0
 8002c38:	71bb      	strb	r3, [r7, #6]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	80bb      	strh	r3, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d902      	bls.n	8002c4e <socket+0x2a>
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	e0f2      	b.n	8002e34 <socket+0x210>
	switch(protocol)
 8002c4e:	79bb      	ldrb	r3, [r7, #6]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d005      	beq.n	8002c60 <socket+0x3c>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	dd11      	ble.n	8002c7c <socket+0x58>
 8002c58:	3b02      	subs	r3, #2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d80e      	bhi.n	8002c7c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002c5e:	e011      	b.n	8002c84 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	2204      	movs	r2, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c6c:	f7fe f9fc 	bl	8001068 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <socket+0x5e>
 8002c76:	f06f 0302 	mvn.w	r3, #2
 8002c7a:	e0db      	b.n	8002e34 <socket+0x210>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002c7c:	f06f 0304 	mvn.w	r3, #4
 8002c80:	e0d8      	b.n	8002e34 <socket+0x210>
	    break;
 8002c82:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <socket+0x70>
 8002c8e:	f06f 0305 	mvn.w	r3, #5
 8002c92:	e0cf      	b.n	8002e34 <socket+0x210>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d025      	beq.n	8002ce6 <socket+0xc2>
	{
   	switch(protocol)
 8002c9a:	79bb      	ldrb	r3, [r7, #6]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d002      	beq.n	8002ca6 <socket+0x82>
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d008      	beq.n	8002cb6 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002ca4:	e024      	b.n	8002cf0 <socket+0xcc>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11c      	bne.n	8002cea <socket+0xc6>
 8002cb0:	f06f 0305 	mvn.w	r3, #5
 8002cb4:	e0be      	b.n	8002e34 <socket+0x210>
   	      if(flag & SF_IGMP_VER2)
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d006      	beq.n	8002cce <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db02      	blt.n	8002cce <socket+0xaa>
 8002cc8:	f06f 0305 	mvn.w	r3, #5
 8002ccc:	e0b2      	b.n	8002e34 <socket+0x210>
      	      if(flag & SF_UNI_BLOCK)
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00a      	beq.n	8002cee <socket+0xca>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002cd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	db06      	blt.n	8002cee <socket+0xca>
 8002ce0:	f06f 0305 	mvn.w	r3, #5
 8002ce4:	e0a6      	b.n	8002e34 <socket+0x210>
   	}
   }
 8002ce6:	bf00      	nop
 8002ce8:	e002      	b.n	8002cf0 <socket+0xcc>
   	      break;
 8002cea:	bf00      	nop
 8002cec:	e000      	b.n	8002cf0 <socket+0xcc>
   	      break;
 8002cee:	bf00      	nop
	close(sn);
 8002cf0:	79fb      	ldrb	r3, [r7, #7]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f8ac 	bl	8002e50 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d06:	f023 030f 	bic.w	r3, r3, #15
 8002d0a:	b25a      	sxtb	r2, r3
 8002d0c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4619      	mov	r1, r3
 8002d18:	f7fe f958 	bl	8000fcc <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d110      	bne.n	8002d44 <socket+0x120>
	{
	   port = sock_any_port++;
 8002d22:	4b46      	ldr	r3, [pc, #280]	; (8002e3c <socket+0x218>)
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	b291      	uxth	r1, r2
 8002d2a:	4a44      	ldr	r2, [pc, #272]	; (8002e3c <socket+0x218>)
 8002d2c:	8011      	strh	r1, [r2, #0]
 8002d2e:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002d30:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <socket+0x218>)
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d103      	bne.n	8002d44 <socket+0x120>
 8002d3c:	4b3f      	ldr	r3, [pc, #252]	; (8002e3c <socket+0x218>)
 8002d3e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002d42:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	3301      	adds	r3, #1
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d50:	461a      	mov	r2, r3
 8002d52:	88bb      	ldrh	r3, [r7, #4]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f7fe f935 	bl	8000fcc <WIZCHIP_WRITE>
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d6e:	461a      	mov	r2, r3
 8002d70:	88bb      	ldrh	r3, [r7, #4]
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	4619      	mov	r1, r3
 8002d76:	4610      	mov	r0, r2
 8002d78:	f7fe f928 	bl	8000fcc <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	3301      	adds	r3, #1
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe f91e 	bl	8000fcc <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002d90:	bf00      	nop
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	3301      	adds	r3, #1
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fe f8c8 	bl	8000f34 <WIZCHIP_READ>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f3      	bne.n	8002d92 <socket+0x16e>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	2201      	movs	r2, #1
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	b21b      	sxth	r3, r3
 8002db4:	43db      	mvns	r3, r3
 8002db6:	b21a      	sxth	r2, r3
 8002db8:	4b21      	ldr	r3, [pc, #132]	; (8002e40 <socket+0x21c>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	b21b      	sxth	r3, r3
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	; (8002e40 <socket+0x21c>)
 8002dc6:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	f003 0201 	and.w	r2, r3, #1
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	b21a      	sxth	r2, r3
 8002dd6:	4b1a      	ldr	r3, [pc, #104]	; (8002e40 <socket+0x21c>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b21b      	sxth	r3, r3
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b21b      	sxth	r3, r3
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	4b17      	ldr	r3, [pc, #92]	; (8002e40 <socket+0x21c>)
 8002de4:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	2201      	movs	r2, #1
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	b21b      	sxth	r3, r3
 8002df0:	43db      	mvns	r3, r3
 8002df2:	b21a      	sxth	r2, r3
 8002df4:	4b13      	ldr	r3, [pc, #76]	; (8002e44 <socket+0x220>)
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b21b      	sxth	r3, r3
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	4b10      	ldr	r3, [pc, #64]	; (8002e44 <socket+0x220>)
 8002e02:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	4a10      	ldr	r2, [pc, #64]	; (8002e48 <socket+0x224>)
 8002e08:	2100      	movs	r1, #0
 8002e0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	4a0e      	ldr	r2, [pc, #56]	; (8002e4c <socket+0x228>)
 8002e12:	2100      	movs	r1, #0
 8002e14:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8002e16:	bf00      	nop
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f885 	bl	8000f34 <WIZCHIP_READ>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f3      	beq.n	8002e18 <socket+0x1f4>
   return (int8_t)sn;
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd90      	pop	{r4, r7, pc}
 8002e3c:	2000001c 	.word	0x2000001c
 8002e40:	20000218 	.word	0x20000218
 8002e44:	2000021a 	.word	0x2000021a
 8002e48:	2000021c 	.word	0x2000021c
 8002e4c:	2000022c 	.word	0x2000022c

08002e50 <close>:

int8_t close(uint8_t sn)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	4603      	mov	r3, r0
 8002e58:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8002e5a:	79fb      	ldrb	r3, [r7, #7]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d902      	bls.n	8002e66 <close+0x16>
 8002e60:	f04f 33ff 	mov.w	r3, #4294967295
 8002e64:	e055      	b.n	8002f12 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e72:	2110      	movs	r1, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fe f8a9 	bl	8000fcc <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8002e7a:	bf00      	nop
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	3301      	adds	r3, #1
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fe f853 	bl	8000f34 <WIZCHIP_READ>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f3      	bne.n	8002e7c <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3301      	adds	r3, #1
 8002e9a:	00db      	lsls	r3, r3, #3
 8002e9c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002ea0:	211f      	movs	r1, #31
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f892 	bl	8000fcc <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	b21b      	sxth	r3, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	b21a      	sxth	r2, r3
 8002eb6:	4b19      	ldr	r3, [pc, #100]	; (8002f1c <close+0xcc>)
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <close+0xcc>)
 8002ec4:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8002ec6:	79fb      	ldrb	r3, [r7, #7]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	b21a      	sxth	r2, r3
 8002ed4:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <close+0xd0>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	4013      	ands	r3, r2
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <close+0xd0>)
 8002ee2:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	4a0f      	ldr	r2, [pc, #60]	; (8002f24 <close+0xd4>)
 8002ee8:	2100      	movs	r1, #0
 8002eea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <close+0xd8>)
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002ef6:	bf00      	nop
 8002ef8:	79fb      	ldrb	r3, [r7, #7]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	3301      	adds	r3, #1
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fe f815 	bl	8000f34 <WIZCHIP_READ>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1f3      	bne.n	8002ef8 <close+0xa8>
	return SOCK_OK;
 8002f10:	2301      	movs	r3, #1
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	20000218 	.word	0x20000218
 8002f20:	2000021a 	.word	0x2000021a
 8002f24:	2000021c 	.word	0x2000021c
 8002f28:	2000022c 	.word	0x2000022c

08002f2c <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607b      	str	r3, [r7, #4]
 8002f36:	4603      	mov	r3, r0
 8002f38:	73fb      	strb	r3, [r7, #15]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d902      	bls.n	8002f52 <sendto+0x26>
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f50:	e11b      	b.n	800318a <sendto+0x25e>
   switch(getSn_MR(sn) & 0x0F)
 8002f52:	7bfb      	ldrb	r3, [r7, #15]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	3301      	adds	r3, #1
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7fd ffea 	bl	8000f34 <WIZCHIP_READ>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	3b02      	subs	r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d902      	bls.n	8002f72 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8002f6c:	f06f 0304 	mvn.w	r3, #4
 8002f70:	e10b      	b.n	800318a <sendto+0x25e>
         break;
 8002f72:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8002f74:	89bb      	ldrh	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <sendto+0x54>
 8002f7a:	f06f 030d 	mvn.w	r3, #13
 8002f7e:	e104      	b.n	800318a <sendto+0x25e>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	3201      	adds	r2, #1
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	4413      	add	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	3202      	adds	r2, #2
 8002f9c:	7812      	ldrb	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	021b      	lsls	r3, r3, #8
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	3203      	adds	r2, #3
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10e      	bne.n	8002fd4 <sendto+0xa8>
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	3301      	adds	r3, #1
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fd ffb8 	bl	8000f34 <WIZCHIP_READ>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d002      	beq.n	8002fd4 <sendto+0xa8>
 8002fce:	f06f 030b 	mvn.w	r3, #11
 8002fd2:	e0da      	b.n	800318a <sendto+0x25e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002fd4:	8c3b      	ldrh	r3, [r7, #32]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <sendto+0xcc>
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	3301      	adds	r3, #1
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd ffa6 	bl	8000f34 <WIZCHIP_READ>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d002      	beq.n	8002ff8 <sendto+0xcc>
 8002ff2:	f06f 030a 	mvn.w	r3, #10
 8002ff6:	e0c8      	b.n	800318a <sendto+0x25e>
   tmp = getSn_SR(sn);
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd ff95 	bl	8000f34 <WIZCHIP_READ>
 800300a:	4603      	mov	r3, r0
 800300c:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b42      	cmp	r3, #66	; 0x42
 8003012:	d008      	beq.n	8003026 <sendto+0xfa>
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b22      	cmp	r3, #34	; 0x22
 8003018:	d005      	beq.n	8003026 <sendto+0xfa>
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	2b32      	cmp	r3, #50	; 0x32
 800301e:	d002      	beq.n	8003026 <sendto+0xfa>
 8003020:	f06f 0306 	mvn.w	r3, #6
 8003024:	e0b1      	b.n	800318a <sendto+0x25e>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	3301      	adds	r3, #1
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003032:	2204      	movs	r2, #4
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe f876 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3301      	adds	r3, #1
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	461a      	mov	r2, r3
 800304a:	8c3b      	ldrh	r3, [r7, #32]
 800304c:	0a1b      	lsrs	r3, r3, #8
 800304e:	b29b      	uxth	r3, r3
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f7fd ffb9 	bl	8000fcc <WIZCHIP_WRITE>
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	3301      	adds	r3, #1
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003066:	461a      	mov	r2, r3
 8003068:	8c3b      	ldrh	r3, [r7, #32]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	4619      	mov	r1, r3
 800306e:	4610      	mov	r0, r2
 8003070:	f7fd ffac 	bl	8000fcc <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3301      	adds	r3, #1
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003080:	4618      	mov	r0, r3
 8003082:	f7fd ff57 	bl	8000f34 <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	b29b      	uxth	r3, r3
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800308e:	89ba      	ldrh	r2, [r7, #12]
 8003090:	8abb      	ldrh	r3, [r7, #20]
 8003092:	429a      	cmp	r2, r3
 8003094:	d901      	bls.n	800309a <sendto+0x16e>
 8003096:	8abb      	ldrh	r3, [r7, #20]
 8003098:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe f8a3 	bl	80011e8 <getSn_TX_FSR>
 80030a2:	4603      	mov	r3, r0
 80030a4:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	3301      	adds	r3, #1
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fd ff3e 	bl	8000f34 <WIZCHIP_READ>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d102      	bne.n	80030c4 <sendto+0x198>
 80030be:	f06f 0303 	mvn.w	r3, #3
 80030c2:	e062      	b.n	800318a <sendto+0x25e>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80030c4:	4b33      	ldr	r3, [pc, #204]	; (8003194 <sendto+0x268>)
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	fa42 f303 	asr.w	r3, r2, r3
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <sendto+0x1b8>
 80030d8:	89ba      	ldrh	r2, [r7, #12]
 80030da:	8abb      	ldrh	r3, [r7, #20]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d901      	bls.n	80030e4 <sendto+0x1b8>
 80030e0:	2300      	movs	r3, #0
 80030e2:	e052      	b.n	800318a <sendto+0x25e>
      if(len <= freesize) break;
 80030e4:	89ba      	ldrh	r2, [r7, #12]
 80030e6:	8abb      	ldrh	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d900      	bls.n	80030ee <sendto+0x1c2>
      freesize = getSn_TX_FSR(sn);
 80030ec:	e7d5      	b.n	800309a <sendto+0x16e>
      if(len <= freesize) break;
 80030ee:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80030f0:	89ba      	ldrh	r2, [r7, #12]
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe f90c 	bl	8001314 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	3301      	adds	r3, #1
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003108:	2120      	movs	r1, #32
 800310a:	4618      	mov	r0, r3
 800310c:	f7fd ff5e 	bl	8000fcc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003110:	bf00      	nop
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3301      	adds	r3, #1
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800311e:	4618      	mov	r0, r3
 8003120:	f7fd ff08 	bl	8000f34 <WIZCHIP_READ>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f3      	bne.n	8003112 <sendto+0x1e6>
   while(1)
   {
      tmp = getSn_IR(sn);
 800312a:	7bfb      	ldrb	r3, [r7, #15]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3301      	adds	r3, #1
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd fefc 	bl	8000f34 <WIZCHIP_READ>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 031f 	and.w	r3, r3, #31
 8003142:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <sendto+0x23c>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	3301      	adds	r3, #1
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800315a:	2110      	movs	r1, #16
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd ff35 	bl	8000fcc <WIZCHIP_WRITE>
         break;
 8003162:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003164:	89bb      	ldrh	r3, [r7, #12]
 8003166:	e010      	b.n	800318a <sendto+0x25e>
      else if(tmp & Sn_IR_TIMEOUT)
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0db      	beq.n	800312a <sendto+0x1fe>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	3301      	adds	r3, #1
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800317e:	2108      	movs	r1, #8
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd ff23 	bl	8000fcc <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003186:	f06f 030c 	mvn.w	r3, #12
}
 800318a:	4618      	mov	r0, r3
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000218 	.word	0x20000218

08003198 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b088      	sub	sp, #32
 800319c:	af00      	add	r7, sp, #0
 800319e:	60b9      	str	r1, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]
 80031a6:	4613      	mov	r3, r2
 80031a8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d902      	bls.n	80031ba <recvfrom+0x22>
 80031b4:	f04f 33ff 	mov.w	r3, #4294967295
 80031b8:	e1d4      	b.n	8003564 <recvfrom+0x3cc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80031ba:	7bfb      	ldrb	r3, [r7, #15]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	3301      	adds	r3, #1
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd feb6 	bl	8000f34 <WIZCHIP_READ>
 80031c8:	4603      	mov	r3, r0
 80031ca:	777b      	strb	r3, [r7, #29]
 80031cc:	7f7b      	ldrb	r3, [r7, #29]
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	3b02      	subs	r3, #2
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d902      	bls.n	80031de <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80031d8:	f06f 0304 	mvn.w	r3, #4
 80031dc:	e1c2      	b.n	8003564 <recvfrom+0x3cc>
         break;
 80031de:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80031e0:	89bb      	ldrh	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <recvfrom+0x54>
 80031e6:	f06f 030d 	mvn.w	r3, #13
 80031ea:	e1bb      	b.n	8003564 <recvfrom+0x3cc>
   if(sock_remained_size[sn] == 0)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	4a88      	ldr	r2, [pc, #544]	; (8003410 <recvfrom+0x278>)
 80031f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d128      	bne.n	800324a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe f83f 	bl	800127e <getSn_RX_RSR>
 8003200:	4603      	mov	r3, r0
 8003202:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	3301      	adds	r3, #1
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd fe8f 	bl	8000f34 <WIZCHIP_READ>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d102      	bne.n	8003222 <recvfrom+0x8a>
 800321c:	f06f 0303 	mvn.w	r3, #3
 8003220:	e1a0      	b.n	8003564 <recvfrom+0x3cc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003222:	4b7c      	ldr	r3, [pc, #496]	; (8003414 <recvfrom+0x27c>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	7bfb      	ldrb	r3, [r7, #15]
 800322a:	fa42 f303 	asr.w	r3, r2, r3
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d004      	beq.n	8003240 <recvfrom+0xa8>
 8003236:	8bfb      	ldrh	r3, [r7, #30]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <recvfrom+0xa8>
 800323c:	2300      	movs	r3, #0
 800323e:	e191      	b.n	8003564 <recvfrom+0x3cc>
         if(pack_len != 0) break;
 8003240:	8bfb      	ldrh	r3, [r7, #30]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d100      	bne.n	8003248 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003246:	e7d7      	b.n	80031f8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003248:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800324a:	7f7b      	ldrb	r3, [r7, #29]
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	2b04      	cmp	r3, #4
 8003252:	d079      	beq.n	8003348 <recvfrom+0x1b0>
 8003254:	2b04      	cmp	r3, #4
 8003256:	f300 8142 	bgt.w	80034de <recvfrom+0x346>
 800325a:	2b02      	cmp	r3, #2
 800325c:	d003      	beq.n	8003266 <recvfrom+0xce>
 800325e:	2b03      	cmp	r3, #3
 8003260:	f000 80dc 	beq.w	800341c <recvfrom+0x284>
 8003264:	e13b      	b.n	80034de <recvfrom+0x346>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003266:	7bfb      	ldrb	r3, [r7, #15]
 8003268:	4a69      	ldr	r2, [pc, #420]	; (8003410 <recvfrom+0x278>)
 800326a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d152      	bne.n	8003318 <recvfrom+0x180>
	      {
   			wiz_recv_data(sn, head, 8);
 8003272:	f107 0114 	add.w	r1, r7, #20
 8003276:	7bfb      	ldrb	r3, [r7, #15]
 8003278:	2208      	movs	r2, #8
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f8a6 	bl	80013cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	3301      	adds	r3, #1
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd fe9c 	bl	8000fcc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003294:	bf00      	nop
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3301      	adds	r3, #1
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd fe46 	bl	8000f34 <WIZCHIP_READ>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1f3      	bne.n	8003296 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80032ae:	7d3a      	ldrb	r2, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3301      	adds	r3, #1
 80032b8:	7d7a      	ldrb	r2, [r7, #21]
 80032ba:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3302      	adds	r3, #2
 80032c0:	7dba      	ldrb	r2, [r7, #22]
 80032c2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3303      	adds	r3, #3
 80032c8:	7dfa      	ldrb	r2, [r7, #23]
 80032ca:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80032cc:	7e3b      	ldrb	r3, [r7, #24]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	021b      	lsls	r3, r3, #8
 80032da:	b29a      	uxth	r2, r3
 80032dc:	7e7b      	ldrb	r3, [r7, #25]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80032e8:	7eba      	ldrb	r2, [r7, #26]
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	b291      	uxth	r1, r2
 80032ee:	4a48      	ldr	r2, [pc, #288]	; (8003410 <recvfrom+0x278>)
 80032f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	4a46      	ldr	r2, [pc, #280]	; (8003410 <recvfrom+0x278>)
 80032f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	b299      	uxth	r1, r3
 8003300:	7efb      	ldrb	r3, [r7, #27]
 8003302:	b29a      	uxth	r2, r3
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	440a      	add	r2, r1
 8003308:	b291      	uxth	r1, r2
 800330a:	4a41      	ldr	r2, [pc, #260]	; (8003410 <recvfrom+0x278>)
 800330c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4a41      	ldr	r2, [pc, #260]	; (8003418 <recvfrom+0x280>)
 8003314:	2180      	movs	r1, #128	; 0x80
 8003316:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	4a3d      	ldr	r2, [pc, #244]	; (8003410 <recvfrom+0x278>)
 800331c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003320:	89ba      	ldrh	r2, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	d202      	bcs.n	800332c <recvfrom+0x194>
 8003326:	89bb      	ldrh	r3, [r7, #12]
 8003328:	83fb      	strh	r3, [r7, #30]
 800332a:	e004      	b.n	8003336 <recvfrom+0x19e>
			else pack_len = sock_remained_size[sn];
 800332c:	7bfb      	ldrb	r3, [r7, #15]
 800332e:	4a38      	ldr	r2, [pc, #224]	; (8003410 <recvfrom+0x278>)
 8003330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003334:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003336:	8bfb      	ldrh	r3, [r7, #30]
 8003338:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800333a:	8bfa      	ldrh	r2, [r7, #30]
 800333c:	7bfb      	ldrb	r3, [r7, #15]
 800333e:	68b9      	ldr	r1, [r7, #8]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe f843 	bl	80013cc <wiz_recv_data>
			break;
 8003346:	e0d6      	b.n	80034f6 <recvfrom+0x35e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003348:	7bfb      	ldrb	r3, [r7, #15]
 800334a:	4a31      	ldr	r2, [pc, #196]	; (8003410 <recvfrom+0x278>)
 800334c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d146      	bne.n	80033e2 <recvfrom+0x24a>
	      {
   			wiz_recv_data(sn, head, 2);
 8003354:	f107 0114 	add.w	r1, r7, #20
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	2202      	movs	r2, #2
 800335c:	4618      	mov	r0, r3
 800335e:	f7fe f835 	bl	80013cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003362:	7bfb      	ldrb	r3, [r7, #15]
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	3301      	adds	r3, #1
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fe2b 	bl	8000fcc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003376:	bf00      	nop
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	3301      	adds	r3, #1
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fdd5 	bl	8000f34 <WIZCHIP_READ>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1f3      	bne.n	8003378 <recvfrom+0x1e0>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8003390:	7d3a      	ldrb	r2, [r7, #20]
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	b291      	uxth	r1, r2
 8003396:	4a1e      	ldr	r2, [pc, #120]	; (8003410 <recvfrom+0x278>)
 8003398:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <recvfrom+0x278>)
 80033a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	7d7b      	ldrb	r3, [r7, #21]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4413      	add	r3, r2
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	3a02      	subs	r2, #2
 80033b4:	b291      	uxth	r1, r2
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <recvfrom+0x278>)
 80033b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <recvfrom+0x278>)
 80033c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c4:	f240 52ea 	movw	r2, #1514	; 0x5ea
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d906      	bls.n	80033da <recvfrom+0x242>
   			{
   			   close(sn);
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fd3e 	bl	8002e50 <close>
   			   return SOCKFATAL_PACKLEN;
 80033d4:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80033d8:	e0c4      	b.n	8003564 <recvfrom+0x3cc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	4a0e      	ldr	r2, [pc, #56]	; (8003418 <recvfrom+0x280>)
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	4a0a      	ldr	r2, [pc, #40]	; (8003410 <recvfrom+0x278>)
 80033e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033ea:	89ba      	ldrh	r2, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d202      	bcs.n	80033f6 <recvfrom+0x25e>
 80033f0:	89bb      	ldrh	r3, [r7, #12]
 80033f2:	83fb      	strh	r3, [r7, #30]
 80033f4:	e004      	b.n	8003400 <recvfrom+0x268>
			else pack_len = sock_remained_size[sn];
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	4a05      	ldr	r2, [pc, #20]	; (8003410 <recvfrom+0x278>)
 80033fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033fe:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 8003400:	8bfa      	ldrh	r2, [r7, #30]
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd ffe0 	bl	80013cc <wiz_recv_data>
		   break;
 800340c:	e073      	b.n	80034f6 <recvfrom+0x35e>
 800340e:	bf00      	nop
 8003410:	2000021c 	.word	0x2000021c
 8003414:	20000218 	.word	0x20000218
 8003418:	2000022c 	.word	0x2000022c
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4a53      	ldr	r2, [pc, #332]	; (800356c <recvfrom+0x3d4>)
 8003420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d144      	bne.n	80034b2 <recvfrom+0x31a>
		   {
   			wiz_recv_data(sn, head, 6);
 8003428:	f107 0114 	add.w	r1, r7, #20
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	2206      	movs	r2, #6
 8003430:	4618      	mov	r0, r3
 8003432:	f7fd ffcb 	bl	80013cc <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003436:	7bfb      	ldrb	r3, [r7, #15]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	3301      	adds	r3, #1
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd fdc1 	bl	8000fcc <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800344a:	bf00      	nop
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	3301      	adds	r3, #1
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003458:	4618      	mov	r0, r3
 800345a:	f7fd fd6b 	bl	8000f34 <WIZCHIP_READ>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f3      	bne.n	800344c <recvfrom+0x2b4>
   			addr[0] = head[0];
 8003464:	7d3a      	ldrb	r2, [r7, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	3301      	adds	r3, #1
 800346e:	7d7a      	ldrb	r2, [r7, #21]
 8003470:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3302      	adds	r3, #2
 8003476:	7dba      	ldrb	r2, [r7, #22]
 8003478:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3303      	adds	r3, #3
 800347e:	7dfa      	ldrb	r2, [r7, #23]
 8003480:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003482:	7e3a      	ldrb	r2, [r7, #24]
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	b291      	uxth	r1, r2
 8003488:	4a38      	ldr	r2, [pc, #224]	; (800356c <recvfrom+0x3d4>)
 800348a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	4a36      	ldr	r2, [pc, #216]	; (800356c <recvfrom+0x3d4>)
 8003492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003496:	021b      	lsls	r3, r3, #8
 8003498:	b299      	uxth	r1, r3
 800349a:	7e7b      	ldrb	r3, [r7, #25]
 800349c:	b29a      	uxth	r2, r3
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	440a      	add	r2, r1
 80034a2:	b291      	uxth	r1, r2
 80034a4:	4a31      	ldr	r2, [pc, #196]	; (800356c <recvfrom+0x3d4>)
 80034a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 80034aa:	7bfb      	ldrb	r3, [r7, #15]
 80034ac:	4a30      	ldr	r2, [pc, #192]	; (8003570 <recvfrom+0x3d8>)
 80034ae:	2180      	movs	r1, #128	; 0x80
 80034b0:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	4a2d      	ldr	r2, [pc, #180]	; (800356c <recvfrom+0x3d4>)
 80034b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ba:	89ba      	ldrh	r2, [r7, #12]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d202      	bcs.n	80034c6 <recvfrom+0x32e>
 80034c0:	89bb      	ldrh	r3, [r7, #12]
 80034c2:	83fb      	strh	r3, [r7, #30]
 80034c4:	e004      	b.n	80034d0 <recvfrom+0x338>
			else pack_len = sock_remained_size[sn];
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	4a28      	ldr	r2, [pc, #160]	; (800356c <recvfrom+0x3d4>)
 80034ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80034ce:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80034d0:	8bfa      	ldrh	r2, [r7, #30]
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd ff78 	bl	80013cc <wiz_recv_data>
			break;
 80034dc:	e00b      	b.n	80034f6 <recvfrom+0x35e>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 80034de:	8bfa      	ldrh	r2, [r7, #30]
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	4611      	mov	r1, r2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd ffcd 	bl	8001484 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	491f      	ldr	r1, [pc, #124]	; (800356c <recvfrom+0x3d4>)
 80034ee:	8bfa      	ldrh	r2, [r7, #30]
 80034f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 80034f4:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3301      	adds	r3, #1
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003502:	2140      	movs	r1, #64	; 0x40
 8003504:	4618      	mov	r0, r3
 8003506:	f7fd fd61 	bl	8000fcc <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 800350a:	bf00      	nop
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	3301      	adds	r3, #1
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003518:	4618      	mov	r0, r3
 800351a:	f7fd fd0b 	bl	8000f34 <WIZCHIP_READ>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1f3      	bne.n	800350c <recvfrom+0x374>
	sock_remained_size[sn] -= pack_len;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	4a11      	ldr	r2, [pc, #68]	; (800356c <recvfrom+0x3d4>)
 8003528:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	8bfa      	ldrh	r2, [r7, #30]
 8003530:	1a8a      	subs	r2, r1, r2
 8003532:	b291      	uxth	r1, r2
 8003534:	4a0d      	ldr	r2, [pc, #52]	; (800356c <recvfrom+0x3d4>)
 8003536:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	4a0b      	ldr	r2, [pc, #44]	; (800356c <recvfrom+0x3d4>)
 800353e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <recvfrom+0x3c2>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003546:	7bfb      	ldrb	r3, [r7, #15]
 8003548:	4a09      	ldr	r2, [pc, #36]	; (8003570 <recvfrom+0x3d8>)
 800354a:	5cd2      	ldrb	r2, [r2, r3]
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	b2d1      	uxtb	r1, r2
 8003554:	4a06      	ldr	r2, [pc, #24]	; (8003570 <recvfrom+0x3d8>)
 8003556:	54d1      	strb	r1, [r2, r3]
 8003558:	e003      	b.n	8003562 <recvfrom+0x3ca>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	4a04      	ldr	r2, [pc, #16]	; (8003570 <recvfrom+0x3d8>)
 800355e:	2100      	movs	r1, #0
 8003560:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003562:	8bfb      	ldrh	r3, [r7, #30]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	2000021c 	.word	0x2000021c
 8003570:	2000022c 	.word	0x2000022c

08003574 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
 8003584:	bf00      	nop
 8003586:	46bd      	mov	sp, r7
 8003588:	bc80      	pop	{r7}
 800358a:	4770      	bx	lr

0800358c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	bc80      	pop	{r7}
 8003596:	4770      	bx	lr

08003598 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
 800359c:	bf00      	nop
 800359e:	46bd      	mov	sp, r7
 80035a0:	bc80      	pop	{r7}
 80035a2:	4770      	bx	lr

080035a4 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr

080035bc <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	70fb      	strb	r3, [r7, #3]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
 80035dc:	2300      	movs	r3, #0
 80035de:	4618      	mov	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	807b      	strh	r3, [r7, #2]
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	460b      	mov	r3, r1
 800361a:	807b      	strh	r3, [r7, #2]
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	bc80      	pop	{r7}
 8003624:	4770      	bx	lr
	...

08003628 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <reg_wizchip_cs_cbfunc+0x16>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 800363e:	4b09      	ldr	r3, [pc, #36]	; (8003664 <reg_wizchip_cs_cbfunc+0x3c>)
 8003640:	4a09      	ldr	r2, [pc, #36]	; (8003668 <reg_wizchip_cs_cbfunc+0x40>)
 8003642:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003644:	4b07      	ldr	r3, [pc, #28]	; (8003664 <reg_wizchip_cs_cbfunc+0x3c>)
 8003646:	4a09      	ldr	r2, [pc, #36]	; (800366c <reg_wizchip_cs_cbfunc+0x44>)
 8003648:	619a      	str	r2, [r3, #24]
 800364a:	e006      	b.n	800365a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 800364c:	4a05      	ldr	r2, [pc, #20]	; (8003664 <reg_wizchip_cs_cbfunc+0x3c>)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003652:	4a04      	ldr	r2, [pc, #16]	; (8003664 <reg_wizchip_cs_cbfunc+0x3c>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	6193      	str	r3, [r2, #24]
   }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr
 8003664:	20000020 	.word	0x20000020
 8003668:	0800358d 	.word	0x0800358d
 800366c:	08003599 	.word	0x08003599

08003670 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800367a:	bf00      	nop
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <reg_wizchip_spi_cbfunc+0x4c>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f9      	beq.n	800367c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <reg_wizchip_spi_cbfunc+0x24>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <reg_wizchip_spi_cbfunc+0x4c>)
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <reg_wizchip_spi_cbfunc+0x50>)
 8003698:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800369a:	4b08      	ldr	r3, [pc, #32]	; (80036bc <reg_wizchip_spi_cbfunc+0x4c>)
 800369c:	4a09      	ldr	r2, [pc, #36]	; (80036c4 <reg_wizchip_spi_cbfunc+0x54>)
 800369e:	621a      	str	r2, [r3, #32]
 80036a0:	e006      	b.n	80036b0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 80036a2:	4a06      	ldr	r2, [pc, #24]	; (80036bc <reg_wizchip_spi_cbfunc+0x4c>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 80036a8:	4a04      	ldr	r2, [pc, #16]	; (80036bc <reg_wizchip_spi_cbfunc+0x4c>)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6213      	str	r3, [r2, #32]
   }
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop
 80036bc:	20000020 	.word	0x20000020
 80036c0:	080035d9 	.word	0x080035d9
 80036c4:	080035e7 	.word	0x080035e7

080036c8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80036d2:	bf00      	nop
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036d6:	881b      	ldrh	r3, [r3, #0]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f9      	beq.n	80036d4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d002      	beq.n	80036ec <reg_wizchip_spiburst_cbfunc+0x24>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d106      	bne.n	80036fa <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <reg_wizchip_spiburst_cbfunc+0x50>)
 80036f0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036f4:	4a09      	ldr	r2, [pc, #36]	; (800371c <reg_wizchip_spiburst_cbfunc+0x54>)
 80036f6:	629a      	str	r2, [r3, #40]	; 0x28
 80036f8:	e006      	b.n	8003708 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80036fa:	4a06      	ldr	r2, [pc, #24]	; (8003714 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003700:	4a04      	ldr	r2, [pc, #16]	; (8003714 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000020 	.word	0x20000020
 8003718:	080035fb 	.word	0x080035fb
 800371c:	08003611 	.word	0x08003611

08003720 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	6039      	str	r1, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	2b0f      	cmp	r3, #15
 800373c:	f200 80c7 	bhi.w	80038ce <ctlwizchip+0x1ae>
 8003740:	a201      	add	r2, pc, #4	; (adr r2, 8003748 <ctlwizchip+0x28>)
 8003742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003746:	bf00      	nop
 8003748:	08003789 	.word	0x08003789
 800374c:	0800378f 	.word	0x0800378f
 8003750:	080037bb 	.word	0x080037bb
 8003754:	080037af 	.word	0x080037af
 8003758:	080037c9 	.word	0x080037c9
 800375c:	080037d5 	.word	0x080037d5
 8003760:	080037e3 	.word	0x080037e3
 8003764:	08003809 	.word	0x08003809
 8003768:	0800382f 	.word	0x0800382f
 800376c:	08003873 	.word	0x08003873
 8003770:	08003879 	.word	0x08003879
 8003774:	08003881 	.word	0x08003881
 8003778:	080038d5 	.word	0x080038d5
 800377c:	08003889 	.word	0x08003889
 8003780:	08003897 	.word	0x08003897
 8003784:	080038b3 	.word	0x080038b3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003788:	f000 f8ea 	bl	8003960 <wizchip_sw_reset>
         break;
 800378c:	e0a3      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d004      	beq.n	800379e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	3308      	adds	r3, #8
 800379c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f927 	bl	80039f8 <wizchip_init>
 80037aa:	4603      	mov	r3, r0
 80037ac:	e094      	b.n	80038d8 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 f9ac 	bl	8003b10 <wizchip_clrinterrupt>
         break;
 80037b8:	e08d      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80037ba:	f000 f9dd 	bl	8003b78 <wizchip_getinterrupt>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	801a      	strh	r2, [r3, #0]
         break;
 80037c6:	e086      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 f9f8 	bl	8003bc2 <wizchip_setinterruptmask>
         break;         
 80037d2:	e080      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80037d4:	f000 fa10 	bl	8003bf8 <wizchip_getinterruptmask>
 80037d8:	4603      	mov	r3, r0
 80037da:	461a      	mov	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	801a      	strh	r2, [r3, #0]
         break;
 80037e0:	e079      	b.n	80038d6 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	0a1b      	lsrs	r3, r3, #8
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	4619      	mov	r1, r3
 80037ee:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80037f2:	f7fd fbeb 	bl	8000fcc <WIZCHIP_WRITE>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4619      	mov	r1, r3
 80037fe:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8003802:	f7fd fbe3 	bl	8000fcc <WIZCHIP_WRITE>
         break;
 8003806:	e066      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8003808:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 800380c:	f7fd fb92 	bl	8000f34 <WIZCHIP_READ>
 8003810:	4603      	mov	r3, r0
 8003812:	b29b      	uxth	r3, r3
 8003814:	021b      	lsls	r3, r3, #8
 8003816:	b29c      	uxth	r4, r3
 8003818:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800381c:	f7fd fb8a 	bl	8000f34 <WIZCHIP_READ>
 8003820:	4603      	mov	r3, r0
 8003822:	b29b      	uxth	r3, r3
 8003824:	4423      	add	r3, r4
 8003826:	b29a      	uxth	r2, r3
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	801a      	strh	r2, [r3, #0]
         break;
 800382c:	e053      	b.n	80038d6 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 800382e:	4b2c      	ldr	r3, [pc, #176]	; (80038e0 <ctlwizchip+0x1c0>)
 8003830:	789a      	ldrb	r2, [r3, #2]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	3301      	adds	r3, #1
 800383a:	4a29      	ldr	r2, [pc, #164]	; (80038e0 <ctlwizchip+0x1c0>)
 800383c:	78d2      	ldrb	r2, [r2, #3]
 800383e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	3302      	adds	r3, #2
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <ctlwizchip+0x1c0>)
 8003846:	7912      	ldrb	r2, [r2, #4]
 8003848:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3303      	adds	r3, #3
 800384e:	4a24      	ldr	r2, [pc, #144]	; (80038e0 <ctlwizchip+0x1c0>)
 8003850:	7952      	ldrb	r2, [r2, #5]
 8003852:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	3304      	adds	r3, #4
 8003858:	4a21      	ldr	r2, [pc, #132]	; (80038e0 <ctlwizchip+0x1c0>)
 800385a:	7992      	ldrb	r2, [r2, #6]
 800385c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3305      	adds	r3, #5
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <ctlwizchip+0x1c0>)
 8003864:	79d2      	ldrb	r2, [r2, #7]
 8003866:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	3306      	adds	r3, #6
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
         break;
 8003870:	e031      	b.n	80038d6 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8003872:	f000 fa13 	bl	8003c9c <wizphy_reset>
         break;
 8003876:	e02e      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8003878:	6838      	ldr	r0, [r7, #0]
 800387a:	f000 fa36 	bl	8003cea <wizphy_setphyconf>
         break;
 800387e:	e02a      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	f000 fa74 	bl	8003d6e <wizphy_getphyconf>
         break;
 8003886:	e026      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fad7 	bl	8003e40 <wizphy_setphypmode>
 8003892:	4603      	mov	r3, r0
 8003894:	e020      	b.n	80038d8 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8003896:	f000 f9e8 	bl	8003c6a <wizphy_getphypmode>
 800389a:	4603      	mov	r3, r0
 800389c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2bff      	cmp	r3, #255	; 0xff
 80038a2:	d102      	bne.n	80038aa <ctlwizchip+0x18a>
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	e016      	b.n	80038d8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	7dfa      	ldrb	r2, [r7, #23]
 80038ae:	701a      	strb	r2, [r3, #0]
         break;
 80038b0:	e011      	b.n	80038d6 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80038b2:	f000 f9c4 	bl	8003c3e <wizphy_getphylink>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2bff      	cmp	r3, #255	; 0xff
 80038be:	d102      	bne.n	80038c6 <ctlwizchip+0x1a6>
 80038c0:	f04f 33ff 	mov.w	r3, #4294967295
 80038c4:	e008      	b.n	80038d8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	7dfa      	ldrb	r2, [r7, #23]
 80038ca:	701a      	strb	r2, [r3, #0]
         break;
 80038cc:	e003      	b.n	80038d6 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80038ce:	f04f 33ff 	mov.w	r3, #4294967295
 80038d2:	e001      	b.n	80038d8 <ctlwizchip+0x1b8>
         break;
 80038d4:	bf00      	nop
   }
   return 0;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	371c      	adds	r7, #28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	20000020 	.word	0x20000020

080038e4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	6039      	str	r1, [r7, #0]
 80038ee:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	2b05      	cmp	r3, #5
 80038f4:	d82c      	bhi.n	8003950 <ctlnetwork+0x6c>
 80038f6:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <ctlnetwork+0x18>)
 80038f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800391d 	.word	0x0800391d
 8003904:	08003925 	.word	0x08003925
 8003908:	08003933 	.word	0x08003933
 800390c:	08003941 	.word	0x08003941
 8003910:	08003949 	.word	0x08003949
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	f000 fadd 	bl	8003ed4 <wizchip_setnetinfo>
         break;
 800391a:	e01c      	b.n	8003956 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 800391c:	6838      	ldr	r0, [r7, #0]
 800391e:	f000 fb19 	bl	8003f54 <wizchip_getnetinfo>
         break;
 8003922:	e018      	b.n	8003956 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fb53 	bl	8003fd4 <wizchip_setnetmode>
 800392e:	4603      	mov	r3, r0
 8003930:	e012      	b.n	8003958 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8003932:	f000 fb71 	bl	8004018 <wizchip_getnetmode>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	701a      	strb	r2, [r3, #0]
         break;
 800393e:	e00a      	b.n	8003956 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8003940:	6838      	ldr	r0, [r7, #0]
 8003942:	f000 fb71 	bl	8004028 <wizchip_settimeout>
         break;
 8003946:	e006      	b.n	8003956 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8003948:	6838      	ldr	r0, [r7, #0]
 800394a:	f000 fb8e 	bl	800406a <wizchip_gettimeout>
         break;
 800394e:	e002      	b.n	8003956 <ctlnetwork+0x72>
      default:
         return -1;
 8003950:	f04f 33ff 	mov.w	r3, #4294967295
 8003954:	e000      	b.n	8003958 <ctlnetwork+0x74>
   }
   return 0;
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	2206      	movs	r2, #6
 800396a:	4619      	mov	r1, r3
 800396c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003970:	f7fd fb7a 	bl	8001068 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8003974:	f107 0314 	add.w	r3, r7, #20
 8003978:	2204      	movs	r2, #4
 800397a:	4619      	mov	r1, r3
 800397c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003980:	f7fd fb72 	bl	8001068 <WIZCHIP_READ_BUF>
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	2204      	movs	r2, #4
 800398a:	4619      	mov	r1, r3
 800398c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003990:	f7fd fb6a 	bl	8001068 <WIZCHIP_READ_BUF>
 8003994:	f107 030c 	add.w	r3, r7, #12
 8003998:	2204      	movs	r2, #4
 800399a:	4619      	mov	r1, r3
 800399c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80039a0:	f7fd fb62 	bl	8001068 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	2000      	movs	r0, #0
 80039a8:	f7fd fb10 	bl	8000fcc <WIZCHIP_WRITE>
   getMR(); // for delay
 80039ac:	2000      	movs	r0, #0
 80039ae:	f7fd fac1 	bl	8000f34 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2206      	movs	r2, #6
 80039b6:	4619      	mov	r1, r3
 80039b8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80039bc:	f7fd fbb4 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80039c0:	f107 0314 	add.w	r3, r7, #20
 80039c4:	2204      	movs	r2, #4
 80039c6:	4619      	mov	r1, r3
 80039c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039cc:	f7fd fbac 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80039d0:	f107 0310 	add.w	r3, r7, #16
 80039d4:	2204      	movs	r2, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80039dc:	f7fd fba4 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	2204      	movs	r2, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80039ec:	f7fd fb9c 	bl	8001128 <WIZCHIP_WRITE_BUF>
}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8003a06:	f7ff ffab 	bl	8003960 <wizchip_sw_reset>
   if(txsize)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d03b      	beq.n	8003a88 <wizchip_init+0x90>
   {
      tmp = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	73fb      	strb	r3, [r7, #15]
 8003a18:	e015      	b.n	8003a46 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8003a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	4413      	add	r3, r2
 8003a22:	781a      	ldrb	r2, [r3, #0]
 8003a24:	7bbb      	ldrb	r3, [r7, #14]
 8003a26:	4413      	add	r3, r2
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003a2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a30:	2b10      	cmp	r3, #16
 8003a32:	dd02      	ble.n	8003a3a <wizchip_init+0x42>
 8003a34:	f04f 33ff 	mov.w	r3, #4294967295
 8003a38:	e066      	b.n	8003b08 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3301      	adds	r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4a:	2b07      	cmp	r3, #7
 8003a4c:	dde5      	ble.n	8003a1a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	e015      	b.n	8003a80 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8003a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8003a62:	4618      	mov	r0, r3
 8003a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd faac 	bl	8000fcc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	73fb      	strb	r3, [r7, #15]
 8003a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a84:	2b07      	cmp	r3, #7
 8003a86:	dde5      	ble.n	8003a54 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d03b      	beq.n	8003b06 <wizchip_init+0x10e>
   {
      tmp = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003a92:	2300      	movs	r3, #0
 8003a94:	73fb      	strb	r3, [r7, #15]
 8003a96:	e015      	b.n	8003ac4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8003a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	7bbb      	ldrb	r3, [r7, #14]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8003aaa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	dd02      	ble.n	8003ab8 <wizchip_init+0xc0>
 8003ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab6:	e027      	b.n	8003b08 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	3301      	adds	r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ac8:	2b07      	cmp	r3, #7
 8003aca:	dde5      	ble.n	8003a98 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e015      	b.n	8003afe <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8003ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	3301      	adds	r3, #1
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	4413      	add	r3, r2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	4619      	mov	r1, r3
 8003aee:	f7fd fa6d 	bl	8000fcc <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	3301      	adds	r3, #1
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	73fb      	strb	r3, [r7, #15]
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	2b07      	cmp	r3, #7
 8003b04:	dde5      	ble.n	8003ad2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	4603      	mov	r3, r0
 8003b18:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8003b1e:	88fb      	ldrh	r3, [r7, #6]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
 8003b28:	f023 030f 	bic.w	r3, r3, #15
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003b34:	f7fd fa4a 	bl	8000fcc <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8003b38:	2300      	movs	r3, #0
 8003b3a:	73fb      	strb	r3, [r7, #15]
 8003b3c:	e014      	b.n	8003b68 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8003b3e:	7bba      	ldrb	r2, [r7, #14]
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	fa42 f303 	asr.w	r3, r2, r3
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <wizchip_clrinterrupt+0x52>
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	3301      	adds	r3, #1
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b5a:	211f      	movs	r1, #31
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7fd fa35 	bl	8000fcc <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	3301      	adds	r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b07      	cmp	r3, #7
 8003b6c:	d9e7      	bls.n	8003b3e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003b86:	2300      	movs	r3, #0
 8003b88:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8003b8a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8003b8e:	f7fd f9d1 	bl	8000f34 <WIZCHIP_READ>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f023 030f 	bic.w	r3, r3, #15
 8003b98:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8003b9a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8003b9e:	f7fd f9c9 	bl	8000f34 <WIZCHIP_READ>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8003ba6:	79bb      	ldrb	r3, [r7, #6]
 8003ba8:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8003baa:	88bb      	ldrh	r3, [r7, #4]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003bb8:	88bb      	ldrh	r3, [r7, #4]
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8003bd0:	88fb      	ldrh	r3, [r7, #6]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003be0:	f7fd f9f4 	bl	8000fcc <WIZCHIP_WRITE>
   setSIMR(simr);
 8003be4:	7bbb      	ldrb	r3, [r7, #14]
 8003be6:	4619      	mov	r1, r3
 8003be8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003bec:	f7fd f9ee 	bl	8000fcc <WIZCHIP_WRITE>
#endif   
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8003c0a:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8003c0e:	f7fd f991 	bl	8000f34 <WIZCHIP_READ>
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8003c16:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8003c1a:	f7fd f98b 	bl	8000f34 <WIZCHIP_READ>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8003c26:	88bb      	ldrh	r3, [r7, #4]
 8003c28:	021b      	lsls	r3, r3, #8
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8003c34:	88bb      	ldrh	r3, [r7, #4]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8003c44:	2300      	movs	r3, #0
 8003c46:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8003c48:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c4c:	f7fd f972 	bl	8000f34 <WIZCHIP_READ>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b082      	sub	sp, #8
 8003c6e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8003c70:	2300      	movs	r3, #0
 8003c72:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8003c74:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003c78:	f7fd f95c 	bl	8000f34 <WIZCHIP_READ>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c82:	2b30      	cmp	r3, #48	; 0x30
 8003c84:	d102      	bne.n	8003c8c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8003c86:	2301      	movs	r3, #1
 8003c88:	71fb      	strb	r3, [r7, #7]
 8003c8a:	e001      	b.n	8003c90 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8003c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8003ca2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003ca6:	f7fd f945 	bl	8000f34 <WIZCHIP_READ>
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8003cae:	79fb      	ldrb	r3, [r7, #7]
 8003cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003cbe:	f7fd f985 	bl	8000fcc <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8003cc2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003cc6:	f7fd f935 	bl	8000f34 <WIZCHIP_READ>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8003cce:	79fb      	ldrb	r3, [r7, #7]
 8003cd0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003cd4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003cde:	f7fd f975 	bl	8000fcc <WIZCHIP_WRITE>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b084      	sub	sp, #16
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d104      	bne.n	8003d08 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e003      	b.n	8003d10 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d0e:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d104      	bne.n	8003d22 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
 8003d1a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003d1e:	73fb      	strb	r3, [r7, #15]
 8003d20:	e019      	b.n	8003d56 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	78db      	ldrb	r3, [r3, #3]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d10d      	bne.n	8003d46 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d104      	bne.n	8003d3c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	f043 0318 	orr.w	r3, r3, #24
 8003d38:	73fb      	strb	r3, [r7, #15]
 8003d3a:	e00c      	b.n	8003d56 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8003d3c:	7bfb      	ldrb	r3, [r7, #15]
 8003d3e:	f043 0308 	orr.w	r3, r3, #8
 8003d42:	73fb      	strb	r3, [r7, #15]
 8003d44:	e007      	b.n	8003d56 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	789b      	ldrb	r3, [r3, #2]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d103      	bne.n	8003d56 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	f043 0310 	orr.w	r3, r3, #16
 8003d54:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003d5e:	f7fd f935 	bl	8000fcc <WIZCHIP_WRITE>
   wizphy_reset();
 8003d62:	f7ff ff9b 	bl	8003c9c <wizphy_reset>
}
 8003d66:	bf00      	nop
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b084      	sub	sp, #16
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003d7a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003d7e:	f7fd f8d9 	bl	8000f34 <WIZCHIP_READ>
 8003d82:	4603      	mov	r3, r0
 8003d84:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	119b      	asrs	r3, r3, #6
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003d96:	7bfb      	ldrb	r3, [r7, #15]
 8003d98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d001      	beq.n	8003da4 <wizphy_getphyconf+0x36>
 8003da0:	2b38      	cmp	r3, #56	; 0x38
 8003da2:	d103      	bne.n	8003dac <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	705a      	strb	r2, [r3, #1]
         break;
 8003daa:	e003      	b.n	8003db4 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	705a      	strb	r2, [r3, #1]
         break;
 8003db2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003db4:	7bfb      	ldrb	r3, [r7, #15]
 8003db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dba:	3b10      	subs	r3, #16
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	bf8c      	ite	hi
 8003dc0:	2201      	movhi	r2, #1
 8003dc2:	2200      	movls	r2, #0
 8003dc4:	b2d2      	uxtb	r2, r2
 8003dc6:	2a00      	cmp	r2, #0
 8003dc8:	d111      	bne.n	8003dee <wizphy_getphyconf+0x80>
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003dd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d003      	beq.n	8003dee <wizphy_getphyconf+0x80>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2201      	movs	r2, #1
 8003dea:	709a      	strb	r2, [r3, #2]
         break;
 8003dec:	e003      	b.n	8003df6 <wizphy_getphyconf+0x88>
      default:
         phyconf->speed = PHY_SPEED_10;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	709a      	strb	r2, [r3, #2]
         break;
 8003df4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dfc:	3b08      	subs	r3, #8
 8003dfe:	2b18      	cmp	r3, #24
 8003e00:	bf8c      	ite	hi
 8003e02:	2201      	movhi	r2, #1
 8003e04:	2200      	movls	r2, #0
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	2a00      	cmp	r2, #0
 8003e0a:	d111      	bne.n	8003e30 <wizphy_getphyconf+0xc2>
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8003e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <wizphy_getphyconf+0xc2>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	70da      	strb	r2, [r3, #3]
         break;
 8003e2e:	e003      	b.n	8003e38 <wizphy_getphyconf+0xca>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	70da      	strb	r2, [r3, #3]
         break;
 8003e36:	bf00      	nop
   }
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8003e4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003e52:	f7fd f86f 	bl	8000f34 <WIZCHIP_READ>
 8003e56:	4603      	mov	r3, r0
 8003e58:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8003e5a:	7bfb      	ldrb	r3, [r7, #15]
 8003e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d102      	bne.n	8003e6a <wizphy_setphypmode+0x2a>
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	e030      	b.n	8003ecc <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8003e6a:	7bfb      	ldrb	r3, [r7, #15]
 8003e6c:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8003e70:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003e72:	79fb      	ldrb	r3, [r7, #7]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d104      	bne.n	8003e82 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	e003      	b.n	8003e8a <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003e88:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003e92:	f7fd f89b 	bl	8000fcc <WIZCHIP_WRITE>
   wizphy_reset();
 8003e96:	f7ff ff01 	bl	8003c9c <wizphy_reset>
   tmp = getPHYCFGR();
 8003e9a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8003e9e:	f7fd f849 	bl	8000f34 <WIZCHIP_READ>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d106      	bne.n	8003eba <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d008      	beq.n	8003ec8 <wizphy_setphypmode+0x88>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e008      	b.n	8003ecc <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <wizphy_setphypmode+0x88>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e001      	b.n	8003ecc <wizphy_setphypmode+0x8c>
   }
   return -1;
 8003ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2206      	movs	r2, #6
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003ee6:	f7fd f91f 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	330e      	adds	r3, #14
 8003eee:	2204      	movs	r2, #4
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ef6:	f7fd f917 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	330a      	adds	r3, #10
 8003efe:	2204      	movs	r2, #4
 8003f00:	4619      	mov	r1, r3
 8003f02:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f06:	f7fd f90f 	bl	8001128 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3306      	adds	r3, #6
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003f16:	f7fd f907 	bl	8001128 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	7c9a      	ldrb	r2, [r3, #18]
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <wizchip_setnetinfo+0x78>)
 8003f20:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7cda      	ldrb	r2, [r3, #19]
 8003f26:	4b09      	ldr	r3, [pc, #36]	; (8003f4c <wizchip_setnetinfo+0x78>)
 8003f28:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	7d1a      	ldrb	r2, [r3, #20]
 8003f2e:	4b07      	ldr	r3, [pc, #28]	; (8003f4c <wizchip_setnetinfo+0x78>)
 8003f30:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	7d5a      	ldrb	r2, [r3, #21]
 8003f36:	4b05      	ldr	r3, [pc, #20]	; (8003f4c <wizchip_setnetinfo+0x78>)
 8003f38:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	7d9a      	ldrb	r2, [r3, #22]
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <wizchip_setnetinfo+0x7c>)
 8003f40:	701a      	strb	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000234 	.word	0x20000234
 8003f50:	20000238 	.word	0x20000238

08003f54 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2206      	movs	r2, #6
 8003f60:	4619      	mov	r1, r3
 8003f62:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8003f66:	f7fd f87f 	bl	8001068 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	330e      	adds	r3, #14
 8003f6e:	2204      	movs	r2, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003f76:	f7fd f877 	bl	8001068 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	330a      	adds	r3, #10
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8003f86:	f7fd f86f 	bl	8001068 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	3306      	adds	r3, #6
 8003f8e:	2204      	movs	r2, #4
 8003f90:	4619      	mov	r1, r3
 8003f92:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8003f96:	f7fd f867 	bl	8001068 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003f9a:	4b0c      	ldr	r3, [pc, #48]	; (8003fcc <wizchip_getnetinfo+0x78>)
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003fa2:	4b0a      	ldr	r3, [pc, #40]	; (8003fcc <wizchip_getnetinfo+0x78>)
 8003fa4:	785a      	ldrb	r2, [r3, #1]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8003faa:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <wizchip_getnetinfo+0x78>)
 8003fac:	789a      	ldrb	r2, [r3, #2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <wizchip_getnetinfo+0x78>)
 8003fb4:	78da      	ldrb	r2, [r3, #3]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003fba:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <wizchip_getnetinfo+0x7c>)
 8003fbc:	781a      	ldrb	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	759a      	strb	r2, [r3, #22]
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	20000234 	.word	0x20000234
 8003fd0:	20000238 	.word	0x20000238

08003fd4 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d002      	beq.n	8003ff2 <wizchip_setnetmode+0x1e>
 8003fec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff0:	e00e      	b.n	8004010 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8003ff2:	2000      	movs	r0, #0
 8003ff4:	f7fc ff9e 	bl	8000f34 <WIZCHIP_READ>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8003ffc:	7bfa      	ldrb	r2, [r7, #15]
 8003ffe:	79fb      	ldrb	r3, [r7, #7]
 8004000:	4313      	orrs	r3, r2
 8004002:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8004004:	7bfb      	ldrb	r3, [r7, #15]
 8004006:	4619      	mov	r1, r3
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc ffdf 	bl	8000fcc <WIZCHIP_WRITE>
   return 0;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3710      	adds	r7, #16
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800401c:	2000      	movs	r0, #0
 800401e:	f7fc ff89 	bl	8000f34 <WIZCHIP_READ>
 8004022:	4603      	mov	r3, r0
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}

08004028 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	4619      	mov	r1, r3
 8004036:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800403a:	f7fc ffc7 	bl	8000fcc <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	885b      	ldrh	r3, [r3, #2]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	b29b      	uxth	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800404e:	f7fc ffbd 	bl	8000fcc <WIZCHIP_WRITE>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	885b      	ldrh	r3, [r3, #2]
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800405e:	f7fc ffb5 	bl	8000fcc <WIZCHIP_WRITE>
}
 8004062:	bf00      	nop
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800406a:	b590      	push	{r4, r7, lr}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8004072:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8004076:	f7fc ff5d 	bl	8000f34 <WIZCHIP_READ>
 800407a:	4603      	mov	r3, r0
 800407c:	461a      	mov	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8004082:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8004086:	f7fc ff55 	bl	8000f34 <WIZCHIP_READ>
 800408a:	4603      	mov	r3, r0
 800408c:	b29b      	uxth	r3, r3
 800408e:	021b      	lsls	r3, r3, #8
 8004090:	b29c      	uxth	r4, r3
 8004092:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8004096:	f7fc ff4d 	bl	8000f34 <WIZCHIP_READ>
 800409a:	4603      	mov	r3, r0
 800409c:	b29b      	uxth	r3, r3
 800409e:	4423      	add	r3, r4
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	805a      	strh	r2, [r3, #2]
}
 80040a6:	bf00      	nop
 80040a8:	370c      	adds	r7, #12
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd90      	pop	{r4, r7, pc}
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040b4:	4b08      	ldr	r3, [pc, #32]	; (80040d8 <HAL_Init+0x28>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <HAL_Init+0x28>)
 80040ba:	f043 0310 	orr.w	r3, r3, #16
 80040be:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040c0:	2003      	movs	r0, #3
 80040c2:	f000 f92b 	bl	800431c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040c6:	200f      	movs	r0, #15
 80040c8:	f000 f808 	bl	80040dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040cc:	f7fc fd56 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40022000 	.word	0x40022000

080040dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040e4:	4b12      	ldr	r3, [pc, #72]	; (8004130 <HAL_InitTick+0x54>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	4b12      	ldr	r3, [pc, #72]	; (8004134 <HAL_InitTick+0x58>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	4619      	mov	r1, r3
 80040ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 f935 	bl	800436a <HAL_SYSTICK_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e00e      	b.n	8004128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b0f      	cmp	r3, #15
 800410e:	d80a      	bhi.n	8004126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004110:	2200      	movs	r2, #0
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	f04f 30ff 	mov.w	r0, #4294967295
 8004118:	f000 f90b 	bl	8004332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800411c:	4a06      	ldr	r2, [pc, #24]	; (8004138 <HAL_InitTick+0x5c>)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
}
 8004128:	4618      	mov	r0, r3
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20000018 	.word	0x20000018
 8004134:	20000050 	.word	0x20000050
 8004138:	2000004c 	.word	0x2000004c

0800413c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_IncTick+0x1c>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_IncTick+0x20>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4413      	add	r3, r2
 800414c:	4a03      	ldr	r2, [pc, #12]	; (800415c <HAL_IncTick+0x20>)
 800414e:	6013      	str	r3, [r2, #0]
}
 8004150:	bf00      	nop
 8004152:	46bd      	mov	sp, r7
 8004154:	bc80      	pop	{r7}
 8004156:	4770      	bx	lr
 8004158:	20000050 	.word	0x20000050
 800415c:	2000023c 	.word	0x2000023c

08004160 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  return uwTick;
 8004164:	4b02      	ldr	r3, [pc, #8]	; (8004170 <HAL_GetTick+0x10>)
 8004166:	681b      	ldr	r3, [r3, #0]
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	2000023c 	.word	0x2000023c

08004174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff fff0 	bl	8004160 <HAL_GetTick>
 8004180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418c:	d005      	beq.n	800419a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_Delay+0x44>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	461a      	mov	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800419a:	bf00      	nop
 800419c:	f7ff ffe0 	bl	8004160 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d8f7      	bhi.n	800419c <HAL_Delay+0x28>
  {
  }
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000050 	.word	0x20000050

080041bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ee:	4a04      	ldr	r2, [pc, #16]	; (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	60d3      	str	r3, [r2, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <__NVIC_GetPriorityGrouping+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0307 	and.w	r3, r3, #7
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	6039      	str	r1, [r7, #0]
 800422a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004230:	2b00      	cmp	r3, #0
 8004232:	db0a      	blt.n	800424a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	b2da      	uxtb	r2, r3
 8004238:	490c      	ldr	r1, [pc, #48]	; (800426c <__NVIC_SetPriority+0x4c>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	0112      	lsls	r2, r2, #4
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	440b      	add	r3, r1
 8004244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004248:	e00a      	b.n	8004260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	b2da      	uxtb	r2, r3
 800424e:	4908      	ldr	r1, [pc, #32]	; (8004270 <__NVIC_SetPriority+0x50>)
 8004250:	79fb      	ldrb	r3, [r7, #7]
 8004252:	f003 030f 	and.w	r3, r3, #15
 8004256:	3b04      	subs	r3, #4
 8004258:	0112      	lsls	r2, r2, #4
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	440b      	add	r3, r1
 800425e:	761a      	strb	r2, [r3, #24]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000e100 	.word	0xe000e100
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004274:	b480      	push	{r7}
 8004276:	b089      	sub	sp, #36	; 0x24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f1c3 0307 	rsb	r3, r3, #7
 800428e:	2b04      	cmp	r3, #4
 8004290:	bf28      	it	cs
 8004292:	2304      	movcs	r3, #4
 8004294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3304      	adds	r3, #4
 800429a:	2b06      	cmp	r3, #6
 800429c:	d902      	bls.n	80042a4 <NVIC_EncodePriority+0x30>
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	3b03      	subs	r3, #3
 80042a2:	e000      	b.n	80042a6 <NVIC_EncodePriority+0x32>
 80042a4:	2300      	movs	r3, #0
 80042a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	43da      	mvns	r2, r3
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	401a      	ands	r2, r3
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042bc:	f04f 31ff 	mov.w	r1, #4294967295
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	fa01 f303 	lsl.w	r3, r1, r3
 80042c6:	43d9      	mvns	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042cc:	4313      	orrs	r3, r2
         );
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3724      	adds	r7, #36	; 0x24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e8:	d301      	bcc.n	80042ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ea:	2301      	movs	r3, #1
 80042ec:	e00f      	b.n	800430e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ee:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <SysTick_Config+0x40>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f6:	210f      	movs	r1, #15
 80042f8:	f04f 30ff 	mov.w	r0, #4294967295
 80042fc:	f7ff ff90 	bl	8004220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004300:	4b05      	ldr	r3, [pc, #20]	; (8004318 <SysTick_Config+0x40>)
 8004302:	2200      	movs	r2, #0
 8004304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004306:	4b04      	ldr	r3, [pc, #16]	; (8004318 <SysTick_Config+0x40>)
 8004308:	2207      	movs	r2, #7
 800430a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	e000e010 	.word	0xe000e010

0800431c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f7ff ff49 	bl	80041bc <__NVIC_SetPriorityGrouping>
}
 800432a:	bf00      	nop
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	4603      	mov	r3, r0
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
 800433e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004344:	f7ff ff5e 	bl	8004204 <__NVIC_GetPriorityGrouping>
 8004348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	6978      	ldr	r0, [r7, #20]
 8004350:	f7ff ff90 	bl	8004274 <NVIC_EncodePriority>
 8004354:	4602      	mov	r2, r0
 8004356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff5f 	bl	8004220 <__NVIC_SetPriority>
}
 8004362:	bf00      	nop
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ffb0 	bl	80042d8 <SysTick_Config>
 8004378:	4603      	mov	r3, r0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
	...

08004384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004384:	b480      	push	{r7}
 8004386:	b08b      	sub	sp, #44	; 0x2c
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800438e:	2300      	movs	r3, #0
 8004390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004396:	e161      	b.n	800465c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004398:	2201      	movs	r2, #1
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	f040 8150 	bne.w	8004656 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a97      	ldr	r2, [pc, #604]	; (8004618 <HAL_GPIO_Init+0x294>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d05e      	beq.n	800447e <HAL_GPIO_Init+0xfa>
 80043c0:	4a95      	ldr	r2, [pc, #596]	; (8004618 <HAL_GPIO_Init+0x294>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d875      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043c6:	4a95      	ldr	r2, [pc, #596]	; (800461c <HAL_GPIO_Init+0x298>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d058      	beq.n	800447e <HAL_GPIO_Init+0xfa>
 80043cc:	4a93      	ldr	r2, [pc, #588]	; (800461c <HAL_GPIO_Init+0x298>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d86f      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043d2:	4a93      	ldr	r2, [pc, #588]	; (8004620 <HAL_GPIO_Init+0x29c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d052      	beq.n	800447e <HAL_GPIO_Init+0xfa>
 80043d8:	4a91      	ldr	r2, [pc, #580]	; (8004620 <HAL_GPIO_Init+0x29c>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d869      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043de:	4a91      	ldr	r2, [pc, #580]	; (8004624 <HAL_GPIO_Init+0x2a0>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d04c      	beq.n	800447e <HAL_GPIO_Init+0xfa>
 80043e4:	4a8f      	ldr	r2, [pc, #572]	; (8004624 <HAL_GPIO_Init+0x2a0>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d863      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043ea:	4a8f      	ldr	r2, [pc, #572]	; (8004628 <HAL_GPIO_Init+0x2a4>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d046      	beq.n	800447e <HAL_GPIO_Init+0xfa>
 80043f0:	4a8d      	ldr	r2, [pc, #564]	; (8004628 <HAL_GPIO_Init+0x2a4>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d85d      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043f6:	2b12      	cmp	r3, #18
 80043f8:	d82a      	bhi.n	8004450 <HAL_GPIO_Init+0xcc>
 80043fa:	2b12      	cmp	r3, #18
 80043fc:	d859      	bhi.n	80044b2 <HAL_GPIO_Init+0x12e>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <HAL_GPIO_Init+0x80>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	0800447f 	.word	0x0800447f
 8004408:	08004459 	.word	0x08004459
 800440c:	0800446b 	.word	0x0800446b
 8004410:	080044ad 	.word	0x080044ad
 8004414:	080044b3 	.word	0x080044b3
 8004418:	080044b3 	.word	0x080044b3
 800441c:	080044b3 	.word	0x080044b3
 8004420:	080044b3 	.word	0x080044b3
 8004424:	080044b3 	.word	0x080044b3
 8004428:	080044b3 	.word	0x080044b3
 800442c:	080044b3 	.word	0x080044b3
 8004430:	080044b3 	.word	0x080044b3
 8004434:	080044b3 	.word	0x080044b3
 8004438:	080044b3 	.word	0x080044b3
 800443c:	080044b3 	.word	0x080044b3
 8004440:	080044b3 	.word	0x080044b3
 8004444:	080044b3 	.word	0x080044b3
 8004448:	08004461 	.word	0x08004461
 800444c:	08004475 	.word	0x08004475
 8004450:	4a76      	ldr	r2, [pc, #472]	; (800462c <HAL_GPIO_Init+0x2a8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d013      	beq.n	800447e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004456:	e02c      	b.n	80044b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	623b      	str	r3, [r7, #32]
          break;
 800445e:	e029      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	3304      	adds	r3, #4
 8004466:	623b      	str	r3, [r7, #32]
          break;
 8004468:	e024      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	3308      	adds	r3, #8
 8004470:	623b      	str	r3, [r7, #32]
          break;
 8004472:	e01f      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	330c      	adds	r3, #12
 800447a:	623b      	str	r3, [r7, #32]
          break;
 800447c:	e01a      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d102      	bne.n	800448c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004486:	2304      	movs	r3, #4
 8004488:	623b      	str	r3, [r7, #32]
          break;
 800448a:	e013      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d105      	bne.n	80044a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004494:	2308      	movs	r3, #8
 8004496:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	611a      	str	r2, [r3, #16]
          break;
 800449e:	e009      	b.n	80044b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80044a0:	2308      	movs	r3, #8
 80044a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	615a      	str	r2, [r3, #20]
          break;
 80044aa:	e003      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80044ac:	2300      	movs	r3, #0
 80044ae:	623b      	str	r3, [r7, #32]
          break;
 80044b0:	e000      	b.n	80044b4 <HAL_GPIO_Init+0x130>
          break;
 80044b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2bff      	cmp	r3, #255	; 0xff
 80044b8:	d801      	bhi.n	80044be <HAL_GPIO_Init+0x13a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	e001      	b.n	80044c2 <HAL_GPIO_Init+0x13e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2bff      	cmp	r3, #255	; 0xff
 80044c8:	d802      	bhi.n	80044d0 <HAL_GPIO_Init+0x14c>
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	e002      	b.n	80044d6 <HAL_GPIO_Init+0x152>
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	3b08      	subs	r3, #8
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	210f      	movs	r1, #15
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	fa01 f303 	lsl.w	r3, r1, r3
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	6a39      	ldr	r1, [r7, #32]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	fa01 f303 	lsl.w	r3, r1, r3
 80044f0:	431a      	orrs	r2, r3
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a9 	beq.w	8004656 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004504:	4b4a      	ldr	r3, [pc, #296]	; (8004630 <HAL_GPIO_Init+0x2ac>)
 8004506:	699b      	ldr	r3, [r3, #24]
 8004508:	4a49      	ldr	r2, [pc, #292]	; (8004630 <HAL_GPIO_Init+0x2ac>)
 800450a:	f043 0301 	orr.w	r3, r3, #1
 800450e:	6193      	str	r3, [r2, #24]
 8004510:	4b47      	ldr	r3, [pc, #284]	; (8004630 <HAL_GPIO_Init+0x2ac>)
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800451c:	4a45      	ldr	r2, [pc, #276]	; (8004634 <HAL_GPIO_Init+0x2b0>)
 800451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4013      	ands	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a3d      	ldr	r2, [pc, #244]	; (8004638 <HAL_GPIO_Init+0x2b4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00d      	beq.n	8004564 <HAL_GPIO_Init+0x1e0>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3c      	ldr	r2, [pc, #240]	; (800463c <HAL_GPIO_Init+0x2b8>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d007      	beq.n	8004560 <HAL_GPIO_Init+0x1dc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <HAL_GPIO_Init+0x2bc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d101      	bne.n	800455c <HAL_GPIO_Init+0x1d8>
 8004558:	2302      	movs	r3, #2
 800455a:	e004      	b.n	8004566 <HAL_GPIO_Init+0x1e2>
 800455c:	2303      	movs	r3, #3
 800455e:	e002      	b.n	8004566 <HAL_GPIO_Init+0x1e2>
 8004560:	2301      	movs	r3, #1
 8004562:	e000      	b.n	8004566 <HAL_GPIO_Init+0x1e2>
 8004564:	2300      	movs	r3, #0
 8004566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4093      	lsls	r3, r2
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004576:	492f      	ldr	r1, [pc, #188]	; (8004634 <HAL_GPIO_Init+0x2b0>)
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d006      	beq.n	800459e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004590:	4b2c      	ldr	r3, [pc, #176]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	492b      	ldr	r1, [pc, #172]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	4313      	orrs	r3, r2
 800459a:	608b      	str	r3, [r1, #8]
 800459c:	e006      	b.n	80045ac <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	4927      	ldr	r1, [pc, #156]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d006      	beq.n	80045c6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80045b8:	4b22      	ldr	r3, [pc, #136]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045ba:	68da      	ldr	r2, [r3, #12]
 80045bc:	4921      	ldr	r1, [pc, #132]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	60cb      	str	r3, [r1, #12]
 80045c4:	e006      	b.n	80045d4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045c8:	68da      	ldr	r2, [r3, #12]
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	491d      	ldr	r1, [pc, #116]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	4917      	ldr	r1, [pc, #92]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	604b      	str	r3, [r1, #4]
 80045ec:	e006      	b.n	80045fc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80045ee:	4b15      	ldr	r3, [pc, #84]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	4913      	ldr	r1, [pc, #76]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 80045f8:	4013      	ands	r3, r2
 80045fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d01f      	beq.n	8004648 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004608:	4b0e      	ldr	r3, [pc, #56]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	490d      	ldr	r1, [pc, #52]	; (8004644 <HAL_GPIO_Init+0x2c0>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]
 8004614:	e01f      	b.n	8004656 <HAL_GPIO_Init+0x2d2>
 8004616:	bf00      	nop
 8004618:	10320000 	.word	0x10320000
 800461c:	10310000 	.word	0x10310000
 8004620:	10220000 	.word	0x10220000
 8004624:	10210000 	.word	0x10210000
 8004628:	10120000 	.word	0x10120000
 800462c:	10110000 	.word	0x10110000
 8004630:	40021000 	.word	0x40021000
 8004634:	40010000 	.word	0x40010000
 8004638:	40010800 	.word	0x40010800
 800463c:	40010c00 	.word	0x40010c00
 8004640:	40011000 	.word	0x40011000
 8004644:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_GPIO_Init+0x2f4>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	43db      	mvns	r3, r3
 8004650:	4909      	ldr	r1, [pc, #36]	; (8004678 <HAL_GPIO_Init+0x2f4>)
 8004652:	4013      	ands	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004658:	3301      	adds	r3, #1
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	fa22 f303 	lsr.w	r3, r2, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	f47f ae96 	bne.w	8004398 <HAL_GPIO_Init+0x14>
  }
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	372c      	adds	r7, #44	; 0x2c
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	40010400 	.word	0x40010400

0800467c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	807b      	strh	r3, [r7, #2]
 8004688:	4613      	mov	r3, r2
 800468a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800468c:	787b      	ldrb	r3, [r7, #1]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004692:	887a      	ldrh	r2, [r7, #2]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004698:	e003      	b.n	80046a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800469a:	887b      	ldrh	r3, [r7, #2]
 800469c:	041a      	lsls	r2, r3, #16
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	611a      	str	r2, [r3, #16]
}
 80046a2:	bf00      	nop
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80046b0:	4b03      	ldr	r3, [pc, #12]	; (80046c0 <HAL_PWR_EnableBkUpAccess+0x14>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	420e0020 	.word	0x420e0020

080046c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e272      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8087 	beq.w	80047f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046e4:	4b92      	ldr	r3, [pc, #584]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 030c 	and.w	r3, r3, #12
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d00c      	beq.n	800470a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80046f0:	4b8f      	ldr	r3, [pc, #572]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d112      	bne.n	8004722 <HAL_RCC_OscConfig+0x5e>
 80046fc:	4b8c      	ldr	r3, [pc, #560]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004708:	d10b      	bne.n	8004722 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800470a:	4b89      	ldr	r3, [pc, #548]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d06c      	beq.n	80047f0 <HAL_RCC_OscConfig+0x12c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d168      	bne.n	80047f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e24c      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x76>
 800472c:	4b80      	ldr	r3, [pc, #512]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a7f      	ldr	r2, [pc, #508]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	e02e      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x98>
 8004742:	4b7b      	ldr	r3, [pc, #492]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a7a      	ldr	r2, [pc, #488]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b78      	ldr	r3, [pc, #480]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a77      	ldr	r2, [pc, #476]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004754:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	e01d      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004764:	d10c      	bne.n	8004780 <HAL_RCC_OscConfig+0xbc>
 8004766:	4b72      	ldr	r3, [pc, #456]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a71      	ldr	r2, [pc, #452]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800476c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	4b6f      	ldr	r3, [pc, #444]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a6e      	ldr	r2, [pc, #440]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e00b      	b.n	8004798 <HAL_RCC_OscConfig+0xd4>
 8004780:	4b6b      	ldr	r3, [pc, #428]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	4b68      	ldr	r3, [pc, #416]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a67      	ldr	r2, [pc, #412]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004796:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d013      	beq.n	80047c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a0:	f7ff fcde 	bl	8004160 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047a8:	f7ff fcda 	bl	8004160 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b64      	cmp	r3, #100	; 0x64
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e200      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ba:	4b5d      	ldr	r3, [pc, #372]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0xe4>
 80047c6:	e014      	b.n	80047f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c8:	f7ff fcca 	bl	8004160 <HAL_GetTick>
 80047cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d0:	f7ff fcc6 	bl	8004160 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b64      	cmp	r3, #100	; 0x64
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e1ec      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047e2:	4b53      	ldr	r3, [pc, #332]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x10c>
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d063      	beq.n	80048c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047fe:	4b4c      	ldr	r3, [pc, #304]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 030c 	and.w	r3, r3, #12
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800480a:	4b49      	ldr	r3, [pc, #292]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f003 030c 	and.w	r3, r3, #12
 8004812:	2b08      	cmp	r3, #8
 8004814:	d11c      	bne.n	8004850 <HAL_RCC_OscConfig+0x18c>
 8004816:	4b46      	ldr	r3, [pc, #280]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d116      	bne.n	8004850 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004822:	4b43      	ldr	r3, [pc, #268]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_RCC_OscConfig+0x176>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d001      	beq.n	800483a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e1c0      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800483a:	4b3d      	ldr	r3, [pc, #244]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4939      	ldr	r1, [pc, #228]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800484e:	e03a      	b.n	80048c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004858:	4b36      	ldr	r3, [pc, #216]	; (8004934 <HAL_RCC_OscConfig+0x270>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485e:	f7ff fc7f 	bl	8004160 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004866:	f7ff fc7b 	bl	8004160 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b02      	cmp	r3, #2
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e1a1      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004878:	4b2d      	ldr	r3, [pc, #180]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	00db      	lsls	r3, r3, #3
 8004892:	4927      	ldr	r1, [pc, #156]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 8004894:	4313      	orrs	r3, r2
 8004896:	600b      	str	r3, [r1, #0]
 8004898:	e015      	b.n	80048c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800489a:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCC_OscConfig+0x270>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a0:	f7ff fc5e 	bl	8004160 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a8:	f7ff fc5a 	bl	8004160 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e180      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ba:	4b1d      	ldr	r3, [pc, #116]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03a      	beq.n	8004948 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d019      	beq.n	800490e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048da:	4b17      	ldr	r3, [pc, #92]	; (8004938 <HAL_RCC_OscConfig+0x274>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e0:	f7ff fc3e 	bl	8004160 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e8:	f7ff fc3a 	bl	8004160 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e160      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004906:	2001      	movs	r0, #1
 8004908:	f000 face 	bl	8004ea8 <RCC_Delay>
 800490c:	e01c      	b.n	8004948 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800490e:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <HAL_RCC_OscConfig+0x274>)
 8004910:	2200      	movs	r2, #0
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004914:	f7ff fc24 	bl	8004160 <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800491a:	e00f      	b.n	800493c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800491c:	f7ff fc20 	bl	8004160 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d908      	bls.n	800493c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e146      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
 800492e:	bf00      	nop
 8004930:	40021000 	.word	0x40021000
 8004934:	42420000 	.word	0x42420000
 8004938:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800493c:	4b92      	ldr	r3, [pc, #584]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 800493e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e9      	bne.n	800491c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80a6 	beq.w	8004aa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800495a:	4b8b      	ldr	r3, [pc, #556]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004966:	4b88      	ldr	r3, [pc, #544]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4a87      	ldr	r2, [pc, #540]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	61d3      	str	r3, [r2, #28]
 8004972:	4b85      	ldr	r3, [pc, #532]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004974:	69db      	ldr	r3, [r3, #28]
 8004976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497a:	60bb      	str	r3, [r7, #8]
 800497c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497e:	2301      	movs	r3, #1
 8004980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004982:	4b82      	ldr	r3, [pc, #520]	; (8004b8c <HAL_RCC_OscConfig+0x4c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498a:	2b00      	cmp	r3, #0
 800498c:	d118      	bne.n	80049c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800498e:	4b7f      	ldr	r3, [pc, #508]	; (8004b8c <HAL_RCC_OscConfig+0x4c8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a7e      	ldr	r2, [pc, #504]	; (8004b8c <HAL_RCC_OscConfig+0x4c8>)
 8004994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499a:	f7ff fbe1 	bl	8004160 <HAL_GetTick>
 800499e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a2:	f7ff fbdd 	bl	8004160 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b64      	cmp	r3, #100	; 0x64
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e103      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b4:	4b75      	ldr	r3, [pc, #468]	; (8004b8c <HAL_RCC_OscConfig+0x4c8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d0f0      	beq.n	80049a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d106      	bne.n	80049d6 <HAL_RCC_OscConfig+0x312>
 80049c8:	4b6f      	ldr	r3, [pc, #444]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049ca:	6a1b      	ldr	r3, [r3, #32]
 80049cc:	4a6e      	ldr	r2, [pc, #440]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	6213      	str	r3, [r2, #32]
 80049d4:	e02d      	b.n	8004a32 <HAL_RCC_OscConfig+0x36e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x334>
 80049de:	4b6a      	ldr	r3, [pc, #424]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	4a69      	ldr	r2, [pc, #420]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049e4:	f023 0301 	bic.w	r3, r3, #1
 80049e8:	6213      	str	r3, [r2, #32]
 80049ea:	4b67      	ldr	r3, [pc, #412]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	4a66      	ldr	r2, [pc, #408]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 0304 	bic.w	r3, r3, #4
 80049f4:	6213      	str	r3, [r2, #32]
 80049f6:	e01c      	b.n	8004a32 <HAL_RCC_OscConfig+0x36e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b05      	cmp	r3, #5
 80049fe:	d10c      	bne.n	8004a1a <HAL_RCC_OscConfig+0x356>
 8004a00:	4b61      	ldr	r3, [pc, #388]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4a60      	ldr	r2, [pc, #384]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	6213      	str	r3, [r2, #32]
 8004a0c:	4b5e      	ldr	r3, [pc, #376]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	4a5d      	ldr	r2, [pc, #372]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	6213      	str	r3, [r2, #32]
 8004a18:	e00b      	b.n	8004a32 <HAL_RCC_OscConfig+0x36e>
 8004a1a:	4b5b      	ldr	r3, [pc, #364]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	4a5a      	ldr	r2, [pc, #360]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	f023 0301 	bic.w	r3, r3, #1
 8004a24:	6213      	str	r3, [r2, #32]
 8004a26:	4b58      	ldr	r3, [pc, #352]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	4a57      	ldr	r2, [pc, #348]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	f023 0304 	bic.w	r3, r3, #4
 8004a30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d015      	beq.n	8004a66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a3a:	f7ff fb91 	bl	8004160 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a42:	f7ff fb8d 	bl	8004160 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e0b1      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a58:	4b4b      	ldr	r3, [pc, #300]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ee      	beq.n	8004a42 <HAL_RCC_OscConfig+0x37e>
 8004a64:	e014      	b.n	8004a90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a66:	f7ff fb7b 	bl	8004160 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7ff fb77 	bl	8004160 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e09b      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a84:	4b40      	ldr	r3, [pc, #256]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ee      	bne.n	8004a6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a90:	7dfb      	ldrb	r3, [r7, #23]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d105      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a96:	4b3c      	ldr	r3, [pc, #240]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	4a3b      	ldr	r2, [pc, #236]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69db      	ldr	r3, [r3, #28]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 8087 	beq.w	8004bba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004aac:	4b36      	ldr	r3, [pc, #216]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f003 030c 	and.w	r3, r3, #12
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d061      	beq.n	8004b7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d146      	bne.n	8004b4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ac0:	4b33      	ldr	r3, [pc, #204]	; (8004b90 <HAL_RCC_OscConfig+0x4cc>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac6:	f7ff fb4b 	bl	8004160 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ace:	f7ff fb47 	bl	8004160 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e06d      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ae0:	4b29      	ldr	r3, [pc, #164]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af4:	d108      	bne.n	8004b08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004af6:	4b24      	ldr	r3, [pc, #144]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	4921      	ldr	r1, [pc, #132]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b08:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a19      	ldr	r1, [r3, #32]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	430b      	orrs	r3, r1
 8004b1a:	491b      	ldr	r1, [pc, #108]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b20:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCC_OscConfig+0x4cc>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b26:	f7ff fb1b 	bl	8004160 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2e:	f7ff fb17 	bl	8004160 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e03d      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x46a>
 8004b4c:	e035      	b.n	8004bba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <HAL_RCC_OscConfig+0x4cc>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7ff fb04 	bl	8004160 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7ff fb00 	bl	8004160 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e026      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <HAL_RCC_OscConfig+0x4c4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x498>
 8004b7a:	e01e      	b.n	8004bba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e019      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
 8004b88:	40021000 	.word	0x40021000
 8004b8c:	40007000 	.word	0x40007000
 8004b90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <HAL_RCC_OscConfig+0x500>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0d0      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bdc:	4b6a      	ldr	r3, [pc, #424]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d910      	bls.n	8004c0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bea:	4b67      	ldr	r3, [pc, #412]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 0207 	bic.w	r2, r3, #7
 8004bf2:	4965      	ldr	r1, [pc, #404]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b63      	ldr	r3, [pc, #396]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d001      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0b8      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d020      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c24:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004c2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c3c:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	4a52      	ldr	r2, [pc, #328]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004c46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4b50      	ldr	r3, [pc, #320]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	494d      	ldr	r1, [pc, #308]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d040      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d107      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c6e:	4b47      	ldr	r3, [pc, #284]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d115      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e07f      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d107      	bne.n	8004c96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d109      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e073      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e06b      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca6:	4b39      	ldr	r3, [pc, #228]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f023 0203 	bic.w	r2, r3, #3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4936      	ldr	r1, [pc, #216]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb8:	f7ff fa52 	bl	8004160 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7ff fa4e 	bl	8004160 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e053      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd6:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f003 020c 	and.w	r2, r3, #12
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d1eb      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d210      	bcs.n	8004d18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 0207 	bic.w	r2, r3, #7
 8004cfe:	4922      	ldr	r1, [pc, #136]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d06:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0307 	and.w	r3, r3, #7
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e032      	b.n	8004d7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d008      	beq.n	8004d36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d24:	4b19      	ldr	r3, [pc, #100]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	4916      	ldr	r1, [pc, #88]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d32:	4313      	orrs	r3, r2
 8004d34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d009      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	490e      	ldr	r1, [pc, #56]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d56:	f000 f821 	bl	8004d9c <HAL_RCC_GetSysClockFreq>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	091b      	lsrs	r3, r3, #4
 8004d62:	f003 030f 	and.w	r3, r3, #15
 8004d66:	490a      	ldr	r1, [pc, #40]	; (8004d90 <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	5ccb      	ldrb	r3, [r1, r3]
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <HAL_RCC_ClockConfig+0x1cc>)
 8004d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_ClockConfig+0x1d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff f9b0 	bl	80040dc <HAL_InitTick>

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40022000 	.word	0x40022000
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	08007924 	.word	0x08007924
 8004d94:	20000018 	.word	0x20000018
 8004d98:	2000004c 	.word	0x2000004c

08004d9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	2300      	movs	r3, #0
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	2300      	movs	r3, #0
 8004db0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004db6:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 030c 	and.w	r3, r3, #12
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d002      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x30>
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d003      	beq.n	8004dd2 <HAL_RCC_GetSysClockFreq+0x36>
 8004dca:	e027      	b.n	8004e1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004dcc:	4b19      	ldr	r3, [pc, #100]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dce:	613b      	str	r3, [r7, #16]
      break;
 8004dd0:	e027      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0c9b      	lsrs	r3, r3, #18
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	4a17      	ldr	r2, [pc, #92]	; (8004e38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ddc:	5cd3      	ldrb	r3, [r2, r3]
 8004dde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d010      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004dea:	4b11      	ldr	r3, [pc, #68]	; (8004e30 <HAL_RCC_GetSysClockFreq+0x94>)
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	0c5b      	lsrs	r3, r3, #17
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	4a11      	ldr	r2, [pc, #68]	; (8004e3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004df6:	5cd3      	ldrb	r3, [r2, r3]
 8004df8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a0d      	ldr	r2, [pc, #52]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004dfe:	fb03 f202 	mul.w	r2, r3, r2
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	e004      	b.n	8004e16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a0c      	ldr	r2, [pc, #48]	; (8004e40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	613b      	str	r3, [r7, #16]
      break;
 8004e1a:	e002      	b.n	8004e22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e1e:	613b      	str	r3, [r7, #16]
      break;
 8004e20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e22:	693b      	ldr	r3, [r7, #16]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	40021000 	.word	0x40021000
 8004e34:	007a1200 	.word	0x007a1200
 8004e38:	0800793c 	.word	0x0800793c
 8004e3c:	0800794c 	.word	0x0800794c
 8004e40:	003d0900 	.word	0x003d0900

08004e44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e44:	b480      	push	{r7}
 8004e46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e48:	4b02      	ldr	r3, [pc, #8]	; (8004e54 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bc80      	pop	{r7}
 8004e52:	4770      	bx	lr
 8004e54:	20000018 	.word	0x20000018

08004e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e5c:	f7ff fff2 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e60:	4602      	mov	r2, r0
 8004e62:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	0a1b      	lsrs	r3, r3, #8
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	4903      	ldr	r1, [pc, #12]	; (8004e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e6e:	5ccb      	ldrb	r3, [r1, r3]
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	bd80      	pop	{r7, pc}
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	08007934 	.word	0x08007934

08004e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e84:	f7ff ffde 	bl	8004e44 <HAL_RCC_GetHCLKFreq>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	0adb      	lsrs	r3, r3, #11
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	4903      	ldr	r1, [pc, #12]	; (8004ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e96:	5ccb      	ldrb	r3, [r1, r3]
 8004e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	08007934 	.word	0x08007934

08004ea8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <RCC_Delay+0x34>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <RCC_Delay+0x38>)
 8004eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eba:	0a5b      	lsrs	r3, r3, #9
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	fb02 f303 	mul.w	r3, r2, r3
 8004ec2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ec4:	bf00      	nop
  }
  while (Delay --);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	60fa      	str	r2, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f9      	bne.n	8004ec4 <RCC_Delay+0x1c>
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	20000018 	.word	0x20000018
 8004ee0:	10624dd3 	.word	0x10624dd3

08004ee4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	613b      	str	r3, [r7, #16]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d07d      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f04:	4b4f      	ldr	r3, [pc, #316]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10d      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f10:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	4a4b      	ldr	r2, [pc, #300]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f1a:	61d3      	str	r3, [r2, #28]
 8004f1c:	4b49      	ldr	r3, [pc, #292]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b46      	ldr	r3, [pc, #280]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d118      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f38:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a42      	ldr	r2, [pc, #264]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f44:	f7ff f90c 	bl	8004160 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4a:	e008      	b.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f4c:	f7ff f908 	bl	8004160 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b64      	cmp	r3, #100	; 0x64
 8004f58:	d901      	bls.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e06d      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f5e:	4b3a      	ldr	r3, [pc, #232]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d0f0      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f6a:	4b36      	ldr	r3, [pc, #216]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02e      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d027      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f88:	4b2e      	ldr	r3, [pc, #184]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f90:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f92:	4b2e      	ldr	r3, [pc, #184]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f94:	2201      	movs	r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f98:	4b2c      	ldr	r3, [pc, #176]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f9e:	4a29      	ldr	r2, [pc, #164]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d014      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7ff f8d7 	bl	8004160 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb4:	e00a      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7ff f8d3 	bl	8004160 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e036      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fcc:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fce:	6a1b      	ldr	r3, [r3, #32]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ee      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4917      	ldr	r1, [pc, #92]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d105      	bne.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ff6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d008      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005008:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	490b      	ldr	r1, [pc, #44]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005016:	4313      	orrs	r3, r2
 8005018:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d008      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005026:	4b07      	ldr	r3, [pc, #28]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4904      	ldr	r1, [pc, #16]	; (8005044 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40021000 	.word	0x40021000
 8005048:	40007000 	.word	0x40007000
 800504c:	42420440 	.word	0x42420440

08005050 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b088      	sub	sp, #32
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
 8005060:	2300      	movs	r3, #0
 8005062:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b10      	cmp	r3, #16
 8005070:	d00a      	beq.n	8005088 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2b10      	cmp	r3, #16
 8005076:	f200 808a 	bhi.w	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d045      	beq.n	800510c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d075      	beq.n	8005172 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005086:	e082      	b.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005088:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800508e:	4b45      	ldr	r3, [pc, #276]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d07b      	beq.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	0c9b      	lsrs	r3, r3, #18
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	4a41      	ldr	r2, [pc, #260]	; (80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80050a4:	5cd3      	ldrb	r3, [r2, r3]
 80050a6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d015      	beq.n	80050de <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050b2:	4b3c      	ldr	r3, [pc, #240]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	0c5b      	lsrs	r3, r3, #17
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	4a3b      	ldr	r2, [pc, #236]	; (80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80050be:	5cd3      	ldrb	r3, [r2, r3]
 80050c0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00d      	beq.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80050cc:	4a38      	ldr	r2, [pc, #224]	; (80051b0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	fb02 f303 	mul.w	r3, r2, r3
 80050da:	61fb      	str	r3, [r7, #28]
 80050dc:	e004      	b.n	80050e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4a34      	ldr	r2, [pc, #208]	; (80051b4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80050e2:	fb02 f303 	mul.w	r3, r2, r3
 80050e6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80050e8:	4b2e      	ldr	r3, [pc, #184]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f4:	d102      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	61bb      	str	r3, [r7, #24]
      break;
 80050fa:	e04a      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	4a2d      	ldr	r2, [pc, #180]	; (80051b8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	61bb      	str	r3, [r7, #24]
      break;
 800510a:	e042      	b.n	8005192 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800510c:	4b25      	ldr	r3, [pc, #148]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d108      	bne.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e01f      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800513a:	d109      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800513c:	4b19      	ldr	r3, [pc, #100]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005148:	f649 4340 	movw	r3, #40000	; 0x9c40
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	e00f      	b.n	8005170 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800515a:	d11c      	bne.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800515c:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d016      	beq.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005168:	f24f 4324 	movw	r3, #62500	; 0xf424
 800516c:	61bb      	str	r3, [r7, #24]
      break;
 800516e:	e012      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005170:	e011      	b.n	8005196 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005172:	f7ff fe85 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	0b9b      	lsrs	r3, r3, #14
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	3301      	adds	r3, #1
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	61bb      	str	r3, [r7, #24]
      break;
 800518c:	e004      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800518e:	bf00      	nop
 8005190:	e002      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005192:	bf00      	nop
 8005194:	e000      	b.n	8005198 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005196:	bf00      	nop
    }
  }
  return (frequency);
 8005198:	69bb      	ldr	r3, [r7, #24]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3720      	adds	r7, #32
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40021000 	.word	0x40021000
 80051a8:	08007950 	.word	0x08007950
 80051ac:	08007960 	.word	0x08007960
 80051b0:	007a1200 	.word	0x007a1200
 80051b4:	003d0900 	.word	0x003d0900
 80051b8:	aaaaaaab 	.word	0xaaaaaaab

080051bc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e07a      	b.n	80052c8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	7c5b      	ldrb	r3, [r3, #17]
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d105      	bne.n	80051e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fcfc 	bl	8000be0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 faea 	bl	80057c8 <HAL_RTC_WaitForSynchro>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2204      	movs	r2, #4
 80051fe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e061      	b.n	80052c8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fba3 	bl	8005950 <RTC_EnterInitMode>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d004      	beq.n	800521a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2204      	movs	r2, #4
 8005214:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e056      	b.n	80052c8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0207 	bic.w	r2, r2, #7
 8005228:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8005232:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RTC_Init+0x114>)
 8005234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005236:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <HAL_RTC_Init+0x114>)
 8005238:	f023 0301 	bic.w	r3, r3, #1
 800523c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800523e:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_RTC_Init+0x114>)
 8005240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005242:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	4921      	ldr	r1, [pc, #132]	; (80052d0 <HAL_RTC_Init+0x114>)
 800524c:	4313      	orrs	r3, r2
 800524e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005258:	d003      	beq.n	8005262 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	e00e      	b.n	8005280 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8005262:	2001      	movs	r0, #1
 8005264:	f7ff fef4 	bl	8005050 <HAL_RCCEx_GetPeriphCLKFreq>
 8005268:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2204      	movs	r2, #4
 8005274:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e026      	b.n	80052c8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3b01      	subs	r3, #1
 800527e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	0c1a      	lsrs	r2, r3, #16
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f002 020f 	and.w	r2, r2, #15
 800528c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	b292      	uxth	r2, r2
 8005296:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fb81 	bl	80059a0 <RTC_ExitInitMode>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2204      	movs	r2, #4
 80052a8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e00c      	b.n	80052c8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80052c6:	2300      	movs	r3, #0
  }
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40006c00 	.word	0x40006c00

080052d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80052d4:	b590      	push	{r4, r7, lr}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	2300      	movs	r3, #0
 80052e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <HAL_RTC_SetTime+0x20>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e080      	b.n	80053fa <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	7c1b      	ldrb	r3, [r3, #16]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d101      	bne.n	8005304 <HAL_RTC_SetTime+0x30>
 8005300:	2302      	movs	r3, #2
 8005302:	e07a      	b.n	80053fa <HAL_RTC_SetTime+0x126>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2201      	movs	r2, #1
 8005308:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d113      	bne.n	800533e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005320:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	4619      	mov	r1, r3
 800532a:	460b      	mov	r3, r1
 800532c:	011b      	lsls	r3, r3, #4
 800532e:	1a5b      	subs	r3, r3, r1
 8005330:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005332:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8005338:	4413      	add	r3, r2
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	e01e      	b.n	800537c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fb71 	bl	8005a2a <RTC_Bcd2ToByte>
 8005348:	4603      	mov	r3, r0
 800534a:	461a      	mov	r2, r3
 800534c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005350:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	785b      	ldrb	r3, [r3, #1]
 8005358:	4618      	mov	r0, r3
 800535a:	f000 fb66 	bl	8005a2a <RTC_Bcd2ToByte>
 800535e:	4603      	mov	r3, r0
 8005360:	461a      	mov	r2, r3
 8005362:	4613      	mov	r3, r2
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800536a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	789b      	ldrb	r3, [r3, #2]
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fb5a 	bl	8005a2a <RTC_Bcd2ToByte>
 8005376:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8005378:	4423      	add	r3, r4
 800537a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800537c:	6979      	ldr	r1, [r7, #20]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fa7f 	bl	8005882 <RTC_WriteTimeCounter>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2204      	movs	r2, #4
 800538e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e02f      	b.n	80053fa <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0205 	bic.w	r2, r2, #5
 80053a8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fa90 	bl	80058d0 <RTC_ReadAlarmCounter>
 80053b0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b8:	d018      	beq.n	80053ec <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d214      	bcs.n	80053ec <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80053c8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80053cc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80053ce:	6939      	ldr	r1, [r7, #16]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fa96 	bl	8005902 <RTC_WriteAlarmCounter>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2204      	movs	r2, #4
 80053e0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e006      	b.n	80053fa <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80053f8:	2300      	movs	r3, #0
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd90      	pop	{r4, r7, pc}
	...

08005404 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	2300      	movs	r3, #0
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	2300      	movs	r3, #0
 800541e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_RTC_GetTime+0x28>
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e0b5      	b.n	800559c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f003 0304 	and.w	r3, r3, #4
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0ac      	b.n	800559c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 f9ed 	bl	8005822 <RTC_ReadTimeCounter>
 8005448:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	4a55      	ldr	r2, [pc, #340]	; (80055a4 <HAL_RTC_GetTime+0x1a0>)
 800544e:	fba2 2303 	umull	r2, r3, r2, r3
 8005452:	0adb      	lsrs	r3, r3, #11
 8005454:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4b52      	ldr	r3, [pc, #328]	; (80055a4 <HAL_RTC_GetTime+0x1a0>)
 800545a:	fba3 1302 	umull	r1, r3, r3, r2
 800545e:	0adb      	lsrs	r3, r3, #11
 8005460:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005464:	fb01 f303 	mul.w	r3, r1, r3
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	4a4f      	ldr	r2, [pc, #316]	; (80055a8 <HAL_RTC_GetTime+0x1a4>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	b2da      	uxtb	r2, r3
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4a4a      	ldr	r2, [pc, #296]	; (80055a4 <HAL_RTC_GetTime+0x1a0>)
 800547c:	fba2 1203 	umull	r1, r2, r2, r3
 8005480:	0ad2      	lsrs	r2, r2, #11
 8005482:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8005486:	fb01 f202 	mul.w	r2, r1, r2
 800548a:	1a9a      	subs	r2, r3, r2
 800548c:	4b46      	ldr	r3, [pc, #280]	; (80055a8 <HAL_RTC_GetTime+0x1a4>)
 800548e:	fba3 1302 	umull	r1, r3, r3, r2
 8005492:	0959      	lsrs	r1, r3, #5
 8005494:	460b      	mov	r3, r1
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	1a5b      	subs	r3, r3, r1
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	1ad1      	subs	r1, r2, r3
 800549e:	b2ca      	uxtb	r2, r1
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	2b17      	cmp	r3, #23
 80054a8:	d955      	bls.n	8005556 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	4a3f      	ldr	r2, [pc, #252]	; (80055ac <HAL_RTC_GetTime+0x1a8>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80054b6:	6939      	ldr	r1, [r7, #16]
 80054b8:	4b3c      	ldr	r3, [pc, #240]	; (80055ac <HAL_RTC_GetTime+0x1a8>)
 80054ba:	fba3 2301 	umull	r2, r3, r3, r1
 80054be:	091a      	lsrs	r2, r3, #4
 80054c0:	4613      	mov	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	1aca      	subs	r2, r1, r3
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f9fd 	bl	80058d0 <RTC_ReadAlarmCounter>
 80054d6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054de:	d008      	beq.n	80054f2 <HAL_RTC_GetTime+0xee>
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d904      	bls.n	80054f2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e002      	b.n	80054f8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295
 80054f6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_RTC_GetTime+0x1ac>)
 80054fc:	fb02 f303 	mul.w	r3, r2, r3
 8005500:	69ba      	ldr	r2, [r7, #24]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8005506:	69b9      	ldr	r1, [r7, #24]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f9ba 	bl	8005882 <RTC_WriteTimeCounter>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e041      	b.n	800559c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d00c      	beq.n	800553a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4413      	add	r3, r2
 8005526:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	68f8      	ldr	r0, [r7, #12]
 800552c:	f000 f9e9 	bl	8005902 <RTC_WriteAlarmCounter>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e030      	b.n	800559c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800553a:	69f9      	ldr	r1, [r7, #28]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f9e0 	bl	8005902 <RTC_WriteAlarmCounter>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e027      	b.n	800559c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800554c:	6979      	ldr	r1, [r7, #20]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 fa88 	bl	8005a64 <RTC_DateUpdate>
 8005554:	e003      	b.n	800555e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01a      	beq.n	800559a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 fa41 	bl	80059f0 <RTC_ByteToBcd2>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	4618      	mov	r0, r3
 800557c:	f000 fa38 	bl	80059f0 <RTC_ByteToBcd2>
 8005580:	4603      	mov	r3, r0
 8005582:	461a      	mov	r2, r3
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	789b      	ldrb	r3, [r3, #2]
 800558c:	4618      	mov	r0, r3
 800558e:	f000 fa2f 	bl	80059f0 <RTC_ByteToBcd2>
 8005592:	4603      	mov	r3, r0
 8005594:	461a      	mov	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	91a2b3c5 	.word	0x91a2b3c5
 80055a8:	88888889 	.word	0x88888889
 80055ac:	aaaaaaab 	.word	0xaaaaaaab
 80055b0:	00015180 	.word	0x00015180

080055b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b088      	sub	sp, #32
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]
 80055c8:	2300      	movs	r3, #0
 80055ca:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d002      	beq.n	80055d8 <HAL_RTC_SetDate+0x24>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e097      	b.n	800570c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	7c1b      	ldrb	r3, [r3, #16]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_RTC_SetDate+0x34>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e091      	b.n	800570c <HAL_RTC_SetDate+0x158>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2202      	movs	r2, #2
 80055f2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10c      	bne.n	8005614 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	78da      	ldrb	r2, [r3, #3]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	785a      	ldrb	r2, [r3, #1]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	789a      	ldrb	r2, [r3, #2]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	739a      	strb	r2, [r3, #14]
 8005612:	e01a      	b.n	800564a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	78db      	ldrb	r3, [r3, #3]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fa06 	bl	8005a2a <RTC_Bcd2ToByte>
 800561e:	4603      	mov	r3, r0
 8005620:	461a      	mov	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f9fd 	bl	8005a2a <RTC_Bcd2ToByte>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	789b      	ldrb	r3, [r3, #2]
 800563c:	4618      	mov	r0, r3
 800563e:	f000 f9f4 	bl	8005a2a <RTC_Bcd2ToByte>
 8005642:	4603      	mov	r3, r0
 8005644:	461a      	mov	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	7bdb      	ldrb	r3, [r3, #15]
 800564e:	4618      	mov	r0, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	7b59      	ldrb	r1, [r3, #13]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	7b9b      	ldrb	r3, [r3, #14]
 8005658:	461a      	mov	r2, r3
 800565a:	f000 fadf 	bl	8005c1c <RTC_WeekDayNum>
 800565e:	4603      	mov	r3, r0
 8005660:	461a      	mov	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	7b1a      	ldrb	r2, [r3, #12]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f8d7 	bl	8005822 <RTC_ReadTimeCounter>
 8005674:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	4a26      	ldr	r2, [pc, #152]	; (8005714 <HAL_RTC_SetDate+0x160>)
 800567a:	fba2 2303 	umull	r2, r3, r2, r3
 800567e:	0adb      	lsrs	r3, r3, #11
 8005680:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2b18      	cmp	r3, #24
 8005686:	d93a      	bls.n	80056fe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	4a23      	ldr	r2, [pc, #140]	; (8005718 <HAL_RTC_SetDate+0x164>)
 800568c:	fba2 2303 	umull	r2, r3, r2, r3
 8005690:	091b      	lsrs	r3, r3, #4
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_RTC_SetDate+0x168>)
 8005694:	fb02 f303 	mul.w	r3, r2, r3
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800569e:	69f9      	ldr	r1, [r7, #28]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f8ee 	bl	8005882 <RTC_WriteTimeCounter>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2204      	movs	r2, #4
 80056b0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e027      	b.n	800570c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f907 	bl	80058d0 <RTC_ReadAlarmCounter>
 80056c2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d018      	beq.n	80056fe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d214      	bcs.n	80056fe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80056da:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80056de:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80056e0:	69b9      	ldr	r1, [r7, #24]
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f000 f90d 	bl	8005902 <RTC_WriteAlarmCounter>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2204      	movs	r2, #4
 80056f2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e006      	b.n	800570c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3720      	adds	r7, #32
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	91a2b3c5 	.word	0x91a2b3c5
 8005718:	aaaaaaab 	.word	0xaaaaaaab
 800571c:	00015180 	.word	0x00015180

08005720 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800572c:	f107 0314 	add.w	r3, r7, #20
 8005730:	2100      	movs	r1, #0
 8005732:	460a      	mov	r2, r1
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	460a      	mov	r2, r1
 8005738:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <HAL_RTC_GetDate+0x26>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e03a      	b.n	80057c0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800574a:	f107 0314 	add.w	r3, r7, #20
 800574e:	2200      	movs	r2, #0
 8005750:	4619      	mov	r1, r3
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fe56 	bl	8005404 <HAL_RTC_GetTime>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e02e      	b.n	80057c0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	7b1a      	ldrb	r2, [r3, #12]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	7bda      	ldrb	r2, [r3, #15]
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	7b5a      	ldrb	r2, [r3, #13]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7b9a      	ldrb	r2, [r3, #14]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d01a      	beq.n	80057be <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	78db      	ldrb	r3, [r3, #3]
 800578c:	4618      	mov	r0, r3
 800578e:	f000 f92f 	bl	80059f0 <RTC_ByteToBcd2>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 f926 	bl	80059f0 <RTC_ByteToBcd2>
 80057a4:	4603      	mov	r3, r0
 80057a6:	461a      	mov	r2, r3
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	789b      	ldrb	r3, [r3, #2]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f91d 	bl	80059f0 <RTC_ByteToBcd2>
 80057b6:	4603      	mov	r3, r0
 80057b8:	461a      	mov	r2, r3
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e01d      	b.n	800581a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685a      	ldr	r2, [r3, #4]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 0208 	bic.w	r2, r2, #8
 80057ec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80057ee:	f7fe fcb7 	bl	8004160 <HAL_GetTick>
 80057f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80057f4:	e009      	b.n	800580a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80057f6:	f7fe fcb3 	bl	8004160 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005804:	d901      	bls.n	800580a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e007      	b.n	800581a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f003 0308 	and.w	r3, r3, #8
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ee      	beq.n	80057f6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8005822:	b480      	push	{r7}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	827b      	strh	r3, [r7, #18]
 800582e:	2300      	movs	r3, #0
 8005830:	823b      	strh	r3, [r7, #16]
 8005832:	2300      	movs	r3, #0
 8005834:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69db      	ldr	r3, [r3, #28]
 8005848:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8005852:	8a7a      	ldrh	r2, [r7, #18]
 8005854:	8a3b      	ldrh	r3, [r7, #16]
 8005856:	429a      	cmp	r2, r3
 8005858:	d008      	beq.n	800586c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800585a:	8a3b      	ldrh	r3, [r7, #16]
 800585c:	041a      	lsls	r2, r3, #16
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	b29b      	uxth	r3, r3
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	e004      	b.n	8005876 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800586c:	8a7b      	ldrh	r3, [r7, #18]
 800586e:	041a      	lsls	r2, r3, #16
 8005870:	89fb      	ldrh	r3, [r7, #14]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8005876:	697b      	ldr	r3, [r7, #20]
}
 8005878:	4618      	mov	r0, r3
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr

08005882 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f85d 	bl	8005950 <RTC_EnterInitMode>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d002      	beq.n	80058a2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]
 80058a0:	e011      	b.n	80058c6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	0c12      	lsrs	r2, r2, #16
 80058aa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	b292      	uxth	r2, r2
 80058b4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f872 	bl	80059a0 <RTC_ExitInitMode>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3710      	adds	r7, #16
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80058d8:	2300      	movs	r3, #0
 80058da:	81fb      	strh	r3, [r7, #14]
 80058dc:	2300      	movs	r3, #0
 80058de:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ee:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	041a      	lsls	r2, r3, #16
 80058f4:	89bb      	ldrh	r3, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bc80      	pop	{r7}
 8005900:	4770      	bx	lr

08005902 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
 800590a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 f81d 	bl	8005950 <RTC_EnterInitMode>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	73fb      	strb	r3, [r7, #15]
 8005920:	e011      	b.n	8005946 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	0c12      	lsrs	r2, r2, #16
 800592a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	b292      	uxth	r2, r2
 8005934:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 f832 	bl	80059a0 <RTC_ExitInitMode>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d001      	beq.n	8005946 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005946:	7bfb      	ldrb	r3, [r7, #15]
}
 8005948:	4618      	mov	r0, r3
 800594a:	3710      	adds	r7, #16
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800595c:	f7fe fc00 	bl	8004160 <HAL_GetTick>
 8005960:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005962:	e009      	b.n	8005978 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8005964:	f7fe fbfc 	bl	8004160 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005972:	d901      	bls.n	8005978 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e00f      	b.n	8005998 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0ee      	beq.n	8005964 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0210 	orr.w	r2, r2, #16
 8005994:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3710      	adds	r7, #16
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0210 	bic.w	r2, r2, #16
 80059ba:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80059bc:	f7fe fbd0 	bl	8004160 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059c2:	e009      	b.n	80059d8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80059c4:	f7fe fbcc 	bl	8004160 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059d2:	d901      	bls.n	80059d8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e007      	b.n	80059e8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0ee      	beq.n	80059c4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80059fe:	e005      	b.n	8005a0c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	3301      	adds	r3, #1
 8005a04:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8005a06:	79fb      	ldrb	r3, [r7, #7]
 8005a08:	3b0a      	subs	r3, #10
 8005a0a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8005a0c:	79fb      	ldrb	r3, [r7, #7]
 8005a0e:	2b09      	cmp	r3, #9
 8005a10:	d8f6      	bhi.n	8005a00 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	011b      	lsls	r3, r3, #4
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	79fb      	ldrb	r3, [r7, #7]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	b2db      	uxtb	r3, r3
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b085      	sub	sp, #20
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	4603      	mov	r3, r0
 8005a32:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	461a      	mov	r2, r3
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	b2db      	uxtb	r3, r3
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bc80      	pop	{r7}
 8005a62:	4770      	bx	lr

08005a64 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	2300      	movs	r3, #0
 8005a74:	613b      	str	r3, [r7, #16]
 8005a76:	2300      	movs	r3, #0
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7bdb      	ldrb	r3, [r3, #15]
 8005a82:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	7b5b      	ldrb	r3, [r3, #13]
 8005a88:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7b9b      	ldrb	r3, [r3, #14]
 8005a8e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8005a90:	2300      	movs	r3, #0
 8005a92:	60bb      	str	r3, [r7, #8]
 8005a94:	e06f      	b.n	8005b76 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d011      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d00e      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b05      	cmp	r3, #5
 8005aa6:	d00b      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b07      	cmp	r3, #7
 8005aac:	d008      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d005      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0a      	cmp	r3, #10
 8005ab8:	d002      	beq.n	8005ac0 <RTC_DateUpdate+0x5c>
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b0c      	cmp	r3, #12
 8005abe:	d117      	bne.n	8005af0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b1e      	cmp	r3, #30
 8005ac4:	d803      	bhi.n	8005ace <RTC_DateUpdate+0x6a>
      {
        day++;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005acc:	e050      	b.n	8005b70 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d005      	beq.n	8005ae0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ada:	2301      	movs	r3, #1
 8005adc:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8005ade:	e047      	b.n	8005b70 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
          year++;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3301      	adds	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8005aee:	e03f      	b.n	8005b70 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d008      	beq.n	8005b08 <RTC_DateUpdate+0xa4>
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d005      	beq.n	8005b08 <RTC_DateUpdate+0xa4>
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	d002      	beq.n	8005b08 <RTC_DateUpdate+0xa4>
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b0b      	cmp	r3, #11
 8005b06:	d10c      	bne.n	8005b22 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b1d      	cmp	r3, #29
 8005b0c:	d803      	bhi.n	8005b16 <RTC_DateUpdate+0xb2>
      {
        day++;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3301      	adds	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b14:	e02c      	b.n	8005b70 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8005b20:	e026      	b.n	8005b70 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d123      	bne.n	8005b70 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b1b      	cmp	r3, #27
 8005b2c:	d803      	bhi.n	8005b36 <RTC_DateUpdate+0xd2>
      {
        day++;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	3301      	adds	r3, #1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e01c      	b.n	8005b70 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b1c      	cmp	r3, #28
 8005b3a:	d111      	bne.n	8005b60 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 f839 	bl	8005bb8 <RTC_IsLeapYear>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <RTC_DateUpdate+0xf0>
        {
          day++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	e00d      	b.n	8005b70 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	3301      	adds	r3, #1
 8005b58:	613b      	str	r3, [r7, #16]
          day = 1U;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	60fb      	str	r3, [r7, #12]
 8005b5e:	e007      	b.n	8005b70 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b1d      	cmp	r3, #29
 8005b64:	d104      	bne.n	8005b70 <RTC_DateUpdate+0x10c>
      {
        month++;
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	613b      	str	r3, [r7, #16]
        day = 1U;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d38b      	bcc.n	8005a96 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6978      	ldr	r0, [r7, #20]
 8005ba2:	f000 f83b 	bl	8005c1c <RTC_WeekDayNum>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	731a      	strb	r2, [r3, #12]
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	f003 0303 	and.w	r3, r3, #3
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	e01d      	b.n	8005c0e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8005bd2:	88fb      	ldrh	r3, [r7, #6]
 8005bd4:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <RTC_IsLeapYear+0x60>)
 8005bd6:	fba2 1203 	umull	r1, r2, r2, r3
 8005bda:	0952      	lsrs	r2, r2, #5
 8005bdc:	2164      	movs	r1, #100	; 0x64
 8005bde:	fb01 f202 	mul.w	r2, r1, r2
 8005be2:	1a9b      	subs	r3, r3, r2
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e00f      	b.n	8005c0e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <RTC_IsLeapYear+0x60>)
 8005bf2:	fba2 1203 	umull	r1, r2, r2, r3
 8005bf6:	09d2      	lsrs	r2, r2, #7
 8005bf8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005bfc:	fb01 f202 	mul.w	r2, r1, r2
 8005c00:	1a9b      	subs	r3, r3, r2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8005c0c:	2300      	movs	r3, #0
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr
 8005c18:	51eb851f 	.word	0x51eb851f

08005c1c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60bb      	str	r3, [r7, #8]
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8005c3a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8005c3c:	78fb      	ldrb	r3, [r7, #3]
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d82d      	bhi.n	8005c9e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8005c42:	78fa      	ldrb	r2, [r7, #3]
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <RTC_WeekDayNum+0xe4>)
 8005c50:	fba2 2303 	umull	r2, r3, r2, r3
 8005c54:	085a      	lsrs	r2, r3, #1
 8005c56:	78bb      	ldrb	r3, [r7, #2]
 8005c58:	441a      	add	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	441a      	add	r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	4926      	ldr	r1, [pc, #152]	; (8005d04 <RTC_WeekDayNum+0xe8>)
 8005c6c:	fba1 1303 	umull	r1, r3, r1, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	1ad2      	subs	r2, r2, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	4922      	ldr	r1, [pc, #136]	; (8005d04 <RTC_WeekDayNum+0xe8>)
 8005c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8005c7e:	09db      	lsrs	r3, r3, #7
 8005c80:	4413      	add	r3, r2
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <RTC_WeekDayNum+0xec>)
 8005c86:	fba3 1302 	umull	r1, r3, r3, r2
 8005c8a:	1ad1      	subs	r1, r2, r3
 8005c8c:	0849      	lsrs	r1, r1, #1
 8005c8e:	440b      	add	r3, r1
 8005c90:	0899      	lsrs	r1, r3, #2
 8005c92:	460b      	mov	r3, r1
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	1a5b      	subs	r3, r3, r1
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	60fb      	str	r3, [r7, #12]
 8005c9c:	e029      	b.n	8005cf2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <RTC_WeekDayNum+0xe4>)
 8005cac:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb0:	085a      	lsrs	r2, r3, #1
 8005cb2:	78bb      	ldrb	r3, [r7, #2]
 8005cb4:	441a      	add	r2, r3
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	441a      	add	r2, r3
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	089b      	lsrs	r3, r3, #2
 8005cbe:	441a      	add	r2, r3
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	4910      	ldr	r1, [pc, #64]	; (8005d04 <RTC_WeekDayNum+0xe8>)
 8005cc4:	fba1 1303 	umull	r1, r3, r1, r3
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	490d      	ldr	r1, [pc, #52]	; (8005d04 <RTC_WeekDayNum+0xe8>)
 8005cd0:	fba1 1303 	umull	r1, r3, r1, r3
 8005cd4:	09db      	lsrs	r3, r3, #7
 8005cd6:	4413      	add	r3, r2
 8005cd8:	1c9a      	adds	r2, r3, #2
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <RTC_WeekDayNum+0xec>)
 8005cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce0:	1ad1      	subs	r1, r2, r3
 8005ce2:	0849      	lsrs	r1, r1, #1
 8005ce4:	440b      	add	r3, r1
 8005ce6:	0899      	lsrs	r1, r3, #2
 8005ce8:	460b      	mov	r3, r1
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	1a5b      	subs	r3, r3, r1
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	b2db      	uxtb	r3, r3
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr
 8005d00:	38e38e39 	.word	0x38e38e39
 8005d04:	51eb851f 	.word	0x51eb851f
 8005d08:	24924925 	.word	0x24924925

08005d0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e076      	b.n	8005e0c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2e:	d009      	beq.n	8005d44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	61da      	str	r2, [r3, #28]
 8005d36:	e005      	b.n	8005d44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fa ff62 	bl	8000c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d8c:	431a      	orrs	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d96:	431a      	orrs	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	431a      	orrs	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005db4:	431a      	orrs	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc8:	ea42 0103 	orr.w	r1, r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	0c1a      	lsrs	r2, r3, #16
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f002 0204 	and.w	r2, r2, #4
 8005dea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	69da      	ldr	r2, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dfa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b082      	sub	sp, #8
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e042      	b.n	8005eac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d106      	bne.n	8005e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f7fa ff3e 	bl	8000cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2224      	movs	r2, #36	; 0x24
 8005e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68da      	ldr	r2, [r3, #12]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f82b 	bl	8005eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	695a      	ldr	r2, [r3, #20]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68da      	ldr	r2, [r3, #12]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005eee:	f023 030c 	bic.w	r3, r3, #12
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6812      	ldr	r2, [r2, #0]
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2c      	ldr	r2, [pc, #176]	; (8005fc8 <UART_SetConfig+0x114>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005f1c:	f7fe ffb0 	bl	8004e80 <HAL_RCC_GetPCLK2Freq>
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	e002      	b.n	8005f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005f24:	f7fe ff98 	bl	8004e58 <HAL_RCC_GetPCLK1Freq>
 8005f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009a      	lsls	r2, r3, #2
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f40:	4a22      	ldr	r2, [pc, #136]	; (8005fcc <UART_SetConfig+0x118>)
 8005f42:	fba2 2303 	umull	r2, r3, r2, r3
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	0119      	lsls	r1, r3, #4
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4413      	add	r3, r2
 8005f52:	009a      	lsls	r2, r3, #2
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f60:	4b1a      	ldr	r3, [pc, #104]	; (8005fcc <UART_SetConfig+0x118>)
 8005f62:	fba3 0302 	umull	r0, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2064      	movs	r0, #100	; 0x64
 8005f6a:	fb00 f303 	mul.w	r3, r0, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	3332      	adds	r3, #50	; 0x32
 8005f74:	4a15      	ldr	r2, [pc, #84]	; (8005fcc <UART_SetConfig+0x118>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f80:	4419      	add	r1, r3
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009a      	lsls	r2, r3, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <UART_SetConfig+0x118>)
 8005f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	2064      	movs	r0, #100	; 0x64
 8005fa2:	fb00 f303 	mul.w	r3, r0, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	011b      	lsls	r3, r3, #4
 8005faa:	3332      	adds	r3, #50	; 0x32
 8005fac:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <UART_SetConfig+0x118>)
 8005fae:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	f003 020f 	and.w	r2, r3, #15
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005fc0:	bf00      	nop
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40013800 	.word	0x40013800
 8005fcc:	51eb851f 	.word	0x51eb851f

08005fd0 <__errno>:
 8005fd0:	4b01      	ldr	r3, [pc, #4]	; (8005fd8 <__errno+0x8>)
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	20000054 	.word	0x20000054

08005fdc <__libc_init_array>:
 8005fdc:	b570      	push	{r4, r5, r6, lr}
 8005fde:	2600      	movs	r6, #0
 8005fe0:	4d0c      	ldr	r5, [pc, #48]	; (8006014 <__libc_init_array+0x38>)
 8005fe2:	4c0d      	ldr	r4, [pc, #52]	; (8006018 <__libc_init_array+0x3c>)
 8005fe4:	1b64      	subs	r4, r4, r5
 8005fe6:	10a4      	asrs	r4, r4, #2
 8005fe8:	42a6      	cmp	r6, r4
 8005fea:	d109      	bne.n	8006000 <__libc_init_array+0x24>
 8005fec:	f001 fb06 	bl	80075fc <_init>
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	4d0a      	ldr	r5, [pc, #40]	; (800601c <__libc_init_array+0x40>)
 8005ff4:	4c0a      	ldr	r4, [pc, #40]	; (8006020 <__libc_init_array+0x44>)
 8005ff6:	1b64      	subs	r4, r4, r5
 8005ff8:	10a4      	asrs	r4, r4, #2
 8005ffa:	42a6      	cmp	r6, r4
 8005ffc:	d105      	bne.n	800600a <__libc_init_array+0x2e>
 8005ffe:	bd70      	pop	{r4, r5, r6, pc}
 8006000:	f855 3b04 	ldr.w	r3, [r5], #4
 8006004:	4798      	blx	r3
 8006006:	3601      	adds	r6, #1
 8006008:	e7ee      	b.n	8005fe8 <__libc_init_array+0xc>
 800600a:	f855 3b04 	ldr.w	r3, [r5], #4
 800600e:	4798      	blx	r3
 8006010:	3601      	adds	r6, #1
 8006012:	e7f2      	b.n	8005ffa <__libc_init_array+0x1e>
 8006014:	08007a04 	.word	0x08007a04
 8006018:	08007a04 	.word	0x08007a04
 800601c:	08007a04 	.word	0x08007a04
 8006020:	08007a08 	.word	0x08007a08

08006024 <memset>:
 8006024:	4603      	mov	r3, r0
 8006026:	4402      	add	r2, r0
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <memset+0xa>
 800602c:	4770      	bx	lr
 800602e:	f803 1b01 	strb.w	r1, [r3], #1
 8006032:	e7f9      	b.n	8006028 <memset+0x4>

08006034 <iprintf>:
 8006034:	b40f      	push	{r0, r1, r2, r3}
 8006036:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <iprintf+0x2c>)
 8006038:	b513      	push	{r0, r1, r4, lr}
 800603a:	681c      	ldr	r4, [r3, #0]
 800603c:	b124      	cbz	r4, 8006048 <iprintf+0x14>
 800603e:	69a3      	ldr	r3, [r4, #24]
 8006040:	b913      	cbnz	r3, 8006048 <iprintf+0x14>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 fb70 	bl	8006728 <__sinit>
 8006048:	ab05      	add	r3, sp, #20
 800604a:	4620      	mov	r0, r4
 800604c:	9a04      	ldr	r2, [sp, #16]
 800604e:	68a1      	ldr	r1, [r4, #8]
 8006050:	9301      	str	r3, [sp, #4]
 8006052:	f000 fed7 	bl	8006e04 <_vfiprintf_r>
 8006056:	b002      	add	sp, #8
 8006058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605c:	b004      	add	sp, #16
 800605e:	4770      	bx	lr
 8006060:	20000054 	.word	0x20000054

08006064 <_puts_r>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	460e      	mov	r6, r1
 8006068:	4605      	mov	r5, r0
 800606a:	b118      	cbz	r0, 8006074 <_puts_r+0x10>
 800606c:	6983      	ldr	r3, [r0, #24]
 800606e:	b90b      	cbnz	r3, 8006074 <_puts_r+0x10>
 8006070:	f000 fb5a 	bl	8006728 <__sinit>
 8006074:	69ab      	ldr	r3, [r5, #24]
 8006076:	68ac      	ldr	r4, [r5, #8]
 8006078:	b913      	cbnz	r3, 8006080 <_puts_r+0x1c>
 800607a:	4628      	mov	r0, r5
 800607c:	f000 fb54 	bl	8006728 <__sinit>
 8006080:	4b2c      	ldr	r3, [pc, #176]	; (8006134 <_puts_r+0xd0>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d120      	bne.n	80060c8 <_puts_r+0x64>
 8006086:	686c      	ldr	r4, [r5, #4]
 8006088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800608a:	07db      	lsls	r3, r3, #31
 800608c:	d405      	bmi.n	800609a <_puts_r+0x36>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	0598      	lsls	r0, r3, #22
 8006092:	d402      	bmi.n	800609a <_puts_r+0x36>
 8006094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006096:	f000 fbe5 	bl	8006864 <__retarget_lock_acquire_recursive>
 800609a:	89a3      	ldrh	r3, [r4, #12]
 800609c:	0719      	lsls	r1, r3, #28
 800609e:	d51d      	bpl.n	80060dc <_puts_r+0x78>
 80060a0:	6923      	ldr	r3, [r4, #16]
 80060a2:	b1db      	cbz	r3, 80060dc <_puts_r+0x78>
 80060a4:	3e01      	subs	r6, #1
 80060a6:	68a3      	ldr	r3, [r4, #8]
 80060a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60a3      	str	r3, [r4, #8]
 80060b0:	bb39      	cbnz	r1, 8006102 <_puts_r+0x9e>
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da38      	bge.n	8006128 <_puts_r+0xc4>
 80060b6:	4622      	mov	r2, r4
 80060b8:	210a      	movs	r1, #10
 80060ba:	4628      	mov	r0, r5
 80060bc:	f000 f95e 	bl	800637c <__swbuf_r>
 80060c0:	3001      	adds	r0, #1
 80060c2:	d011      	beq.n	80060e8 <_puts_r+0x84>
 80060c4:	250a      	movs	r5, #10
 80060c6:	e011      	b.n	80060ec <_puts_r+0x88>
 80060c8:	4b1b      	ldr	r3, [pc, #108]	; (8006138 <_puts_r+0xd4>)
 80060ca:	429c      	cmp	r4, r3
 80060cc:	d101      	bne.n	80060d2 <_puts_r+0x6e>
 80060ce:	68ac      	ldr	r4, [r5, #8]
 80060d0:	e7da      	b.n	8006088 <_puts_r+0x24>
 80060d2:	4b1a      	ldr	r3, [pc, #104]	; (800613c <_puts_r+0xd8>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	bf08      	it	eq
 80060d8:	68ec      	ldreq	r4, [r5, #12]
 80060da:	e7d5      	b.n	8006088 <_puts_r+0x24>
 80060dc:	4621      	mov	r1, r4
 80060de:	4628      	mov	r0, r5
 80060e0:	f000 f99e 	bl	8006420 <__swsetup_r>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	d0dd      	beq.n	80060a4 <_puts_r+0x40>
 80060e8:	f04f 35ff 	mov.w	r5, #4294967295
 80060ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ee:	07da      	lsls	r2, r3, #31
 80060f0:	d405      	bmi.n	80060fe <_puts_r+0x9a>
 80060f2:	89a3      	ldrh	r3, [r4, #12]
 80060f4:	059b      	lsls	r3, r3, #22
 80060f6:	d402      	bmi.n	80060fe <_puts_r+0x9a>
 80060f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060fa:	f000 fbb4 	bl	8006866 <__retarget_lock_release_recursive>
 80060fe:	4628      	mov	r0, r5
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	2b00      	cmp	r3, #0
 8006104:	da04      	bge.n	8006110 <_puts_r+0xac>
 8006106:	69a2      	ldr	r2, [r4, #24]
 8006108:	429a      	cmp	r2, r3
 800610a:	dc06      	bgt.n	800611a <_puts_r+0xb6>
 800610c:	290a      	cmp	r1, #10
 800610e:	d004      	beq.n	800611a <_puts_r+0xb6>
 8006110:	6823      	ldr	r3, [r4, #0]
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	6022      	str	r2, [r4, #0]
 8006116:	7019      	strb	r1, [r3, #0]
 8006118:	e7c5      	b.n	80060a6 <_puts_r+0x42>
 800611a:	4622      	mov	r2, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 f92d 	bl	800637c <__swbuf_r>
 8006122:	3001      	adds	r0, #1
 8006124:	d1bf      	bne.n	80060a6 <_puts_r+0x42>
 8006126:	e7df      	b.n	80060e8 <_puts_r+0x84>
 8006128:	250a      	movs	r5, #10
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	6022      	str	r2, [r4, #0]
 8006130:	701d      	strb	r5, [r3, #0]
 8006132:	e7db      	b.n	80060ec <_puts_r+0x88>
 8006134:	08007988 	.word	0x08007988
 8006138:	080079a8 	.word	0x080079a8
 800613c:	08007968 	.word	0x08007968

08006140 <puts>:
 8006140:	4b02      	ldr	r3, [pc, #8]	; (800614c <puts+0xc>)
 8006142:	4601      	mov	r1, r0
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f7ff bf8d 	b.w	8006064 <_puts_r>
 800614a:	bf00      	nop
 800614c:	20000054 	.word	0x20000054

08006150 <setbuf>:
 8006150:	2900      	cmp	r1, #0
 8006152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006156:	bf0c      	ite	eq
 8006158:	2202      	moveq	r2, #2
 800615a:	2200      	movne	r2, #0
 800615c:	f000 b800 	b.w	8006160 <setvbuf>

08006160 <setvbuf>:
 8006160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006164:	461d      	mov	r5, r3
 8006166:	4b5d      	ldr	r3, [pc, #372]	; (80062dc <setvbuf+0x17c>)
 8006168:	4604      	mov	r4, r0
 800616a:	681f      	ldr	r7, [r3, #0]
 800616c:	460e      	mov	r6, r1
 800616e:	4690      	mov	r8, r2
 8006170:	b127      	cbz	r7, 800617c <setvbuf+0x1c>
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	b913      	cbnz	r3, 800617c <setvbuf+0x1c>
 8006176:	4638      	mov	r0, r7
 8006178:	f000 fad6 	bl	8006728 <__sinit>
 800617c:	4b58      	ldr	r3, [pc, #352]	; (80062e0 <setvbuf+0x180>)
 800617e:	429c      	cmp	r4, r3
 8006180:	d167      	bne.n	8006252 <setvbuf+0xf2>
 8006182:	687c      	ldr	r4, [r7, #4]
 8006184:	f1b8 0f02 	cmp.w	r8, #2
 8006188:	d006      	beq.n	8006198 <setvbuf+0x38>
 800618a:	f1b8 0f01 	cmp.w	r8, #1
 800618e:	f200 809f 	bhi.w	80062d0 <setvbuf+0x170>
 8006192:	2d00      	cmp	r5, #0
 8006194:	f2c0 809c 	blt.w	80062d0 <setvbuf+0x170>
 8006198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800619a:	07db      	lsls	r3, r3, #31
 800619c:	d405      	bmi.n	80061aa <setvbuf+0x4a>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	0598      	lsls	r0, r3, #22
 80061a2:	d402      	bmi.n	80061aa <setvbuf+0x4a>
 80061a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a6:	f000 fb5d 	bl	8006864 <__retarget_lock_acquire_recursive>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4638      	mov	r0, r7
 80061ae:	f000 fa27 	bl	8006600 <_fflush_r>
 80061b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b4:	b141      	cbz	r1, 80061c8 <setvbuf+0x68>
 80061b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ba:	4299      	cmp	r1, r3
 80061bc:	d002      	beq.n	80061c4 <setvbuf+0x64>
 80061be:	4638      	mov	r0, r7
 80061c0:	f000 fbc0 	bl	8006944 <_free_r>
 80061c4:	2300      	movs	r3, #0
 80061c6:	6363      	str	r3, [r4, #52]	; 0x34
 80061c8:	2300      	movs	r3, #0
 80061ca:	61a3      	str	r3, [r4, #24]
 80061cc:	6063      	str	r3, [r4, #4]
 80061ce:	89a3      	ldrh	r3, [r4, #12]
 80061d0:	0619      	lsls	r1, r3, #24
 80061d2:	d503      	bpl.n	80061dc <setvbuf+0x7c>
 80061d4:	4638      	mov	r0, r7
 80061d6:	6921      	ldr	r1, [r4, #16]
 80061d8:	f000 fbb4 	bl	8006944 <_free_r>
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	f1b8 0f02 	cmp.w	r8, #2
 80061e2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80061e6:	f023 0303 	bic.w	r3, r3, #3
 80061ea:	81a3      	strh	r3, [r4, #12]
 80061ec:	d06c      	beq.n	80062c8 <setvbuf+0x168>
 80061ee:	ab01      	add	r3, sp, #4
 80061f0:	466a      	mov	r2, sp
 80061f2:	4621      	mov	r1, r4
 80061f4:	4638      	mov	r0, r7
 80061f6:	f000 fb37 	bl	8006868 <__swhatbuf_r>
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	4318      	orrs	r0, r3
 80061fe:	81a0      	strh	r0, [r4, #12]
 8006200:	2d00      	cmp	r5, #0
 8006202:	d130      	bne.n	8006266 <setvbuf+0x106>
 8006204:	9d00      	ldr	r5, [sp, #0]
 8006206:	4628      	mov	r0, r5
 8006208:	f000 fb94 	bl	8006934 <malloc>
 800620c:	4606      	mov	r6, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d155      	bne.n	80062be <setvbuf+0x15e>
 8006212:	f8dd 9000 	ldr.w	r9, [sp]
 8006216:	45a9      	cmp	r9, r5
 8006218:	d14a      	bne.n	80062b0 <setvbuf+0x150>
 800621a:	f04f 35ff 	mov.w	r5, #4294967295
 800621e:	2200      	movs	r2, #0
 8006220:	60a2      	str	r2, [r4, #8]
 8006222:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8006226:	6022      	str	r2, [r4, #0]
 8006228:	6122      	str	r2, [r4, #16]
 800622a:	2201      	movs	r2, #1
 800622c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006230:	6162      	str	r2, [r4, #20]
 8006232:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	07d2      	lsls	r2, r2, #31
 800623a:	81a3      	strh	r3, [r4, #12]
 800623c:	d405      	bmi.n	800624a <setvbuf+0xea>
 800623e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8006242:	d102      	bne.n	800624a <setvbuf+0xea>
 8006244:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006246:	f000 fb0e 	bl	8006866 <__retarget_lock_release_recursive>
 800624a:	4628      	mov	r0, r5
 800624c:	b003      	add	sp, #12
 800624e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006252:	4b24      	ldr	r3, [pc, #144]	; (80062e4 <setvbuf+0x184>)
 8006254:	429c      	cmp	r4, r3
 8006256:	d101      	bne.n	800625c <setvbuf+0xfc>
 8006258:	68bc      	ldr	r4, [r7, #8]
 800625a:	e793      	b.n	8006184 <setvbuf+0x24>
 800625c:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <setvbuf+0x188>)
 800625e:	429c      	cmp	r4, r3
 8006260:	bf08      	it	eq
 8006262:	68fc      	ldreq	r4, [r7, #12]
 8006264:	e78e      	b.n	8006184 <setvbuf+0x24>
 8006266:	2e00      	cmp	r6, #0
 8006268:	d0cd      	beq.n	8006206 <setvbuf+0xa6>
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	b913      	cbnz	r3, 8006274 <setvbuf+0x114>
 800626e:	4638      	mov	r0, r7
 8006270:	f000 fa5a 	bl	8006728 <__sinit>
 8006274:	f1b8 0f01 	cmp.w	r8, #1
 8006278:	bf08      	it	eq
 800627a:	89a3      	ldrheq	r3, [r4, #12]
 800627c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006280:	bf04      	itt	eq
 8006282:	f043 0301 	orreq.w	r3, r3, #1
 8006286:	81a3      	strheq	r3, [r4, #12]
 8006288:	89a2      	ldrh	r2, [r4, #12]
 800628a:	6026      	str	r6, [r4, #0]
 800628c:	f012 0308 	ands.w	r3, r2, #8
 8006290:	d01c      	beq.n	80062cc <setvbuf+0x16c>
 8006292:	07d3      	lsls	r3, r2, #31
 8006294:	bf41      	itttt	mi
 8006296:	2300      	movmi	r3, #0
 8006298:	426d      	negmi	r5, r5
 800629a:	60a3      	strmi	r3, [r4, #8]
 800629c:	61a5      	strmi	r5, [r4, #24]
 800629e:	bf58      	it	pl
 80062a0:	60a5      	strpl	r5, [r4, #8]
 80062a2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80062a4:	f015 0501 	ands.w	r5, r5, #1
 80062a8:	d115      	bne.n	80062d6 <setvbuf+0x176>
 80062aa:	f412 7f00 	tst.w	r2, #512	; 0x200
 80062ae:	e7c8      	b.n	8006242 <setvbuf+0xe2>
 80062b0:	4648      	mov	r0, r9
 80062b2:	f000 fb3f 	bl	8006934 <malloc>
 80062b6:	4606      	mov	r6, r0
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d0ae      	beq.n	800621a <setvbuf+0xba>
 80062bc:	464d      	mov	r5, r9
 80062be:	89a3      	ldrh	r3, [r4, #12]
 80062c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062c4:	81a3      	strh	r3, [r4, #12]
 80062c6:	e7d0      	b.n	800626a <setvbuf+0x10a>
 80062c8:	2500      	movs	r5, #0
 80062ca:	e7a8      	b.n	800621e <setvbuf+0xbe>
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	e7e8      	b.n	80062a2 <setvbuf+0x142>
 80062d0:	f04f 35ff 	mov.w	r5, #4294967295
 80062d4:	e7b9      	b.n	800624a <setvbuf+0xea>
 80062d6:	2500      	movs	r5, #0
 80062d8:	e7b7      	b.n	800624a <setvbuf+0xea>
 80062da:	bf00      	nop
 80062dc:	20000054 	.word	0x20000054
 80062e0:	08007988 	.word	0x08007988
 80062e4:	080079a8 	.word	0x080079a8
 80062e8:	08007968 	.word	0x08007968

080062ec <siprintf>:
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062f2:	b500      	push	{lr}
 80062f4:	b09c      	sub	sp, #112	; 0x70
 80062f6:	ab1d      	add	r3, sp, #116	; 0x74
 80062f8:	9002      	str	r0, [sp, #8]
 80062fa:	9006      	str	r0, [sp, #24]
 80062fc:	9107      	str	r1, [sp, #28]
 80062fe:	9104      	str	r1, [sp, #16]
 8006300:	4808      	ldr	r0, [pc, #32]	; (8006324 <siprintf+0x38>)
 8006302:	4909      	ldr	r1, [pc, #36]	; (8006328 <siprintf+0x3c>)
 8006304:	f853 2b04 	ldr.w	r2, [r3], #4
 8006308:	9105      	str	r1, [sp, #20]
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	a902      	add	r1, sp, #8
 800630e:	9301      	str	r3, [sp, #4]
 8006310:	f000 fc50 	bl	8006bb4 <_svfiprintf_r>
 8006314:	2200      	movs	r2, #0
 8006316:	9b02      	ldr	r3, [sp, #8]
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	b01c      	add	sp, #112	; 0x70
 800631c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006320:	b003      	add	sp, #12
 8006322:	4770      	bx	lr
 8006324:	20000054 	.word	0x20000054
 8006328:	ffff0208 	.word	0xffff0208

0800632c <strchr>:
 800632c:	4603      	mov	r3, r0
 800632e:	b2c9      	uxtb	r1, r1
 8006330:	4618      	mov	r0, r3
 8006332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006336:	b112      	cbz	r2, 800633e <strchr+0x12>
 8006338:	428a      	cmp	r2, r1
 800633a:	d1f9      	bne.n	8006330 <strchr+0x4>
 800633c:	4770      	bx	lr
 800633e:	2900      	cmp	r1, #0
 8006340:	bf18      	it	ne
 8006342:	2000      	movne	r0, #0
 8006344:	4770      	bx	lr

08006346 <strcpy>:
 8006346:	4603      	mov	r3, r0
 8006348:	f811 2b01 	ldrb.w	r2, [r1], #1
 800634c:	f803 2b01 	strb.w	r2, [r3], #1
 8006350:	2a00      	cmp	r2, #0
 8006352:	d1f9      	bne.n	8006348 <strcpy+0x2>
 8006354:	4770      	bx	lr

08006356 <strncpy>:
 8006356:	4603      	mov	r3, r0
 8006358:	b510      	push	{r4, lr}
 800635a:	3901      	subs	r1, #1
 800635c:	b132      	cbz	r2, 800636c <strncpy+0x16>
 800635e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006362:	3a01      	subs	r2, #1
 8006364:	f803 4b01 	strb.w	r4, [r3], #1
 8006368:	2c00      	cmp	r4, #0
 800636a:	d1f7      	bne.n	800635c <strncpy+0x6>
 800636c:	2100      	movs	r1, #0
 800636e:	441a      	add	r2, r3
 8006370:	4293      	cmp	r3, r2
 8006372:	d100      	bne.n	8006376 <strncpy+0x20>
 8006374:	bd10      	pop	{r4, pc}
 8006376:	f803 1b01 	strb.w	r1, [r3], #1
 800637a:	e7f9      	b.n	8006370 <strncpy+0x1a>

0800637c <__swbuf_r>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	460e      	mov	r6, r1
 8006380:	4614      	mov	r4, r2
 8006382:	4605      	mov	r5, r0
 8006384:	b118      	cbz	r0, 800638e <__swbuf_r+0x12>
 8006386:	6983      	ldr	r3, [r0, #24]
 8006388:	b90b      	cbnz	r3, 800638e <__swbuf_r+0x12>
 800638a:	f000 f9cd 	bl	8006728 <__sinit>
 800638e:	4b21      	ldr	r3, [pc, #132]	; (8006414 <__swbuf_r+0x98>)
 8006390:	429c      	cmp	r4, r3
 8006392:	d12b      	bne.n	80063ec <__swbuf_r+0x70>
 8006394:	686c      	ldr	r4, [r5, #4]
 8006396:	69a3      	ldr	r3, [r4, #24]
 8006398:	60a3      	str	r3, [r4, #8]
 800639a:	89a3      	ldrh	r3, [r4, #12]
 800639c:	071a      	lsls	r2, r3, #28
 800639e:	d52f      	bpl.n	8006400 <__swbuf_r+0x84>
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	b36b      	cbz	r3, 8006400 <__swbuf_r+0x84>
 80063a4:	6923      	ldr	r3, [r4, #16]
 80063a6:	6820      	ldr	r0, [r4, #0]
 80063a8:	b2f6      	uxtb	r6, r6
 80063aa:	1ac0      	subs	r0, r0, r3
 80063ac:	6963      	ldr	r3, [r4, #20]
 80063ae:	4637      	mov	r7, r6
 80063b0:	4283      	cmp	r3, r0
 80063b2:	dc04      	bgt.n	80063be <__swbuf_r+0x42>
 80063b4:	4621      	mov	r1, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 f922 	bl	8006600 <_fflush_r>
 80063bc:	bb30      	cbnz	r0, 800640c <__swbuf_r+0x90>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	3001      	adds	r0, #1
 80063c2:	3b01      	subs	r3, #1
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	701e      	strb	r6, [r3, #0]
 80063ce:	6963      	ldr	r3, [r4, #20]
 80063d0:	4283      	cmp	r3, r0
 80063d2:	d004      	beq.n	80063de <__swbuf_r+0x62>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d506      	bpl.n	80063e8 <__swbuf_r+0x6c>
 80063da:	2e0a      	cmp	r6, #10
 80063dc:	d104      	bne.n	80063e8 <__swbuf_r+0x6c>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f90d 	bl	8006600 <_fflush_r>
 80063e6:	b988      	cbnz	r0, 800640c <__swbuf_r+0x90>
 80063e8:	4638      	mov	r0, r7
 80063ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <__swbuf_r+0x9c>)
 80063ee:	429c      	cmp	r4, r3
 80063f0:	d101      	bne.n	80063f6 <__swbuf_r+0x7a>
 80063f2:	68ac      	ldr	r4, [r5, #8]
 80063f4:	e7cf      	b.n	8006396 <__swbuf_r+0x1a>
 80063f6:	4b09      	ldr	r3, [pc, #36]	; (800641c <__swbuf_r+0xa0>)
 80063f8:	429c      	cmp	r4, r3
 80063fa:	bf08      	it	eq
 80063fc:	68ec      	ldreq	r4, [r5, #12]
 80063fe:	e7ca      	b.n	8006396 <__swbuf_r+0x1a>
 8006400:	4621      	mov	r1, r4
 8006402:	4628      	mov	r0, r5
 8006404:	f000 f80c 	bl	8006420 <__swsetup_r>
 8006408:	2800      	cmp	r0, #0
 800640a:	d0cb      	beq.n	80063a4 <__swbuf_r+0x28>
 800640c:	f04f 37ff 	mov.w	r7, #4294967295
 8006410:	e7ea      	b.n	80063e8 <__swbuf_r+0x6c>
 8006412:	bf00      	nop
 8006414:	08007988 	.word	0x08007988
 8006418:	080079a8 	.word	0x080079a8
 800641c:	08007968 	.word	0x08007968

08006420 <__swsetup_r>:
 8006420:	4b32      	ldr	r3, [pc, #200]	; (80064ec <__swsetup_r+0xcc>)
 8006422:	b570      	push	{r4, r5, r6, lr}
 8006424:	681d      	ldr	r5, [r3, #0]
 8006426:	4606      	mov	r6, r0
 8006428:	460c      	mov	r4, r1
 800642a:	b125      	cbz	r5, 8006436 <__swsetup_r+0x16>
 800642c:	69ab      	ldr	r3, [r5, #24]
 800642e:	b913      	cbnz	r3, 8006436 <__swsetup_r+0x16>
 8006430:	4628      	mov	r0, r5
 8006432:	f000 f979 	bl	8006728 <__sinit>
 8006436:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <__swsetup_r+0xd0>)
 8006438:	429c      	cmp	r4, r3
 800643a:	d10f      	bne.n	800645c <__swsetup_r+0x3c>
 800643c:	686c      	ldr	r4, [r5, #4]
 800643e:	89a3      	ldrh	r3, [r4, #12]
 8006440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006444:	0719      	lsls	r1, r3, #28
 8006446:	d42c      	bmi.n	80064a2 <__swsetup_r+0x82>
 8006448:	06dd      	lsls	r5, r3, #27
 800644a:	d411      	bmi.n	8006470 <__swsetup_r+0x50>
 800644c:	2309      	movs	r3, #9
 800644e:	6033      	str	r3, [r6, #0]
 8006450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	81a3      	strh	r3, [r4, #12]
 800645a:	e03e      	b.n	80064da <__swsetup_r+0xba>
 800645c:	4b25      	ldr	r3, [pc, #148]	; (80064f4 <__swsetup_r+0xd4>)
 800645e:	429c      	cmp	r4, r3
 8006460:	d101      	bne.n	8006466 <__swsetup_r+0x46>
 8006462:	68ac      	ldr	r4, [r5, #8]
 8006464:	e7eb      	b.n	800643e <__swsetup_r+0x1e>
 8006466:	4b24      	ldr	r3, [pc, #144]	; (80064f8 <__swsetup_r+0xd8>)
 8006468:	429c      	cmp	r4, r3
 800646a:	bf08      	it	eq
 800646c:	68ec      	ldreq	r4, [r5, #12]
 800646e:	e7e6      	b.n	800643e <__swsetup_r+0x1e>
 8006470:	0758      	lsls	r0, r3, #29
 8006472:	d512      	bpl.n	800649a <__swsetup_r+0x7a>
 8006474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006476:	b141      	cbz	r1, 800648a <__swsetup_r+0x6a>
 8006478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800647c:	4299      	cmp	r1, r3
 800647e:	d002      	beq.n	8006486 <__swsetup_r+0x66>
 8006480:	4630      	mov	r0, r6
 8006482:	f000 fa5f 	bl	8006944 <_free_r>
 8006486:	2300      	movs	r3, #0
 8006488:	6363      	str	r3, [r4, #52]	; 0x34
 800648a:	89a3      	ldrh	r3, [r4, #12]
 800648c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006490:	81a3      	strh	r3, [r4, #12]
 8006492:	2300      	movs	r3, #0
 8006494:	6063      	str	r3, [r4, #4]
 8006496:	6923      	ldr	r3, [r4, #16]
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	89a3      	ldrh	r3, [r4, #12]
 800649c:	f043 0308 	orr.w	r3, r3, #8
 80064a0:	81a3      	strh	r3, [r4, #12]
 80064a2:	6923      	ldr	r3, [r4, #16]
 80064a4:	b94b      	cbnz	r3, 80064ba <__swsetup_r+0x9a>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b0:	d003      	beq.n	80064ba <__swsetup_r+0x9a>
 80064b2:	4621      	mov	r1, r4
 80064b4:	4630      	mov	r0, r6
 80064b6:	f000 f9fd 	bl	80068b4 <__smakebuf_r>
 80064ba:	89a0      	ldrh	r0, [r4, #12]
 80064bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064c0:	f010 0301 	ands.w	r3, r0, #1
 80064c4:	d00a      	beq.n	80064dc <__swsetup_r+0xbc>
 80064c6:	2300      	movs	r3, #0
 80064c8:	60a3      	str	r3, [r4, #8]
 80064ca:	6963      	ldr	r3, [r4, #20]
 80064cc:	425b      	negs	r3, r3
 80064ce:	61a3      	str	r3, [r4, #24]
 80064d0:	6923      	ldr	r3, [r4, #16]
 80064d2:	b943      	cbnz	r3, 80064e6 <__swsetup_r+0xc6>
 80064d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80064d8:	d1ba      	bne.n	8006450 <__swsetup_r+0x30>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	0781      	lsls	r1, r0, #30
 80064de:	bf58      	it	pl
 80064e0:	6963      	ldrpl	r3, [r4, #20]
 80064e2:	60a3      	str	r3, [r4, #8]
 80064e4:	e7f4      	b.n	80064d0 <__swsetup_r+0xb0>
 80064e6:	2000      	movs	r0, #0
 80064e8:	e7f7      	b.n	80064da <__swsetup_r+0xba>
 80064ea:	bf00      	nop
 80064ec:	20000054 	.word	0x20000054
 80064f0:	08007988 	.word	0x08007988
 80064f4:	080079a8 	.word	0x080079a8
 80064f8:	08007968 	.word	0x08007968

080064fc <__sflush_r>:
 80064fc:	898a      	ldrh	r2, [r1, #12]
 80064fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006500:	4605      	mov	r5, r0
 8006502:	0710      	lsls	r0, r2, #28
 8006504:	460c      	mov	r4, r1
 8006506:	d457      	bmi.n	80065b8 <__sflush_r+0xbc>
 8006508:	684b      	ldr	r3, [r1, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	dc04      	bgt.n	8006518 <__sflush_r+0x1c>
 800650e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	dc01      	bgt.n	8006518 <__sflush_r+0x1c>
 8006514:	2000      	movs	r0, #0
 8006516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800651a:	2e00      	cmp	r6, #0
 800651c:	d0fa      	beq.n	8006514 <__sflush_r+0x18>
 800651e:	2300      	movs	r3, #0
 8006520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006524:	682f      	ldr	r7, [r5, #0]
 8006526:	602b      	str	r3, [r5, #0]
 8006528:	d032      	beq.n	8006590 <__sflush_r+0x94>
 800652a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800652c:	89a3      	ldrh	r3, [r4, #12]
 800652e:	075a      	lsls	r2, r3, #29
 8006530:	d505      	bpl.n	800653e <__sflush_r+0x42>
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	1ac0      	subs	r0, r0, r3
 8006536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006538:	b10b      	cbz	r3, 800653e <__sflush_r+0x42>
 800653a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800653c:	1ac0      	subs	r0, r0, r3
 800653e:	2300      	movs	r3, #0
 8006540:	4602      	mov	r2, r0
 8006542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006544:	4628      	mov	r0, r5
 8006546:	6a21      	ldr	r1, [r4, #32]
 8006548:	47b0      	blx	r6
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	d106      	bne.n	800655e <__sflush_r+0x62>
 8006550:	6829      	ldr	r1, [r5, #0]
 8006552:	291d      	cmp	r1, #29
 8006554:	d82c      	bhi.n	80065b0 <__sflush_r+0xb4>
 8006556:	4a29      	ldr	r2, [pc, #164]	; (80065fc <__sflush_r+0x100>)
 8006558:	40ca      	lsrs	r2, r1
 800655a:	07d6      	lsls	r6, r2, #31
 800655c:	d528      	bpl.n	80065b0 <__sflush_r+0xb4>
 800655e:	2200      	movs	r2, #0
 8006560:	6062      	str	r2, [r4, #4]
 8006562:	6922      	ldr	r2, [r4, #16]
 8006564:	04d9      	lsls	r1, r3, #19
 8006566:	6022      	str	r2, [r4, #0]
 8006568:	d504      	bpl.n	8006574 <__sflush_r+0x78>
 800656a:	1c42      	adds	r2, r0, #1
 800656c:	d101      	bne.n	8006572 <__sflush_r+0x76>
 800656e:	682b      	ldr	r3, [r5, #0]
 8006570:	b903      	cbnz	r3, 8006574 <__sflush_r+0x78>
 8006572:	6560      	str	r0, [r4, #84]	; 0x54
 8006574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006576:	602f      	str	r7, [r5, #0]
 8006578:	2900      	cmp	r1, #0
 800657a:	d0cb      	beq.n	8006514 <__sflush_r+0x18>
 800657c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006580:	4299      	cmp	r1, r3
 8006582:	d002      	beq.n	800658a <__sflush_r+0x8e>
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f9dd 	bl	8006944 <_free_r>
 800658a:	2000      	movs	r0, #0
 800658c:	6360      	str	r0, [r4, #52]	; 0x34
 800658e:	e7c2      	b.n	8006516 <__sflush_r+0x1a>
 8006590:	6a21      	ldr	r1, [r4, #32]
 8006592:	2301      	movs	r3, #1
 8006594:	4628      	mov	r0, r5
 8006596:	47b0      	blx	r6
 8006598:	1c41      	adds	r1, r0, #1
 800659a:	d1c7      	bne.n	800652c <__sflush_r+0x30>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0c4      	beq.n	800652c <__sflush_r+0x30>
 80065a2:	2b1d      	cmp	r3, #29
 80065a4:	d001      	beq.n	80065aa <__sflush_r+0xae>
 80065a6:	2b16      	cmp	r3, #22
 80065a8:	d101      	bne.n	80065ae <__sflush_r+0xb2>
 80065aa:	602f      	str	r7, [r5, #0]
 80065ac:	e7b2      	b.n	8006514 <__sflush_r+0x18>
 80065ae:	89a3      	ldrh	r3, [r4, #12]
 80065b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065b4:	81a3      	strh	r3, [r4, #12]
 80065b6:	e7ae      	b.n	8006516 <__sflush_r+0x1a>
 80065b8:	690f      	ldr	r7, [r1, #16]
 80065ba:	2f00      	cmp	r7, #0
 80065bc:	d0aa      	beq.n	8006514 <__sflush_r+0x18>
 80065be:	0793      	lsls	r3, r2, #30
 80065c0:	bf18      	it	ne
 80065c2:	2300      	movne	r3, #0
 80065c4:	680e      	ldr	r6, [r1, #0]
 80065c6:	bf08      	it	eq
 80065c8:	694b      	ldreq	r3, [r1, #20]
 80065ca:	1bf6      	subs	r6, r6, r7
 80065cc:	600f      	str	r7, [r1, #0]
 80065ce:	608b      	str	r3, [r1, #8]
 80065d0:	2e00      	cmp	r6, #0
 80065d2:	dd9f      	ble.n	8006514 <__sflush_r+0x18>
 80065d4:	4633      	mov	r3, r6
 80065d6:	463a      	mov	r2, r7
 80065d8:	4628      	mov	r0, r5
 80065da:	6a21      	ldr	r1, [r4, #32]
 80065dc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80065e0:	47e0      	blx	ip
 80065e2:	2800      	cmp	r0, #0
 80065e4:	dc06      	bgt.n	80065f4 <__sflush_r+0xf8>
 80065e6:	89a3      	ldrh	r3, [r4, #12]
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065f0:	81a3      	strh	r3, [r4, #12]
 80065f2:	e790      	b.n	8006516 <__sflush_r+0x1a>
 80065f4:	4407      	add	r7, r0
 80065f6:	1a36      	subs	r6, r6, r0
 80065f8:	e7ea      	b.n	80065d0 <__sflush_r+0xd4>
 80065fa:	bf00      	nop
 80065fc:	20400001 	.word	0x20400001

08006600 <_fflush_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	4605      	mov	r5, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b913      	cbnz	r3, 8006610 <_fflush_r+0x10>
 800660a:	2500      	movs	r5, #0
 800660c:	4628      	mov	r0, r5
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	b118      	cbz	r0, 800661a <_fflush_r+0x1a>
 8006612:	6983      	ldr	r3, [r0, #24]
 8006614:	b90b      	cbnz	r3, 800661a <_fflush_r+0x1a>
 8006616:	f000 f887 	bl	8006728 <__sinit>
 800661a:	4b14      	ldr	r3, [pc, #80]	; (800666c <_fflush_r+0x6c>)
 800661c:	429c      	cmp	r4, r3
 800661e:	d11b      	bne.n	8006658 <_fflush_r+0x58>
 8006620:	686c      	ldr	r4, [r5, #4]
 8006622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0ef      	beq.n	800660a <_fflush_r+0xa>
 800662a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800662c:	07d0      	lsls	r0, r2, #31
 800662e:	d404      	bmi.n	800663a <_fflush_r+0x3a>
 8006630:	0599      	lsls	r1, r3, #22
 8006632:	d402      	bmi.n	800663a <_fflush_r+0x3a>
 8006634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006636:	f000 f915 	bl	8006864 <__retarget_lock_acquire_recursive>
 800663a:	4628      	mov	r0, r5
 800663c:	4621      	mov	r1, r4
 800663e:	f7ff ff5d 	bl	80064fc <__sflush_r>
 8006642:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006644:	4605      	mov	r5, r0
 8006646:	07da      	lsls	r2, r3, #31
 8006648:	d4e0      	bmi.n	800660c <_fflush_r+0xc>
 800664a:	89a3      	ldrh	r3, [r4, #12]
 800664c:	059b      	lsls	r3, r3, #22
 800664e:	d4dd      	bmi.n	800660c <_fflush_r+0xc>
 8006650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006652:	f000 f908 	bl	8006866 <__retarget_lock_release_recursive>
 8006656:	e7d9      	b.n	800660c <_fflush_r+0xc>
 8006658:	4b05      	ldr	r3, [pc, #20]	; (8006670 <_fflush_r+0x70>)
 800665a:	429c      	cmp	r4, r3
 800665c:	d101      	bne.n	8006662 <_fflush_r+0x62>
 800665e:	68ac      	ldr	r4, [r5, #8]
 8006660:	e7df      	b.n	8006622 <_fflush_r+0x22>
 8006662:	4b04      	ldr	r3, [pc, #16]	; (8006674 <_fflush_r+0x74>)
 8006664:	429c      	cmp	r4, r3
 8006666:	bf08      	it	eq
 8006668:	68ec      	ldreq	r4, [r5, #12]
 800666a:	e7da      	b.n	8006622 <_fflush_r+0x22>
 800666c:	08007988 	.word	0x08007988
 8006670:	080079a8 	.word	0x080079a8
 8006674:	08007968 	.word	0x08007968

08006678 <std>:
 8006678:	2300      	movs	r3, #0
 800667a:	b510      	push	{r4, lr}
 800667c:	4604      	mov	r4, r0
 800667e:	e9c0 3300 	strd	r3, r3, [r0]
 8006682:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006686:	6083      	str	r3, [r0, #8]
 8006688:	8181      	strh	r1, [r0, #12]
 800668a:	6643      	str	r3, [r0, #100]	; 0x64
 800668c:	81c2      	strh	r2, [r0, #14]
 800668e:	6183      	str	r3, [r0, #24]
 8006690:	4619      	mov	r1, r3
 8006692:	2208      	movs	r2, #8
 8006694:	305c      	adds	r0, #92	; 0x5c
 8006696:	f7ff fcc5 	bl	8006024 <memset>
 800669a:	4b05      	ldr	r3, [pc, #20]	; (80066b0 <std+0x38>)
 800669c:	6224      	str	r4, [r4, #32]
 800669e:	6263      	str	r3, [r4, #36]	; 0x24
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <std+0x3c>)
 80066a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80066a4:	4b04      	ldr	r3, [pc, #16]	; (80066b8 <std+0x40>)
 80066a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066a8:	4b04      	ldr	r3, [pc, #16]	; (80066bc <std+0x44>)
 80066aa:	6323      	str	r3, [r4, #48]	; 0x30
 80066ac:	bd10      	pop	{r4, pc}
 80066ae:	bf00      	nop
 80066b0:	080073b1 	.word	0x080073b1
 80066b4:	080073d3 	.word	0x080073d3
 80066b8:	0800740b 	.word	0x0800740b
 80066bc:	0800742f 	.word	0x0800742f

080066c0 <_cleanup_r>:
 80066c0:	4901      	ldr	r1, [pc, #4]	; (80066c8 <_cleanup_r+0x8>)
 80066c2:	f000 b8af 	b.w	8006824 <_fwalk_reent>
 80066c6:	bf00      	nop
 80066c8:	08006601 	.word	0x08006601

080066cc <__sfmoreglue>:
 80066cc:	2268      	movs	r2, #104	; 0x68
 80066ce:	b570      	push	{r4, r5, r6, lr}
 80066d0:	1e4d      	subs	r5, r1, #1
 80066d2:	4355      	muls	r5, r2
 80066d4:	460e      	mov	r6, r1
 80066d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066da:	f000 f99b 	bl	8006a14 <_malloc_r>
 80066de:	4604      	mov	r4, r0
 80066e0:	b140      	cbz	r0, 80066f4 <__sfmoreglue+0x28>
 80066e2:	2100      	movs	r1, #0
 80066e4:	e9c0 1600 	strd	r1, r6, [r0]
 80066e8:	300c      	adds	r0, #12
 80066ea:	60a0      	str	r0, [r4, #8]
 80066ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80066f0:	f7ff fc98 	bl	8006024 <memset>
 80066f4:	4620      	mov	r0, r4
 80066f6:	bd70      	pop	{r4, r5, r6, pc}

080066f8 <__sfp_lock_acquire>:
 80066f8:	4801      	ldr	r0, [pc, #4]	; (8006700 <__sfp_lock_acquire+0x8>)
 80066fa:	f000 b8b3 	b.w	8006864 <__retarget_lock_acquire_recursive>
 80066fe:	bf00      	nop
 8006700:	20000241 	.word	0x20000241

08006704 <__sfp_lock_release>:
 8006704:	4801      	ldr	r0, [pc, #4]	; (800670c <__sfp_lock_release+0x8>)
 8006706:	f000 b8ae 	b.w	8006866 <__retarget_lock_release_recursive>
 800670a:	bf00      	nop
 800670c:	20000241 	.word	0x20000241

08006710 <__sinit_lock_acquire>:
 8006710:	4801      	ldr	r0, [pc, #4]	; (8006718 <__sinit_lock_acquire+0x8>)
 8006712:	f000 b8a7 	b.w	8006864 <__retarget_lock_acquire_recursive>
 8006716:	bf00      	nop
 8006718:	20000242 	.word	0x20000242

0800671c <__sinit_lock_release>:
 800671c:	4801      	ldr	r0, [pc, #4]	; (8006724 <__sinit_lock_release+0x8>)
 800671e:	f000 b8a2 	b.w	8006866 <__retarget_lock_release_recursive>
 8006722:	bf00      	nop
 8006724:	20000242 	.word	0x20000242

08006728 <__sinit>:
 8006728:	b510      	push	{r4, lr}
 800672a:	4604      	mov	r4, r0
 800672c:	f7ff fff0 	bl	8006710 <__sinit_lock_acquire>
 8006730:	69a3      	ldr	r3, [r4, #24]
 8006732:	b11b      	cbz	r3, 800673c <__sinit+0x14>
 8006734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006738:	f7ff bff0 	b.w	800671c <__sinit_lock_release>
 800673c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006740:	6523      	str	r3, [r4, #80]	; 0x50
 8006742:	4b13      	ldr	r3, [pc, #76]	; (8006790 <__sinit+0x68>)
 8006744:	4a13      	ldr	r2, [pc, #76]	; (8006794 <__sinit+0x6c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	62a2      	str	r2, [r4, #40]	; 0x28
 800674a:	42a3      	cmp	r3, r4
 800674c:	bf08      	it	eq
 800674e:	2301      	moveq	r3, #1
 8006750:	4620      	mov	r0, r4
 8006752:	bf08      	it	eq
 8006754:	61a3      	streq	r3, [r4, #24]
 8006756:	f000 f81f 	bl	8006798 <__sfp>
 800675a:	6060      	str	r0, [r4, #4]
 800675c:	4620      	mov	r0, r4
 800675e:	f000 f81b 	bl	8006798 <__sfp>
 8006762:	60a0      	str	r0, [r4, #8]
 8006764:	4620      	mov	r0, r4
 8006766:	f000 f817 	bl	8006798 <__sfp>
 800676a:	2200      	movs	r2, #0
 800676c:	2104      	movs	r1, #4
 800676e:	60e0      	str	r0, [r4, #12]
 8006770:	6860      	ldr	r0, [r4, #4]
 8006772:	f7ff ff81 	bl	8006678 <std>
 8006776:	2201      	movs	r2, #1
 8006778:	2109      	movs	r1, #9
 800677a:	68a0      	ldr	r0, [r4, #8]
 800677c:	f7ff ff7c 	bl	8006678 <std>
 8006780:	2202      	movs	r2, #2
 8006782:	2112      	movs	r1, #18
 8006784:	68e0      	ldr	r0, [r4, #12]
 8006786:	f7ff ff77 	bl	8006678 <std>
 800678a:	2301      	movs	r3, #1
 800678c:	61a3      	str	r3, [r4, #24]
 800678e:	e7d1      	b.n	8006734 <__sinit+0xc>
 8006790:	08007964 	.word	0x08007964
 8006794:	080066c1 	.word	0x080066c1

08006798 <__sfp>:
 8006798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679a:	4607      	mov	r7, r0
 800679c:	f7ff ffac 	bl	80066f8 <__sfp_lock_acquire>
 80067a0:	4b1e      	ldr	r3, [pc, #120]	; (800681c <__sfp+0x84>)
 80067a2:	681e      	ldr	r6, [r3, #0]
 80067a4:	69b3      	ldr	r3, [r6, #24]
 80067a6:	b913      	cbnz	r3, 80067ae <__sfp+0x16>
 80067a8:	4630      	mov	r0, r6
 80067aa:	f7ff ffbd 	bl	8006728 <__sinit>
 80067ae:	3648      	adds	r6, #72	; 0x48
 80067b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	d503      	bpl.n	80067c0 <__sfp+0x28>
 80067b8:	6833      	ldr	r3, [r6, #0]
 80067ba:	b30b      	cbz	r3, 8006800 <__sfp+0x68>
 80067bc:	6836      	ldr	r6, [r6, #0]
 80067be:	e7f7      	b.n	80067b0 <__sfp+0x18>
 80067c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067c4:	b9d5      	cbnz	r5, 80067fc <__sfp+0x64>
 80067c6:	4b16      	ldr	r3, [pc, #88]	; (8006820 <__sfp+0x88>)
 80067c8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067cc:	60e3      	str	r3, [r4, #12]
 80067ce:	6665      	str	r5, [r4, #100]	; 0x64
 80067d0:	f000 f847 	bl	8006862 <__retarget_lock_init_recursive>
 80067d4:	f7ff ff96 	bl	8006704 <__sfp_lock_release>
 80067d8:	2208      	movs	r2, #8
 80067da:	4629      	mov	r1, r5
 80067dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067e4:	6025      	str	r5, [r4, #0]
 80067e6:	61a5      	str	r5, [r4, #24]
 80067e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80067ec:	f7ff fc1a 	bl	8006024 <memset>
 80067f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80067f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80067f8:	4620      	mov	r0, r4
 80067fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067fc:	3468      	adds	r4, #104	; 0x68
 80067fe:	e7d9      	b.n	80067b4 <__sfp+0x1c>
 8006800:	2104      	movs	r1, #4
 8006802:	4638      	mov	r0, r7
 8006804:	f7ff ff62 	bl	80066cc <__sfmoreglue>
 8006808:	4604      	mov	r4, r0
 800680a:	6030      	str	r0, [r6, #0]
 800680c:	2800      	cmp	r0, #0
 800680e:	d1d5      	bne.n	80067bc <__sfp+0x24>
 8006810:	f7ff ff78 	bl	8006704 <__sfp_lock_release>
 8006814:	230c      	movs	r3, #12
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	e7ee      	b.n	80067f8 <__sfp+0x60>
 800681a:	bf00      	nop
 800681c:	08007964 	.word	0x08007964
 8006820:	ffff0001 	.word	0xffff0001

08006824 <_fwalk_reent>:
 8006824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006828:	4606      	mov	r6, r0
 800682a:	4688      	mov	r8, r1
 800682c:	2700      	movs	r7, #0
 800682e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006832:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006836:	f1b9 0901 	subs.w	r9, r9, #1
 800683a:	d505      	bpl.n	8006848 <_fwalk_reent+0x24>
 800683c:	6824      	ldr	r4, [r4, #0]
 800683e:	2c00      	cmp	r4, #0
 8006840:	d1f7      	bne.n	8006832 <_fwalk_reent+0xe>
 8006842:	4638      	mov	r0, r7
 8006844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006848:	89ab      	ldrh	r3, [r5, #12]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d907      	bls.n	800685e <_fwalk_reent+0x3a>
 800684e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006852:	3301      	adds	r3, #1
 8006854:	d003      	beq.n	800685e <_fwalk_reent+0x3a>
 8006856:	4629      	mov	r1, r5
 8006858:	4630      	mov	r0, r6
 800685a:	47c0      	blx	r8
 800685c:	4307      	orrs	r7, r0
 800685e:	3568      	adds	r5, #104	; 0x68
 8006860:	e7e9      	b.n	8006836 <_fwalk_reent+0x12>

08006862 <__retarget_lock_init_recursive>:
 8006862:	4770      	bx	lr

08006864 <__retarget_lock_acquire_recursive>:
 8006864:	4770      	bx	lr

08006866 <__retarget_lock_release_recursive>:
 8006866:	4770      	bx	lr

08006868 <__swhatbuf_r>:
 8006868:	b570      	push	{r4, r5, r6, lr}
 800686a:	460e      	mov	r6, r1
 800686c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006870:	4614      	mov	r4, r2
 8006872:	2900      	cmp	r1, #0
 8006874:	461d      	mov	r5, r3
 8006876:	b096      	sub	sp, #88	; 0x58
 8006878:	da08      	bge.n	800688c <__swhatbuf_r+0x24>
 800687a:	2200      	movs	r2, #0
 800687c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006880:	602a      	str	r2, [r5, #0]
 8006882:	061a      	lsls	r2, r3, #24
 8006884:	d410      	bmi.n	80068a8 <__swhatbuf_r+0x40>
 8006886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688a:	e00e      	b.n	80068aa <__swhatbuf_r+0x42>
 800688c:	466a      	mov	r2, sp
 800688e:	f000 fdf5 	bl	800747c <_fstat_r>
 8006892:	2800      	cmp	r0, #0
 8006894:	dbf1      	blt.n	800687a <__swhatbuf_r+0x12>
 8006896:	9a01      	ldr	r2, [sp, #4]
 8006898:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800689c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80068a0:	425a      	negs	r2, r3
 80068a2:	415a      	adcs	r2, r3
 80068a4:	602a      	str	r2, [r5, #0]
 80068a6:	e7ee      	b.n	8006886 <__swhatbuf_r+0x1e>
 80068a8:	2340      	movs	r3, #64	; 0x40
 80068aa:	2000      	movs	r0, #0
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	b016      	add	sp, #88	; 0x58
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080068b4 <__smakebuf_r>:
 80068b4:	898b      	ldrh	r3, [r1, #12]
 80068b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80068b8:	079d      	lsls	r5, r3, #30
 80068ba:	4606      	mov	r6, r0
 80068bc:	460c      	mov	r4, r1
 80068be:	d507      	bpl.n	80068d0 <__smakebuf_r+0x1c>
 80068c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	2301      	movs	r3, #1
 80068ca:	6163      	str	r3, [r4, #20]
 80068cc:	b002      	add	sp, #8
 80068ce:	bd70      	pop	{r4, r5, r6, pc}
 80068d0:	466a      	mov	r2, sp
 80068d2:	ab01      	add	r3, sp, #4
 80068d4:	f7ff ffc8 	bl	8006868 <__swhatbuf_r>
 80068d8:	9900      	ldr	r1, [sp, #0]
 80068da:	4605      	mov	r5, r0
 80068dc:	4630      	mov	r0, r6
 80068de:	f000 f899 	bl	8006a14 <_malloc_r>
 80068e2:	b948      	cbnz	r0, 80068f8 <__smakebuf_r+0x44>
 80068e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e8:	059a      	lsls	r2, r3, #22
 80068ea:	d4ef      	bmi.n	80068cc <__smakebuf_r+0x18>
 80068ec:	f023 0303 	bic.w	r3, r3, #3
 80068f0:	f043 0302 	orr.w	r3, r3, #2
 80068f4:	81a3      	strh	r3, [r4, #12]
 80068f6:	e7e3      	b.n	80068c0 <__smakebuf_r+0xc>
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <__smakebuf_r+0x7c>)
 80068fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80068fc:	89a3      	ldrh	r3, [r4, #12]
 80068fe:	6020      	str	r0, [r4, #0]
 8006900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006904:	81a3      	strh	r3, [r4, #12]
 8006906:	9b00      	ldr	r3, [sp, #0]
 8006908:	6120      	str	r0, [r4, #16]
 800690a:	6163      	str	r3, [r4, #20]
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	b15b      	cbz	r3, 8006928 <__smakebuf_r+0x74>
 8006910:	4630      	mov	r0, r6
 8006912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006916:	f000 fdc3 	bl	80074a0 <_isatty_r>
 800691a:	b128      	cbz	r0, 8006928 <__smakebuf_r+0x74>
 800691c:	89a3      	ldrh	r3, [r4, #12]
 800691e:	f023 0303 	bic.w	r3, r3, #3
 8006922:	f043 0301 	orr.w	r3, r3, #1
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	89a0      	ldrh	r0, [r4, #12]
 800692a:	4305      	orrs	r5, r0
 800692c:	81a5      	strh	r5, [r4, #12]
 800692e:	e7cd      	b.n	80068cc <__smakebuf_r+0x18>
 8006930:	080066c1 	.word	0x080066c1

08006934 <malloc>:
 8006934:	4b02      	ldr	r3, [pc, #8]	; (8006940 <malloc+0xc>)
 8006936:	4601      	mov	r1, r0
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f000 b86b 	b.w	8006a14 <_malloc_r>
 800693e:	bf00      	nop
 8006940:	20000054 	.word	0x20000054

08006944 <_free_r>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	4605      	mov	r5, r0
 8006948:	2900      	cmp	r1, #0
 800694a:	d040      	beq.n	80069ce <_free_r+0x8a>
 800694c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006950:	1f0c      	subs	r4, r1, #4
 8006952:	2b00      	cmp	r3, #0
 8006954:	bfb8      	it	lt
 8006956:	18e4      	addlt	r4, r4, r3
 8006958:	f000 fdfa 	bl	8007550 <__malloc_lock>
 800695c:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <_free_r+0x8c>)
 800695e:	6813      	ldr	r3, [r2, #0]
 8006960:	b933      	cbnz	r3, 8006970 <_free_r+0x2c>
 8006962:	6063      	str	r3, [r4, #4]
 8006964:	6014      	str	r4, [r2, #0]
 8006966:	4628      	mov	r0, r5
 8006968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800696c:	f000 bdf6 	b.w	800755c <__malloc_unlock>
 8006970:	42a3      	cmp	r3, r4
 8006972:	d908      	bls.n	8006986 <_free_r+0x42>
 8006974:	6820      	ldr	r0, [r4, #0]
 8006976:	1821      	adds	r1, r4, r0
 8006978:	428b      	cmp	r3, r1
 800697a:	bf01      	itttt	eq
 800697c:	6819      	ldreq	r1, [r3, #0]
 800697e:	685b      	ldreq	r3, [r3, #4]
 8006980:	1809      	addeq	r1, r1, r0
 8006982:	6021      	streq	r1, [r4, #0]
 8006984:	e7ed      	b.n	8006962 <_free_r+0x1e>
 8006986:	461a      	mov	r2, r3
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b10b      	cbz	r3, 8006990 <_free_r+0x4c>
 800698c:	42a3      	cmp	r3, r4
 800698e:	d9fa      	bls.n	8006986 <_free_r+0x42>
 8006990:	6811      	ldr	r1, [r2, #0]
 8006992:	1850      	adds	r0, r2, r1
 8006994:	42a0      	cmp	r0, r4
 8006996:	d10b      	bne.n	80069b0 <_free_r+0x6c>
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	4401      	add	r1, r0
 800699c:	1850      	adds	r0, r2, r1
 800699e:	4283      	cmp	r3, r0
 80069a0:	6011      	str	r1, [r2, #0]
 80069a2:	d1e0      	bne.n	8006966 <_free_r+0x22>
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4401      	add	r1, r0
 80069aa:	6011      	str	r1, [r2, #0]
 80069ac:	6053      	str	r3, [r2, #4]
 80069ae:	e7da      	b.n	8006966 <_free_r+0x22>
 80069b0:	d902      	bls.n	80069b8 <_free_r+0x74>
 80069b2:	230c      	movs	r3, #12
 80069b4:	602b      	str	r3, [r5, #0]
 80069b6:	e7d6      	b.n	8006966 <_free_r+0x22>
 80069b8:	6820      	ldr	r0, [r4, #0]
 80069ba:	1821      	adds	r1, r4, r0
 80069bc:	428b      	cmp	r3, r1
 80069be:	bf01      	itttt	eq
 80069c0:	6819      	ldreq	r1, [r3, #0]
 80069c2:	685b      	ldreq	r3, [r3, #4]
 80069c4:	1809      	addeq	r1, r1, r0
 80069c6:	6021      	streq	r1, [r4, #0]
 80069c8:	6063      	str	r3, [r4, #4]
 80069ca:	6054      	str	r4, [r2, #4]
 80069cc:	e7cb      	b.n	8006966 <_free_r+0x22>
 80069ce:	bd38      	pop	{r3, r4, r5, pc}
 80069d0:	20000244 	.word	0x20000244

080069d4 <sbrk_aligned>:
 80069d4:	b570      	push	{r4, r5, r6, lr}
 80069d6:	4e0e      	ldr	r6, [pc, #56]	; (8006a10 <sbrk_aligned+0x3c>)
 80069d8:	460c      	mov	r4, r1
 80069da:	6831      	ldr	r1, [r6, #0]
 80069dc:	4605      	mov	r5, r0
 80069de:	b911      	cbnz	r1, 80069e6 <sbrk_aligned+0x12>
 80069e0:	f000 fcd6 	bl	8007390 <_sbrk_r>
 80069e4:	6030      	str	r0, [r6, #0]
 80069e6:	4621      	mov	r1, r4
 80069e8:	4628      	mov	r0, r5
 80069ea:	f000 fcd1 	bl	8007390 <_sbrk_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	d00a      	beq.n	8006a08 <sbrk_aligned+0x34>
 80069f2:	1cc4      	adds	r4, r0, #3
 80069f4:	f024 0403 	bic.w	r4, r4, #3
 80069f8:	42a0      	cmp	r0, r4
 80069fa:	d007      	beq.n	8006a0c <sbrk_aligned+0x38>
 80069fc:	1a21      	subs	r1, r4, r0
 80069fe:	4628      	mov	r0, r5
 8006a00:	f000 fcc6 	bl	8007390 <_sbrk_r>
 8006a04:	3001      	adds	r0, #1
 8006a06:	d101      	bne.n	8006a0c <sbrk_aligned+0x38>
 8006a08:	f04f 34ff 	mov.w	r4, #4294967295
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	bd70      	pop	{r4, r5, r6, pc}
 8006a10:	20000248 	.word	0x20000248

08006a14 <_malloc_r>:
 8006a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a18:	1ccd      	adds	r5, r1, #3
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	2d00      	cmp	r5, #0
 8006a28:	4607      	mov	r7, r0
 8006a2a:	db01      	blt.n	8006a30 <_malloc_r+0x1c>
 8006a2c:	42a9      	cmp	r1, r5
 8006a2e:	d905      	bls.n	8006a3c <_malloc_r+0x28>
 8006a30:	230c      	movs	r3, #12
 8006a32:	2600      	movs	r6, #0
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	4630      	mov	r0, r6
 8006a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a3c:	4e2e      	ldr	r6, [pc, #184]	; (8006af8 <_malloc_r+0xe4>)
 8006a3e:	f000 fd87 	bl	8007550 <__malloc_lock>
 8006a42:	6833      	ldr	r3, [r6, #0]
 8006a44:	461c      	mov	r4, r3
 8006a46:	bb34      	cbnz	r4, 8006a96 <_malloc_r+0x82>
 8006a48:	4629      	mov	r1, r5
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f7ff ffc2 	bl	80069d4 <sbrk_aligned>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	4604      	mov	r4, r0
 8006a54:	d14d      	bne.n	8006af2 <_malloc_r+0xde>
 8006a56:	6834      	ldr	r4, [r6, #0]
 8006a58:	4626      	mov	r6, r4
 8006a5a:	2e00      	cmp	r6, #0
 8006a5c:	d140      	bne.n	8006ae0 <_malloc_r+0xcc>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	4631      	mov	r1, r6
 8006a62:	4638      	mov	r0, r7
 8006a64:	eb04 0803 	add.w	r8, r4, r3
 8006a68:	f000 fc92 	bl	8007390 <_sbrk_r>
 8006a6c:	4580      	cmp	r8, r0
 8006a6e:	d13a      	bne.n	8006ae6 <_malloc_r+0xd2>
 8006a70:	6821      	ldr	r1, [r4, #0]
 8006a72:	3503      	adds	r5, #3
 8006a74:	1a6d      	subs	r5, r5, r1
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	4638      	mov	r0, r7
 8006a84:	4629      	mov	r1, r5
 8006a86:	f7ff ffa5 	bl	80069d4 <sbrk_aligned>
 8006a8a:	3001      	adds	r0, #1
 8006a8c:	d02b      	beq.n	8006ae6 <_malloc_r+0xd2>
 8006a8e:	6823      	ldr	r3, [r4, #0]
 8006a90:	442b      	add	r3, r5
 8006a92:	6023      	str	r3, [r4, #0]
 8006a94:	e00e      	b.n	8006ab4 <_malloc_r+0xa0>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	1b52      	subs	r2, r2, r5
 8006a9a:	d41e      	bmi.n	8006ada <_malloc_r+0xc6>
 8006a9c:	2a0b      	cmp	r2, #11
 8006a9e:	d916      	bls.n	8006ace <_malloc_r+0xba>
 8006aa0:	1961      	adds	r1, r4, r5
 8006aa2:	42a3      	cmp	r3, r4
 8006aa4:	6025      	str	r5, [r4, #0]
 8006aa6:	bf18      	it	ne
 8006aa8:	6059      	strne	r1, [r3, #4]
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	bf08      	it	eq
 8006aae:	6031      	streq	r1, [r6, #0]
 8006ab0:	5162      	str	r2, [r4, r5]
 8006ab2:	604b      	str	r3, [r1, #4]
 8006ab4:	4638      	mov	r0, r7
 8006ab6:	f104 060b 	add.w	r6, r4, #11
 8006aba:	f000 fd4f 	bl	800755c <__malloc_unlock>
 8006abe:	f026 0607 	bic.w	r6, r6, #7
 8006ac2:	1d23      	adds	r3, r4, #4
 8006ac4:	1af2      	subs	r2, r6, r3
 8006ac6:	d0b6      	beq.n	8006a36 <_malloc_r+0x22>
 8006ac8:	1b9b      	subs	r3, r3, r6
 8006aca:	50a3      	str	r3, [r4, r2]
 8006acc:	e7b3      	b.n	8006a36 <_malloc_r+0x22>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	42a3      	cmp	r3, r4
 8006ad2:	bf0c      	ite	eq
 8006ad4:	6032      	streq	r2, [r6, #0]
 8006ad6:	605a      	strne	r2, [r3, #4]
 8006ad8:	e7ec      	b.n	8006ab4 <_malloc_r+0xa0>
 8006ada:	4623      	mov	r3, r4
 8006adc:	6864      	ldr	r4, [r4, #4]
 8006ade:	e7b2      	b.n	8006a46 <_malloc_r+0x32>
 8006ae0:	4634      	mov	r4, r6
 8006ae2:	6876      	ldr	r6, [r6, #4]
 8006ae4:	e7b9      	b.n	8006a5a <_malloc_r+0x46>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	4638      	mov	r0, r7
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	f000 fd36 	bl	800755c <__malloc_unlock>
 8006af0:	e7a1      	b.n	8006a36 <_malloc_r+0x22>
 8006af2:	6025      	str	r5, [r4, #0]
 8006af4:	e7de      	b.n	8006ab4 <_malloc_r+0xa0>
 8006af6:	bf00      	nop
 8006af8:	20000244 	.word	0x20000244

08006afc <__ssputs_r>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	688e      	ldr	r6, [r1, #8]
 8006b02:	4682      	mov	sl, r0
 8006b04:	429e      	cmp	r6, r3
 8006b06:	460c      	mov	r4, r1
 8006b08:	4690      	mov	r8, r2
 8006b0a:	461f      	mov	r7, r3
 8006b0c:	d838      	bhi.n	8006b80 <__ssputs_r+0x84>
 8006b0e:	898a      	ldrh	r2, [r1, #12]
 8006b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b14:	d032      	beq.n	8006b7c <__ssputs_r+0x80>
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	6909      	ldr	r1, [r1, #16]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	eba5 0901 	sub.w	r9, r5, r1
 8006b20:	6965      	ldr	r5, [r4, #20]
 8006b22:	444b      	add	r3, r9
 8006b24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b2c:	106d      	asrs	r5, r5, #1
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	bf38      	it	cc
 8006b32:	461d      	movcc	r5, r3
 8006b34:	0553      	lsls	r3, r2, #21
 8006b36:	d531      	bpl.n	8006b9c <__ssputs_r+0xa0>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7ff ff6b 	bl	8006a14 <_malloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	b950      	cbnz	r0, 8006b58 <__ssputs_r+0x5c>
 8006b42:	230c      	movs	r3, #12
 8006b44:	f04f 30ff 	mov.w	r0, #4294967295
 8006b48:	f8ca 3000 	str.w	r3, [sl]
 8006b4c:	89a3      	ldrh	r3, [r4, #12]
 8006b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b52:	81a3      	strh	r3, [r4, #12]
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	464a      	mov	r2, r9
 8006b5a:	6921      	ldr	r1, [r4, #16]
 8006b5c:	f000 fcd0 	bl	8007500 <memcpy>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	6126      	str	r6, [r4, #16]
 8006b6e:	444e      	add	r6, r9
 8006b70:	6026      	str	r6, [r4, #0]
 8006b72:	463e      	mov	r6, r7
 8006b74:	6165      	str	r5, [r4, #20]
 8006b76:	eba5 0509 	sub.w	r5, r5, r9
 8006b7a:	60a5      	str	r5, [r4, #8]
 8006b7c:	42be      	cmp	r6, r7
 8006b7e:	d900      	bls.n	8006b82 <__ssputs_r+0x86>
 8006b80:	463e      	mov	r6, r7
 8006b82:	4632      	mov	r2, r6
 8006b84:	4641      	mov	r1, r8
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	f000 fcc8 	bl	800751c <memmove>
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	2000      	movs	r0, #0
 8006b90:	1b9b      	subs	r3, r3, r6
 8006b92:	60a3      	str	r3, [r4, #8]
 8006b94:	6823      	ldr	r3, [r4, #0]
 8006b96:	4433      	add	r3, r6
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	e7db      	b.n	8006b54 <__ssputs_r+0x58>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	f000 fce3 	bl	8007568 <_realloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1e1      	bne.n	8006b6c <__ssputs_r+0x70>
 8006ba8:	4650      	mov	r0, sl
 8006baa:	6921      	ldr	r1, [r4, #16]
 8006bac:	f7ff feca 	bl	8006944 <_free_r>
 8006bb0:	e7c7      	b.n	8006b42 <__ssputs_r+0x46>
	...

08006bb4 <_svfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4698      	mov	r8, r3
 8006bba:	898b      	ldrh	r3, [r1, #12]
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	460d      	mov	r5, r1
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	b09d      	sub	sp, #116	; 0x74
 8006bc6:	d50e      	bpl.n	8006be6 <_svfiprintf_r+0x32>
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	b963      	cbnz	r3, 8006be6 <_svfiprintf_r+0x32>
 8006bcc:	2140      	movs	r1, #64	; 0x40
 8006bce:	f7ff ff21 	bl	8006a14 <_malloc_r>
 8006bd2:	6028      	str	r0, [r5, #0]
 8006bd4:	6128      	str	r0, [r5, #16]
 8006bd6:	b920      	cbnz	r0, 8006be2 <_svfiprintf_r+0x2e>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e0d1      	b.n	8006d86 <_svfiprintf_r+0x1d2>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	616b      	str	r3, [r5, #20]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bea:	2320      	movs	r3, #32
 8006bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bf0:	2330      	movs	r3, #48	; 0x30
 8006bf2:	f04f 0901 	mov.w	r9, #1
 8006bf6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bfa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006da0 <_svfiprintf_r+0x1ec>
 8006bfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c02:	4623      	mov	r3, r4
 8006c04:	469a      	mov	sl, r3
 8006c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0a:	b10a      	cbz	r2, 8006c10 <_svfiprintf_r+0x5c>
 8006c0c:	2a25      	cmp	r2, #37	; 0x25
 8006c0e:	d1f9      	bne.n	8006c04 <_svfiprintf_r+0x50>
 8006c10:	ebba 0b04 	subs.w	fp, sl, r4
 8006c14:	d00b      	beq.n	8006c2e <_svfiprintf_r+0x7a>
 8006c16:	465b      	mov	r3, fp
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff6d 	bl	8006afc <__ssputs_r>
 8006c22:	3001      	adds	r0, #1
 8006c24:	f000 80aa 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	445a      	add	r2, fp
 8006c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a2 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c42:	f10a 0a01 	add.w	sl, sl, #1
 8006c46:	9304      	str	r3, [sp, #16]
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c50:	4654      	mov	r4, sl
 8006c52:	2205      	movs	r2, #5
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	4851      	ldr	r0, [pc, #324]	; (8006da0 <_svfiprintf_r+0x1ec>)
 8006c5a:	f000 fc43 	bl	80074e4 <memchr>
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	b9d8      	cbnz	r0, 8006c9a <_svfiprintf_r+0xe6>
 8006c62:	06d0      	lsls	r0, r2, #27
 8006c64:	bf44      	itt	mi
 8006c66:	2320      	movmi	r3, #32
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6c:	0711      	lsls	r1, r2, #28
 8006c6e:	bf44      	itt	mi
 8006c70:	232b      	movmi	r3, #43	; 0x2b
 8006c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c76:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d015      	beq.n	8006caa <_svfiprintf_r+0xf6>
 8006c7e:	4654      	mov	r4, sl
 8006c80:	2000      	movs	r0, #0
 8006c82:	f04f 0c0a 	mov.w	ip, #10
 8006c86:	9a07      	ldr	r2, [sp, #28]
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d94e      	bls.n	8006d32 <_svfiprintf_r+0x17e>
 8006c94:	b1b0      	cbz	r0, 8006cc4 <_svfiprintf_r+0x110>
 8006c96:	9207      	str	r2, [sp, #28]
 8006c98:	e014      	b.n	8006cc4 <_svfiprintf_r+0x110>
 8006c9a:	eba0 0308 	sub.w	r3, r0, r8
 8006c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	46a2      	mov	sl, r4
 8006ca6:	9304      	str	r3, [sp, #16]
 8006ca8:	e7d2      	b.n	8006c50 <_svfiprintf_r+0x9c>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	1d19      	adds	r1, r3, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	9103      	str	r1, [sp, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	425b      	neglt	r3, r3
 8006cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cbc:	9307      	strge	r3, [sp, #28]
 8006cbe:	9307      	strlt	r3, [sp, #28]
 8006cc0:	bfb8      	it	lt
 8006cc2:	9204      	strlt	r2, [sp, #16]
 8006cc4:	7823      	ldrb	r3, [r4, #0]
 8006cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc8:	d10c      	bne.n	8006ce4 <_svfiprintf_r+0x130>
 8006cca:	7863      	ldrb	r3, [r4, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d135      	bne.n	8006d3c <_svfiprintf_r+0x188>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	3402      	adds	r4, #2
 8006cd4:	1d1a      	adds	r2, r3, #4
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	9203      	str	r2, [sp, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bfb8      	it	lt
 8006cde:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006da4 <_svfiprintf_r+0x1f0>
 8006ce8:	2203      	movs	r2, #3
 8006cea:	4650      	mov	r0, sl
 8006cec:	7821      	ldrb	r1, [r4, #0]
 8006cee:	f000 fbf9 	bl	80074e4 <memchr>
 8006cf2:	b140      	cbz	r0, 8006d06 <_svfiprintf_r+0x152>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	eba0 000a 	sub.w	r0, r0, sl
 8006cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	3401      	adds	r4, #1
 8006d02:	4303      	orrs	r3, r0
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	2206      	movs	r2, #6
 8006d0c:	4826      	ldr	r0, [pc, #152]	; (8006da8 <_svfiprintf_r+0x1f4>)
 8006d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d12:	f000 fbe7 	bl	80074e4 <memchr>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d038      	beq.n	8006d8c <_svfiprintf_r+0x1d8>
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d1c:	bb1b      	cbnz	r3, 8006d66 <_svfiprintf_r+0x1b2>
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	3308      	adds	r3, #8
 8006d28:	9303      	str	r3, [sp, #12]
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	4433      	add	r3, r6
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	e767      	b.n	8006c02 <_svfiprintf_r+0x4e>
 8006d32:	460c      	mov	r4, r1
 8006d34:	2001      	movs	r0, #1
 8006d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d3a:	e7a5      	b.n	8006c88 <_svfiprintf_r+0xd4>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	f04f 0c0a 	mov.w	ip, #10
 8006d42:	4619      	mov	r1, r3
 8006d44:	3401      	adds	r4, #1
 8006d46:	9305      	str	r3, [sp, #20]
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4e:	3a30      	subs	r2, #48	; 0x30
 8006d50:	2a09      	cmp	r2, #9
 8006d52:	d903      	bls.n	8006d5c <_svfiprintf_r+0x1a8>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c5      	beq.n	8006ce4 <_svfiprintf_r+0x130>
 8006d58:	9105      	str	r1, [sp, #20]
 8006d5a:	e7c3      	b.n	8006ce4 <_svfiprintf_r+0x130>
 8006d5c:	4604      	mov	r4, r0
 8006d5e:	2301      	movs	r3, #1
 8006d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d64:	e7f0      	b.n	8006d48 <_svfiprintf_r+0x194>
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4638      	mov	r0, r7
 8006d6e:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <_svfiprintf_r+0x1fc>)
 8006d70:	a904      	add	r1, sp, #16
 8006d72:	f3af 8000 	nop.w
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	4606      	mov	r6, r0
 8006d7a:	d1d6      	bne.n	8006d2a <_svfiprintf_r+0x176>
 8006d7c:	89ab      	ldrh	r3, [r5, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af2c 	bmi.w	8006bdc <_svfiprintf_r+0x28>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	b01d      	add	sp, #116	; 0x74
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4638      	mov	r0, r7
 8006d94:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <_svfiprintf_r+0x1fc>)
 8006d96:	a904      	add	r1, sp, #16
 8006d98:	f000 f9d4 	bl	8007144 <_printf_i>
 8006d9c:	e7eb      	b.n	8006d76 <_svfiprintf_r+0x1c2>
 8006d9e:	bf00      	nop
 8006da0:	080079c8 	.word	0x080079c8
 8006da4:	080079ce 	.word	0x080079ce
 8006da8:	080079d2 	.word	0x080079d2
 8006dac:	00000000 	.word	0x00000000
 8006db0:	08006afd 	.word	0x08006afd

08006db4 <__sfputc_r>:
 8006db4:	6893      	ldr	r3, [r2, #8]
 8006db6:	b410      	push	{r4}
 8006db8:	3b01      	subs	r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	6093      	str	r3, [r2, #8]
 8006dbe:	da07      	bge.n	8006dd0 <__sfputc_r+0x1c>
 8006dc0:	6994      	ldr	r4, [r2, #24]
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	db01      	blt.n	8006dca <__sfputc_r+0x16>
 8006dc6:	290a      	cmp	r1, #10
 8006dc8:	d102      	bne.n	8006dd0 <__sfputc_r+0x1c>
 8006dca:	bc10      	pop	{r4}
 8006dcc:	f7ff bad6 	b.w	800637c <__swbuf_r>
 8006dd0:	6813      	ldr	r3, [r2, #0]
 8006dd2:	1c58      	adds	r0, r3, #1
 8006dd4:	6010      	str	r0, [r2, #0]
 8006dd6:	7019      	strb	r1, [r3, #0]
 8006dd8:	4608      	mov	r0, r1
 8006dda:	bc10      	pop	{r4}
 8006ddc:	4770      	bx	lr

08006dde <__sfputs_r>:
 8006dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de0:	4606      	mov	r6, r0
 8006de2:	460f      	mov	r7, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	18d5      	adds	r5, r2, r3
 8006de8:	42ac      	cmp	r4, r5
 8006dea:	d101      	bne.n	8006df0 <__sfputs_r+0x12>
 8006dec:	2000      	movs	r0, #0
 8006dee:	e007      	b.n	8006e00 <__sfputs_r+0x22>
 8006df0:	463a      	mov	r2, r7
 8006df2:	4630      	mov	r0, r6
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	f7ff ffdc 	bl	8006db4 <__sfputc_r>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d1f3      	bne.n	8006de8 <__sfputs_r+0xa>
 8006e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e04 <_vfiprintf_r>:
 8006e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	460d      	mov	r5, r1
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	4698      	mov	r8, r3
 8006e0e:	4606      	mov	r6, r0
 8006e10:	b09d      	sub	sp, #116	; 0x74
 8006e12:	b118      	cbz	r0, 8006e1c <_vfiprintf_r+0x18>
 8006e14:	6983      	ldr	r3, [r0, #24]
 8006e16:	b90b      	cbnz	r3, 8006e1c <_vfiprintf_r+0x18>
 8006e18:	f7ff fc86 	bl	8006728 <__sinit>
 8006e1c:	4b89      	ldr	r3, [pc, #548]	; (8007044 <_vfiprintf_r+0x240>)
 8006e1e:	429d      	cmp	r5, r3
 8006e20:	d11b      	bne.n	8006e5a <_vfiprintf_r+0x56>
 8006e22:	6875      	ldr	r5, [r6, #4]
 8006e24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e26:	07d9      	lsls	r1, r3, #31
 8006e28:	d405      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e2a:	89ab      	ldrh	r3, [r5, #12]
 8006e2c:	059a      	lsls	r2, r3, #22
 8006e2e:	d402      	bmi.n	8006e36 <_vfiprintf_r+0x32>
 8006e30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e32:	f7ff fd17 	bl	8006864 <__retarget_lock_acquire_recursive>
 8006e36:	89ab      	ldrh	r3, [r5, #12]
 8006e38:	071b      	lsls	r3, r3, #28
 8006e3a:	d501      	bpl.n	8006e40 <_vfiprintf_r+0x3c>
 8006e3c:	692b      	ldr	r3, [r5, #16]
 8006e3e:	b9eb      	cbnz	r3, 8006e7c <_vfiprintf_r+0x78>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4630      	mov	r0, r6
 8006e44:	f7ff faec 	bl	8006420 <__swsetup_r>
 8006e48:	b1c0      	cbz	r0, 8006e7c <_vfiprintf_r+0x78>
 8006e4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e4c:	07dc      	lsls	r4, r3, #31
 8006e4e:	d50e      	bpl.n	8006e6e <_vfiprintf_r+0x6a>
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	b01d      	add	sp, #116	; 0x74
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	; (8007048 <_vfiprintf_r+0x244>)
 8006e5c:	429d      	cmp	r5, r3
 8006e5e:	d101      	bne.n	8006e64 <_vfiprintf_r+0x60>
 8006e60:	68b5      	ldr	r5, [r6, #8]
 8006e62:	e7df      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e64:	4b79      	ldr	r3, [pc, #484]	; (800704c <_vfiprintf_r+0x248>)
 8006e66:	429d      	cmp	r5, r3
 8006e68:	bf08      	it	eq
 8006e6a:	68f5      	ldreq	r5, [r6, #12]
 8006e6c:	e7da      	b.n	8006e24 <_vfiprintf_r+0x20>
 8006e6e:	89ab      	ldrh	r3, [r5, #12]
 8006e70:	0598      	lsls	r0, r3, #22
 8006e72:	d4ed      	bmi.n	8006e50 <_vfiprintf_r+0x4c>
 8006e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e76:	f7ff fcf6 	bl	8006866 <__retarget_lock_release_recursive>
 8006e7a:	e7e9      	b.n	8006e50 <_vfiprintf_r+0x4c>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e80:	2320      	movs	r3, #32
 8006e82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e86:	2330      	movs	r3, #48	; 0x30
 8006e88:	f04f 0901 	mov.w	r9, #1
 8006e8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e90:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007050 <_vfiprintf_r+0x24c>
 8006e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e98:	4623      	mov	r3, r4
 8006e9a:	469a      	mov	sl, r3
 8006e9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea0:	b10a      	cbz	r2, 8006ea6 <_vfiprintf_r+0xa2>
 8006ea2:	2a25      	cmp	r2, #37	; 0x25
 8006ea4:	d1f9      	bne.n	8006e9a <_vfiprintf_r+0x96>
 8006ea6:	ebba 0b04 	subs.w	fp, sl, r4
 8006eaa:	d00b      	beq.n	8006ec4 <_vfiprintf_r+0xc0>
 8006eac:	465b      	mov	r3, fp
 8006eae:	4622      	mov	r2, r4
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	4630      	mov	r0, r6
 8006eb4:	f7ff ff93 	bl	8006dde <__sfputs_r>
 8006eb8:	3001      	adds	r0, #1
 8006eba:	f000 80aa 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec0:	445a      	add	r2, fp
 8006ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80a2 	beq.w	8007012 <_vfiprintf_r+0x20e>
 8006ece:	2300      	movs	r3, #0
 8006ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ed8:	f10a 0a01 	add.w	sl, sl, #1
 8006edc:	9304      	str	r3, [sp, #16]
 8006ede:	9307      	str	r3, [sp, #28]
 8006ee0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee6:	4654      	mov	r4, sl
 8006ee8:	2205      	movs	r2, #5
 8006eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eee:	4858      	ldr	r0, [pc, #352]	; (8007050 <_vfiprintf_r+0x24c>)
 8006ef0:	f000 faf8 	bl	80074e4 <memchr>
 8006ef4:	9a04      	ldr	r2, [sp, #16]
 8006ef6:	b9d8      	cbnz	r0, 8006f30 <_vfiprintf_r+0x12c>
 8006ef8:	06d1      	lsls	r1, r2, #27
 8006efa:	bf44      	itt	mi
 8006efc:	2320      	movmi	r3, #32
 8006efe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f02:	0713      	lsls	r3, r2, #28
 8006f04:	bf44      	itt	mi
 8006f06:	232b      	movmi	r3, #43	; 0x2b
 8006f08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f10:	2b2a      	cmp	r3, #42	; 0x2a
 8006f12:	d015      	beq.n	8006f40 <_vfiprintf_r+0x13c>
 8006f14:	4654      	mov	r4, sl
 8006f16:	2000      	movs	r0, #0
 8006f18:	f04f 0c0a 	mov.w	ip, #10
 8006f1c:	9a07      	ldr	r2, [sp, #28]
 8006f1e:	4621      	mov	r1, r4
 8006f20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f24:	3b30      	subs	r3, #48	; 0x30
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d94e      	bls.n	8006fc8 <_vfiprintf_r+0x1c4>
 8006f2a:	b1b0      	cbz	r0, 8006f5a <_vfiprintf_r+0x156>
 8006f2c:	9207      	str	r2, [sp, #28]
 8006f2e:	e014      	b.n	8006f5a <_vfiprintf_r+0x156>
 8006f30:	eba0 0308 	sub.w	r3, r0, r8
 8006f34:	fa09 f303 	lsl.w	r3, r9, r3
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	46a2      	mov	sl, r4
 8006f3c:	9304      	str	r3, [sp, #16]
 8006f3e:	e7d2      	b.n	8006ee6 <_vfiprintf_r+0xe2>
 8006f40:	9b03      	ldr	r3, [sp, #12]
 8006f42:	1d19      	adds	r1, r3, #4
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	9103      	str	r1, [sp, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bfbb      	ittet	lt
 8006f4c:	425b      	neglt	r3, r3
 8006f4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f52:	9307      	strge	r3, [sp, #28]
 8006f54:	9307      	strlt	r3, [sp, #28]
 8006f56:	bfb8      	it	lt
 8006f58:	9204      	strlt	r2, [sp, #16]
 8006f5a:	7823      	ldrb	r3, [r4, #0]
 8006f5c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f5e:	d10c      	bne.n	8006f7a <_vfiprintf_r+0x176>
 8006f60:	7863      	ldrb	r3, [r4, #1]
 8006f62:	2b2a      	cmp	r3, #42	; 0x2a
 8006f64:	d135      	bne.n	8006fd2 <_vfiprintf_r+0x1ce>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	3402      	adds	r4, #2
 8006f6a:	1d1a      	adds	r2, r3, #4
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	9203      	str	r2, [sp, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bfb8      	it	lt
 8006f74:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f78:	9305      	str	r3, [sp, #20]
 8006f7a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007054 <_vfiprintf_r+0x250>
 8006f7e:	2203      	movs	r2, #3
 8006f80:	4650      	mov	r0, sl
 8006f82:	7821      	ldrb	r1, [r4, #0]
 8006f84:	f000 faae 	bl	80074e4 <memchr>
 8006f88:	b140      	cbz	r0, 8006f9c <_vfiprintf_r+0x198>
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	eba0 000a 	sub.w	r0, r0, sl
 8006f90:	fa03 f000 	lsl.w	r0, r3, r0
 8006f94:	9b04      	ldr	r3, [sp, #16]
 8006f96:	3401      	adds	r4, #1
 8006f98:	4303      	orrs	r3, r0
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa0:	2206      	movs	r2, #6
 8006fa2:	482d      	ldr	r0, [pc, #180]	; (8007058 <_vfiprintf_r+0x254>)
 8006fa4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fa8:	f000 fa9c 	bl	80074e4 <memchr>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	d03f      	beq.n	8007030 <_vfiprintf_r+0x22c>
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	; (800705c <_vfiprintf_r+0x258>)
 8006fb2:	bb1b      	cbnz	r3, 8006ffc <_vfiprintf_r+0x1f8>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	3307      	adds	r3, #7
 8006fb8:	f023 0307 	bic.w	r3, r3, #7
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	9303      	str	r3, [sp, #12]
 8006fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc2:	443b      	add	r3, r7
 8006fc4:	9309      	str	r3, [sp, #36]	; 0x24
 8006fc6:	e767      	b.n	8006e98 <_vfiprintf_r+0x94>
 8006fc8:	460c      	mov	r4, r1
 8006fca:	2001      	movs	r0, #1
 8006fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd0:	e7a5      	b.n	8006f1e <_vfiprintf_r+0x11a>
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	f04f 0c0a 	mov.w	ip, #10
 8006fd8:	4619      	mov	r1, r3
 8006fda:	3401      	adds	r4, #1
 8006fdc:	9305      	str	r3, [sp, #20]
 8006fde:	4620      	mov	r0, r4
 8006fe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe4:	3a30      	subs	r2, #48	; 0x30
 8006fe6:	2a09      	cmp	r2, #9
 8006fe8:	d903      	bls.n	8006ff2 <_vfiprintf_r+0x1ee>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d0c5      	beq.n	8006f7a <_vfiprintf_r+0x176>
 8006fee:	9105      	str	r1, [sp, #20]
 8006ff0:	e7c3      	b.n	8006f7a <_vfiprintf_r+0x176>
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffa:	e7f0      	b.n	8006fde <_vfiprintf_r+0x1da>
 8006ffc:	ab03      	add	r3, sp, #12
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	462a      	mov	r2, r5
 8007002:	4630      	mov	r0, r6
 8007004:	4b16      	ldr	r3, [pc, #88]	; (8007060 <_vfiprintf_r+0x25c>)
 8007006:	a904      	add	r1, sp, #16
 8007008:	f3af 8000 	nop.w
 800700c:	4607      	mov	r7, r0
 800700e:	1c78      	adds	r0, r7, #1
 8007010:	d1d6      	bne.n	8006fc0 <_vfiprintf_r+0x1bc>
 8007012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007014:	07d9      	lsls	r1, r3, #31
 8007016:	d405      	bmi.n	8007024 <_vfiprintf_r+0x220>
 8007018:	89ab      	ldrh	r3, [r5, #12]
 800701a:	059a      	lsls	r2, r3, #22
 800701c:	d402      	bmi.n	8007024 <_vfiprintf_r+0x220>
 800701e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007020:	f7ff fc21 	bl	8006866 <__retarget_lock_release_recursive>
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	f53f af12 	bmi.w	8006e50 <_vfiprintf_r+0x4c>
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	e711      	b.n	8006e54 <_vfiprintf_r+0x50>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	462a      	mov	r2, r5
 8007036:	4630      	mov	r0, r6
 8007038:	4b09      	ldr	r3, [pc, #36]	; (8007060 <_vfiprintf_r+0x25c>)
 800703a:	a904      	add	r1, sp, #16
 800703c:	f000 f882 	bl	8007144 <_printf_i>
 8007040:	e7e4      	b.n	800700c <_vfiprintf_r+0x208>
 8007042:	bf00      	nop
 8007044:	08007988 	.word	0x08007988
 8007048:	080079a8 	.word	0x080079a8
 800704c:	08007968 	.word	0x08007968
 8007050:	080079c8 	.word	0x080079c8
 8007054:	080079ce 	.word	0x080079ce
 8007058:	080079d2 	.word	0x080079d2
 800705c:	00000000 	.word	0x00000000
 8007060:	08006ddf 	.word	0x08006ddf

08007064 <_printf_common>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	4616      	mov	r6, r2
 800706a:	4699      	mov	r9, r3
 800706c:	688a      	ldr	r2, [r1, #8]
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	4607      	mov	r7, r0
 8007072:	4293      	cmp	r3, r2
 8007074:	bfb8      	it	lt
 8007076:	4613      	movlt	r3, r2
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800707e:	460c      	mov	r4, r1
 8007080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007084:	b10a      	cbz	r2, 800708a <_printf_common+0x26>
 8007086:	3301      	adds	r3, #1
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0699      	lsls	r1, r3, #26
 800708e:	bf42      	ittt	mi
 8007090:	6833      	ldrmi	r3, [r6, #0]
 8007092:	3302      	addmi	r3, #2
 8007094:	6033      	strmi	r3, [r6, #0]
 8007096:	6825      	ldr	r5, [r4, #0]
 8007098:	f015 0506 	ands.w	r5, r5, #6
 800709c:	d106      	bne.n	80070ac <_printf_common+0x48>
 800709e:	f104 0a19 	add.w	sl, r4, #25
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	6832      	ldr	r2, [r6, #0]
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dc28      	bgt.n	80070fe <_printf_common+0x9a>
 80070ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b0:	1e13      	subs	r3, r2, #0
 80070b2:	6822      	ldr	r2, [r4, #0]
 80070b4:	bf18      	it	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	0692      	lsls	r2, r2, #26
 80070ba:	d42d      	bmi.n	8007118 <_printf_common+0xb4>
 80070bc:	4649      	mov	r1, r9
 80070be:	4638      	mov	r0, r7
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	47c0      	blx	r8
 80070c6:	3001      	adds	r0, #1
 80070c8:	d020      	beq.n	800710c <_printf_common+0xa8>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	68e5      	ldr	r5, [r4, #12]
 80070ce:	f003 0306 	and.w	r3, r3, #6
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	bf18      	it	ne
 80070d6:	2500      	movne	r5, #0
 80070d8:	6832      	ldr	r2, [r6, #0]
 80070da:	f04f 0600 	mov.w	r6, #0
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	bf08      	it	eq
 80070e2:	1aad      	subeq	r5, r5, r2
 80070e4:	6922      	ldr	r2, [r4, #16]
 80070e6:	bf08      	it	eq
 80070e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070ec:	4293      	cmp	r3, r2
 80070ee:	bfc4      	itt	gt
 80070f0:	1a9b      	subgt	r3, r3, r2
 80070f2:	18ed      	addgt	r5, r5, r3
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xcc>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xac>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xb0>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c4      	b.n	80070a2 <_printf_common+0x3e>
 8007118:	2030      	movs	r0, #48	; 0x30
 800711a:	18e1      	adds	r1, r4, r3
 800711c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007120:	1c5a      	adds	r2, r3, #1
 8007122:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007126:	4422      	add	r2, r4
 8007128:	3302      	adds	r3, #2
 800712a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712e:	e7c5      	b.n	80070bc <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa8>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x92>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	7e0f      	ldrb	r7, [r1, #24]
 800714a:	4691      	mov	r9, r2
 800714c:	2f78      	cmp	r7, #120	; 0x78
 800714e:	4680      	mov	r8, r0
 8007150:	460c      	mov	r4, r1
 8007152:	469a      	mov	sl, r3
 8007154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d9 	beq.w	8007318 <_printf_i+0x1d4>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a4 	beq.w	80072b4 <_printf_i+0x170>
 800716c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a101      	add	r1, pc, #4	; (adr r1, 8007184 <_printf_i+0x40>)
 8007180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072ff 	.word	0x080072ff
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072e1 	.word	0x080072e1
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	08007321 	.word	0x08007321
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e9 	.word	0x080072e9
 80071dc:	682b      	ldr	r3, [r5, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	602a      	str	r2, [r5, #0]
 80071e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a4      	b.n	800733a <_printf_i+0x1f6>
 80071f0:	6820      	ldr	r0, [r4, #0]
 80071f2:	6829      	ldr	r1, [r5, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	f101 0304 	add.w	r3, r1, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	680e      	ldr	r6, [r1, #0]
 80071fe:	602b      	str	r3, [r5, #0]
 8007200:	2e00      	cmp	r6, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	4276      	negs	r6, r6
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	230a      	movs	r3, #10
 800720e:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	680e      	ldr	r6, [r1, #0]
 8007214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007218:	602b      	str	r3, [r5, #0]
 800721a:	bf18      	it	ne
 800721c:	b236      	sxthne	r6, r6
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	1d19      	adds	r1, r3, #4
 8007226:	6029      	str	r1, [r5, #0]
 8007228:	0601      	lsls	r1, r0, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681e      	ldr	r6, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0646      	lsls	r6, r0, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881e      	ldrh	r6, [r3, #0]
 8007236:	2f6f      	cmp	r7, #111	; 0x6f
 8007238:	bf0c      	ite	eq
 800723a:	2308      	moveq	r3, #8
 800723c:	230a      	movne	r3, #10
 800723e:	4852      	ldr	r0, [pc, #328]	; (8007388 <_printf_i+0x244>)
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6865      	ldr	r5, [r4, #4]
 8007248:	2d00      	cmp	r5, #0
 800724a:	bfa8      	it	ge
 800724c:	6821      	ldrge	r1, [r4, #0]
 800724e:	60a5      	str	r5, [r4, #8]
 8007250:	bfa4      	itt	ge
 8007252:	f021 0104 	bicge.w	r1, r1, #4
 8007256:	6021      	strge	r1, [r4, #0]
 8007258:	b90e      	cbnz	r6, 800725e <_printf_i+0x11a>
 800725a:	2d00      	cmp	r5, #0
 800725c:	d04d      	beq.n	80072fa <_printf_i+0x1b6>
 800725e:	4615      	mov	r5, r2
 8007260:	fbb6 f1f3 	udiv	r1, r6, r3
 8007264:	fb03 6711 	mls	r7, r3, r1, r6
 8007268:	5dc7      	ldrb	r7, [r0, r7]
 800726a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726e:	4637      	mov	r7, r6
 8007270:	42bb      	cmp	r3, r7
 8007272:	460e      	mov	r6, r1
 8007274:	d9f4      	bls.n	8007260 <_printf_i+0x11c>
 8007276:	2b08      	cmp	r3, #8
 8007278:	d10b      	bne.n	8007292 <_printf_i+0x14e>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07de      	lsls	r6, r3, #31
 800727e:	d508      	bpl.n	8007292 <_printf_i+0x14e>
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	6861      	ldr	r1, [r4, #4]
 8007284:	4299      	cmp	r1, r3
 8007286:	bfde      	ittt	le
 8007288:	2330      	movle	r3, #48	; 0x30
 800728a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007292:	1b52      	subs	r2, r2, r5
 8007294:	6122      	str	r2, [r4, #16]
 8007296:	464b      	mov	r3, r9
 8007298:	4621      	mov	r1, r4
 800729a:	4640      	mov	r0, r8
 800729c:	f8cd a000 	str.w	sl, [sp]
 80072a0:	aa03      	add	r2, sp, #12
 80072a2:	f7ff fedf 	bl	8007064 <_printf_common>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d14c      	bne.n	8007344 <_printf_i+0x200>
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b004      	add	sp, #16
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	4834      	ldr	r0, [pc, #208]	; (8007388 <_printf_i+0x244>)
 80072b6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072ba:	6829      	ldr	r1, [r5, #0]
 80072bc:	6823      	ldr	r3, [r4, #0]
 80072be:	f851 6b04 	ldr.w	r6, [r1], #4
 80072c2:	6029      	str	r1, [r5, #0]
 80072c4:	061d      	lsls	r5, r3, #24
 80072c6:	d514      	bpl.n	80072f2 <_printf_i+0x1ae>
 80072c8:	07df      	lsls	r7, r3, #31
 80072ca:	bf44      	itt	mi
 80072cc:	f043 0320 	orrmi.w	r3, r3, #32
 80072d0:	6023      	strmi	r3, [r4, #0]
 80072d2:	b91e      	cbnz	r6, 80072dc <_printf_i+0x198>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	f023 0320 	bic.w	r3, r3, #32
 80072da:	6023      	str	r3, [r4, #0]
 80072dc:	2310      	movs	r3, #16
 80072de:	e7af      	b.n	8007240 <_printf_i+0xfc>
 80072e0:	6823      	ldr	r3, [r4, #0]
 80072e2:	f043 0320 	orr.w	r3, r3, #32
 80072e6:	6023      	str	r3, [r4, #0]
 80072e8:	2378      	movs	r3, #120	; 0x78
 80072ea:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072f0:	e7e3      	b.n	80072ba <_printf_i+0x176>
 80072f2:	0659      	lsls	r1, r3, #25
 80072f4:	bf48      	it	mi
 80072f6:	b2b6      	uxthmi	r6, r6
 80072f8:	e7e6      	b.n	80072c8 <_printf_i+0x184>
 80072fa:	4615      	mov	r5, r2
 80072fc:	e7bb      	b.n	8007276 <_printf_i+0x132>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	6826      	ldr	r6, [r4, #0]
 8007302:	1d18      	adds	r0, r3, #4
 8007304:	6961      	ldr	r1, [r4, #20]
 8007306:	6028      	str	r0, [r5, #0]
 8007308:	0635      	lsls	r5, r6, #24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	d501      	bpl.n	8007312 <_printf_i+0x1ce>
 800730e:	6019      	str	r1, [r3, #0]
 8007310:	e002      	b.n	8007318 <_printf_i+0x1d4>
 8007312:	0670      	lsls	r0, r6, #25
 8007314:	d5fb      	bpl.n	800730e <_printf_i+0x1ca>
 8007316:	8019      	strh	r1, [r3, #0]
 8007318:	2300      	movs	r3, #0
 800731a:	4615      	mov	r5, r2
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	e7ba      	b.n	8007296 <_printf_i+0x152>
 8007320:	682b      	ldr	r3, [r5, #0]
 8007322:	2100      	movs	r1, #0
 8007324:	1d1a      	adds	r2, r3, #4
 8007326:	602a      	str	r2, [r5, #0]
 8007328:	681d      	ldr	r5, [r3, #0]
 800732a:	6862      	ldr	r2, [r4, #4]
 800732c:	4628      	mov	r0, r5
 800732e:	f000 f8d9 	bl	80074e4 <memchr>
 8007332:	b108      	cbz	r0, 8007338 <_printf_i+0x1f4>
 8007334:	1b40      	subs	r0, r0, r5
 8007336:	6060      	str	r0, [r4, #4]
 8007338:	6863      	ldr	r3, [r4, #4]
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	2300      	movs	r3, #0
 800733e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007342:	e7a8      	b.n	8007296 <_printf_i+0x152>
 8007344:	462a      	mov	r2, r5
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	6923      	ldr	r3, [r4, #16]
 800734c:	47d0      	blx	sl
 800734e:	3001      	adds	r0, #1
 8007350:	d0ab      	beq.n	80072aa <_printf_i+0x166>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	079b      	lsls	r3, r3, #30
 8007356:	d413      	bmi.n	8007380 <_printf_i+0x23c>
 8007358:	68e0      	ldr	r0, [r4, #12]
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	4298      	cmp	r0, r3
 800735e:	bfb8      	it	lt
 8007360:	4618      	movlt	r0, r3
 8007362:	e7a4      	b.n	80072ae <_printf_i+0x16a>
 8007364:	2301      	movs	r3, #1
 8007366:	4632      	mov	r2, r6
 8007368:	4649      	mov	r1, r9
 800736a:	4640      	mov	r0, r8
 800736c:	47d0      	blx	sl
 800736e:	3001      	adds	r0, #1
 8007370:	d09b      	beq.n	80072aa <_printf_i+0x166>
 8007372:	3501      	adds	r5, #1
 8007374:	68e3      	ldr	r3, [r4, #12]
 8007376:	9903      	ldr	r1, [sp, #12]
 8007378:	1a5b      	subs	r3, r3, r1
 800737a:	42ab      	cmp	r3, r5
 800737c:	dcf2      	bgt.n	8007364 <_printf_i+0x220>
 800737e:	e7eb      	b.n	8007358 <_printf_i+0x214>
 8007380:	2500      	movs	r5, #0
 8007382:	f104 0619 	add.w	r6, r4, #25
 8007386:	e7f5      	b.n	8007374 <_printf_i+0x230>
 8007388:	080079d9 	.word	0x080079d9
 800738c:	080079ea 	.word	0x080079ea

08007390 <_sbrk_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	2300      	movs	r3, #0
 8007394:	4d05      	ldr	r5, [pc, #20]	; (80073ac <_sbrk_r+0x1c>)
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7f9 fd68 	bl	8000e70 <_sbrk>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_sbrk_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_sbrk_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	2000024c 	.word	0x2000024c

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 f906 	bl	80075c8 <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__swrite>:
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	4605      	mov	r5, r0
 80073dc:	05db      	lsls	r3, r3, #23
 80073de:	460c      	mov	r4, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	d505      	bpl.n	80073f0 <__swrite+0x1e>
 80073e4:	2302      	movs	r3, #2
 80073e6:	2200      	movs	r2, #0
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	f000 f868 	bl	80074c0 <_lseek_r>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	4632      	mov	r2, r6
 80073f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073f8:	81a3      	strh	r3, [r4, #12]
 80073fa:	4628      	mov	r0, r5
 80073fc:	463b      	mov	r3, r7
 80073fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	f000 b817 	b.w	8007438 <_write_r>

0800740a <__sseek>:
 800740a:	b510      	push	{r4, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 f855 	bl	80074c0 <_lseek_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	bf15      	itete	ne
 800741c:	6560      	strne	r0, [r4, #84]	; 0x54
 800741e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strheq	r3, [r4, #12]
 8007428:	bf18      	it	ne
 800742a:	81a3      	strhne	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__sclose>:
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 b813 	b.w	800745c <_close_r>
	...

08007438 <_write_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	4611      	mov	r1, r2
 8007440:	2200      	movs	r2, #0
 8007442:	4d05      	ldr	r5, [pc, #20]	; (8007458 <_write_r+0x20>)
 8007444:	602a      	str	r2, [r5, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	f7f9 fcc6 	bl	8000dd8 <_write>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_write_r+0x1e>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_write_r+0x1e>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	2000024c 	.word	0x2000024c

0800745c <_close_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	2300      	movs	r3, #0
 8007460:	4d05      	ldr	r5, [pc, #20]	; (8007478 <_close_r+0x1c>)
 8007462:	4604      	mov	r4, r0
 8007464:	4608      	mov	r0, r1
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	f7f9 fcd2 	bl	8000e10 <_close>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	d102      	bne.n	8007476 <_close_r+0x1a>
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	b103      	cbz	r3, 8007476 <_close_r+0x1a>
 8007474:	6023      	str	r3, [r4, #0]
 8007476:	bd38      	pop	{r3, r4, r5, pc}
 8007478:	2000024c 	.word	0x2000024c

0800747c <_fstat_r>:
 800747c:	b538      	push	{r3, r4, r5, lr}
 800747e:	2300      	movs	r3, #0
 8007480:	4d06      	ldr	r5, [pc, #24]	; (800749c <_fstat_r+0x20>)
 8007482:	4604      	mov	r4, r0
 8007484:	4608      	mov	r0, r1
 8007486:	4611      	mov	r1, r2
 8007488:	602b      	str	r3, [r5, #0]
 800748a:	f7f9 fccc 	bl	8000e26 <_fstat>
 800748e:	1c43      	adds	r3, r0, #1
 8007490:	d102      	bne.n	8007498 <_fstat_r+0x1c>
 8007492:	682b      	ldr	r3, [r5, #0]
 8007494:	b103      	cbz	r3, 8007498 <_fstat_r+0x1c>
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	bf00      	nop
 800749c:	2000024c 	.word	0x2000024c

080074a0 <_isatty_r>:
 80074a0:	b538      	push	{r3, r4, r5, lr}
 80074a2:	2300      	movs	r3, #0
 80074a4:	4d05      	ldr	r5, [pc, #20]	; (80074bc <_isatty_r+0x1c>)
 80074a6:	4604      	mov	r4, r0
 80074a8:	4608      	mov	r0, r1
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	f7f9 fcca 	bl	8000e44 <_isatty>
 80074b0:	1c43      	adds	r3, r0, #1
 80074b2:	d102      	bne.n	80074ba <_isatty_r+0x1a>
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	b103      	cbz	r3, 80074ba <_isatty_r+0x1a>
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	bd38      	pop	{r3, r4, r5, pc}
 80074bc:	2000024c 	.word	0x2000024c

080074c0 <_lseek_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	4611      	mov	r1, r2
 80074c8:	2200      	movs	r2, #0
 80074ca:	4d05      	ldr	r5, [pc, #20]	; (80074e0 <_lseek_r+0x20>)
 80074cc:	602a      	str	r2, [r5, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f7f9 fcc2 	bl	8000e58 <_lseek>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_lseek_r+0x1e>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_lseek_r+0x1e>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	2000024c 	.word	0x2000024c

080074e4 <memchr>:
 80074e4:	4603      	mov	r3, r0
 80074e6:	b510      	push	{r4, lr}
 80074e8:	b2c9      	uxtb	r1, r1
 80074ea:	4402      	add	r2, r0
 80074ec:	4293      	cmp	r3, r2
 80074ee:	4618      	mov	r0, r3
 80074f0:	d101      	bne.n	80074f6 <memchr+0x12>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e003      	b.n	80074fe <memchr+0x1a>
 80074f6:	7804      	ldrb	r4, [r0, #0]
 80074f8:	3301      	adds	r3, #1
 80074fa:	428c      	cmp	r4, r1
 80074fc:	d1f6      	bne.n	80074ec <memchr+0x8>
 80074fe:	bd10      	pop	{r4, pc}

08007500 <memcpy>:
 8007500:	440a      	add	r2, r1
 8007502:	4291      	cmp	r1, r2
 8007504:	f100 33ff 	add.w	r3, r0, #4294967295
 8007508:	d100      	bne.n	800750c <memcpy+0xc>
 800750a:	4770      	bx	lr
 800750c:	b510      	push	{r4, lr}
 800750e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007512:	4291      	cmp	r1, r2
 8007514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007518:	d1f9      	bne.n	800750e <memcpy+0xe>
 800751a:	bd10      	pop	{r4, pc}

0800751c <memmove>:
 800751c:	4288      	cmp	r0, r1
 800751e:	b510      	push	{r4, lr}
 8007520:	eb01 0402 	add.w	r4, r1, r2
 8007524:	d902      	bls.n	800752c <memmove+0x10>
 8007526:	4284      	cmp	r4, r0
 8007528:	4623      	mov	r3, r4
 800752a:	d807      	bhi.n	800753c <memmove+0x20>
 800752c:	1e43      	subs	r3, r0, #1
 800752e:	42a1      	cmp	r1, r4
 8007530:	d008      	beq.n	8007544 <memmove+0x28>
 8007532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800753a:	e7f8      	b.n	800752e <memmove+0x12>
 800753c:	4601      	mov	r1, r0
 800753e:	4402      	add	r2, r0
 8007540:	428a      	cmp	r2, r1
 8007542:	d100      	bne.n	8007546 <memmove+0x2a>
 8007544:	bd10      	pop	{r4, pc}
 8007546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800754a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800754e:	e7f7      	b.n	8007540 <memmove+0x24>

08007550 <__malloc_lock>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__malloc_lock+0x8>)
 8007552:	f7ff b987 	b.w	8006864 <__retarget_lock_acquire_recursive>
 8007556:	bf00      	nop
 8007558:	20000240 	.word	0x20000240

0800755c <__malloc_unlock>:
 800755c:	4801      	ldr	r0, [pc, #4]	; (8007564 <__malloc_unlock+0x8>)
 800755e:	f7ff b982 	b.w	8006866 <__retarget_lock_release_recursive>
 8007562:	bf00      	nop
 8007564:	20000240 	.word	0x20000240

08007568 <_realloc_r>:
 8007568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800756c:	4680      	mov	r8, r0
 800756e:	4614      	mov	r4, r2
 8007570:	460e      	mov	r6, r1
 8007572:	b921      	cbnz	r1, 800757e <_realloc_r+0x16>
 8007574:	4611      	mov	r1, r2
 8007576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757a:	f7ff ba4b 	b.w	8006a14 <_malloc_r>
 800757e:	b92a      	cbnz	r2, 800758c <_realloc_r+0x24>
 8007580:	f7ff f9e0 	bl	8006944 <_free_r>
 8007584:	4625      	mov	r5, r4
 8007586:	4628      	mov	r0, r5
 8007588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800758c:	f000 f82e 	bl	80075ec <_malloc_usable_size_r>
 8007590:	4284      	cmp	r4, r0
 8007592:	4607      	mov	r7, r0
 8007594:	d802      	bhi.n	800759c <_realloc_r+0x34>
 8007596:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800759a:	d812      	bhi.n	80075c2 <_realloc_r+0x5a>
 800759c:	4621      	mov	r1, r4
 800759e:	4640      	mov	r0, r8
 80075a0:	f7ff fa38 	bl	8006a14 <_malloc_r>
 80075a4:	4605      	mov	r5, r0
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0ed      	beq.n	8007586 <_realloc_r+0x1e>
 80075aa:	42bc      	cmp	r4, r7
 80075ac:	4622      	mov	r2, r4
 80075ae:	4631      	mov	r1, r6
 80075b0:	bf28      	it	cs
 80075b2:	463a      	movcs	r2, r7
 80075b4:	f7ff ffa4 	bl	8007500 <memcpy>
 80075b8:	4631      	mov	r1, r6
 80075ba:	4640      	mov	r0, r8
 80075bc:	f7ff f9c2 	bl	8006944 <_free_r>
 80075c0:	e7e1      	b.n	8007586 <_realloc_r+0x1e>
 80075c2:	4635      	mov	r5, r6
 80075c4:	e7df      	b.n	8007586 <_realloc_r+0x1e>
	...

080075c8 <_read_r>:
 80075c8:	b538      	push	{r3, r4, r5, lr}
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	2200      	movs	r2, #0
 80075d2:	4d05      	ldr	r5, [pc, #20]	; (80075e8 <_read_r+0x20>)
 80075d4:	602a      	str	r2, [r5, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	f7f9 fbe1 	bl	8000d9e <_read>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_read_r+0x1e>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_read_r+0x1e>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	2000024c 	.word	0x2000024c

080075ec <_malloc_usable_size_r>:
 80075ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f0:	1f18      	subs	r0, r3, #4
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bfbc      	itt	lt
 80075f6:	580b      	ldrlt	r3, [r1, r0]
 80075f8:	18c0      	addlt	r0, r0, r3
 80075fa:	4770      	bx	lr

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
